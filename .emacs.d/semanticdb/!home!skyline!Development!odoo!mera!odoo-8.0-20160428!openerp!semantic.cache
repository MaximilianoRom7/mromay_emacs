;; Object openerp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "openerp/"
  :tables (list 
   (semanticdb-table "models.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    Object Relational Mapping module:
     * Hierarchical structure
     * Constraints consistency and validation
     * Object metadata depends on its status
     * Optimised processing by complex query (multiple actions at once)
     * Default field values
     * Permissions optimisation
     * Persistant object: DB postgresql
     * Data conversion
     * Multi-level caching system
     * Two different inheritance mechanisms
     * Rich set of field types:
          - classical (varchar, integer, boolean, ...)
          - relational (one2many, many2one, many2many)
          - functional

\"\"\"" code nil nil [981 1586])
            ("datetime" include nil nil [1588 1603])
            ("functools" include nil nil [1604 1620])
            ("itertools" include nil nil [1621 1637])
            ("logging" include nil nil [1638 1652])
            ("operator" include nil nil [1653 1668])
            ("pytz" include nil nil [1669 1680])
            ("re" include nil nil [1681 1690])
            ("time" include nil nil [1691 1702])
            ("collections" include nil nil [1703 1754])
            ("inspect" include nil nil [1755 1799])
            ("operator" include nil nil [1800 1831])
            ("babel.dates" include nil nil [1833 1851])
            ("dateutil.relativedelta" include nil nil [1852 1881])
            ("psycopg2" include nil nil [1882 1897])
            ("lxml" include nil nil [1898 1920])
            ("openerp" include nil nil [1922 1936])
            ("SUPERUSER_ID" include nil nil [1944 1963])
            ("api" include nil nil [1971 1981])
            ("tools" include nil nil [1989 2001])
            ("Environment" include nil nil [2012 2030])
            ("except_orm" include nil nil [2048 2109])
            ("AccessError" include nil nil [2048 2109])
            ("MissingError" include nil nil [2048 2109])
            ("ValidationError" include nil nil [2048 2109])
            ("fields" include nil nil [2120 2133])
            ("Query" include nil nil [2150 2162])
            ("frozendict" include nil nil [2175 2217])
            ("lazy_property" include nil nil [2175 2217])
            ("ormcache" include nil nil [2175 2217])
            ("config" include nil nil [2237 2250])
            ("frame_codeinfo" include nil nil [2268 2289])
            ("CountingStream" include nil nil [2307 2396])
            ("DEFAULT_SERVER_DATETIME_FORMAT" include nil nil [2307 2396])
            ("DEFAULT_SERVER_DATE_FORMAT" include nil nil [2307 2396])
            ("pickle" include nil nil [2307 2396])
            ("safe_eval" include nil nil [2419 2443])
            ("_" include nil nil [2466 2474])
            ("_logger" variable nil nil [2476 2513])
            ("_schema" variable nil nil [2514 2563])
            ("regex_order" variable nil nil [2565 2664])
            ("regex_object_name" variable nil nil [2665 2713])
            ("onchange_v7" variable nil nil [2714 2758])
            ("AUTOINIT_RECALCULATE_STORED_FIELDS" variable nil nil [2760 2801])
            ("pdb" include nil nil [2803 2813])
            ("check_object_name" function
               (:documentation " Check if the given name is a valid openerp object name.

        The _name attribute in osv and osv_memory object is subject to
        some restrictions. This function returns True or False whether
        the given name is allowed or not.

        TODO: this is an approximation. The goal in this approximation
        is to disallow uppercase characters (in some places, we quote
        table/column names and in other not, which leads to this kind
        of errors:

            psycopg2.ProgrammingError: relation \"xxx\" does not exist).

        The same restriction should apply to both osv and osv_memory
        objects for consistency.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2837 2841]))                  )
                nil [2815 3591])
            ("raise_on_invalid_object_name" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3625 3629]))              ) nil [3592 3799])
            ("POSTGRES_CONFDELTYPES" variable nil nil [3800 3935])
            ("intersect" function (:arguments 
              ( ("la" variable nil (reparse-symbol function_parameters) [3951 3953])
                ("lb" variable nil (reparse-symbol function_parameters) [3955 3957]))              ) nil [3937 4001])
            ("same_name" function
               (:documentation " Test whether functions ``f`` and ``g`` are identical or have the same name "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [4016 4017])
                    ("g" variable nil (reparse-symbol function_parameters) [4019 4020]))                  )
                nil [4002 4186])
            ("fix_import_export_id_paths" function
               (:documentation "
    Fixes the id fields in import and exports, and splits field paths
    on '/'.

    :param str fieldname: name of the field to import/export
    :return: split field name
    :rtype: list of str
    "
                :arguments 
                  ( ("fieldname" variable nil (reparse-symbol function_parameters) [4218 4227]))                  )
                nil [4187 4614])
            ("pg_varchar" function
               (:documentation " Returns the VARCHAR declaration for the provided size:

    * If no size (or an empty or negative size is provided) return an
      'infinite' VARCHAR
    * Otherwise return a VARCHAR(n)

    :type int size: varchar size, optional
    :rtype: str
    "
                :arguments 
                  ( ("size" variable nil (reparse-symbol function_parameters) [4630 4634]))                  )
                nil [4615 5150])
            ("FIELDS_TO_PGTYPES" variable nil nil [5151 5427])
            ("get_pg_type" function
               (:documentation "
    :param fields._column f: field to get a Postgres type for
    :param type type_override: use the provided type for dispatching instead of the field's own type
    :returns: (postgres_identification_type, postgres_type_specification)
    :rtype: (str, str)
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [5445 5446])
                    ("type_override" variable nil (reparse-symbol function_parameters) [5448 5461]))                  )
                nil [5429 7206])
            ("MetaModel" type
               (:documentation " Metaclass for the models.

    This class is used as the metaclass for the class :class:`BaseModel` to
    discover the models defined in a module (without instantiating them).
    If the automatic discovery is not needed, it is possible to set the model's
    ``_register`` attribute to False.

    "
                :superclasses ("api.Meta")
                :members 
                  ( ("module_to_models" variable nil (reparse-symbol indented_block_body) [7552 7573])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7616 7756])
                            ("if" code nil (reparse-symbol indented_block_body) [7765 8378])
                            ("if" code nil (reparse-symbol indented_block_body) [8451 8548])
                            ("for" code nil (reparse-symbol indented_block_body) [8638 8845])
                            ("for" code nil (reparse-symbol indented_block_body) [8932 9166]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7592 7596])
                            ("name" variable nil (reparse-symbol function_parameters) [7598 7602])
                            ("bases" variable nil (reparse-symbol function_parameters) [7604 7609])
                            ("attrs" variable nil (reparse-symbol function_parameters) [7611 7616]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7579 9177]))                  
                :type "class")
                nil [7208 9177])
            ("NewId" type
               (:documentation " Pseudo-ids for new records. "
                :superclasses ("object")
                :members 
                  ( ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9260 9264]))                          )
                        (reparse-symbol indented_block_body) [9244 9288]))                  
                :type "class")
                nil [9179 9288])
            ("IdType" variable nil nil [9289 9328])
            ("PREFETCH_MAX" variable nil nil [9370 9388])
            ("LOG_ACCESS_COLUMNS" variable nil nil [9441 9518])
            ("MAGIC_COLUMNS" code nil nil [9519 9562])
            ("BaseModel" type
               (:documentation " Base class for OpenERP models.

    OpenERP models are created by inheriting from this class' subclasses:

    *   :class:`Model` for regular database-persisted models

    *   :class:`TransientModel` for temporary data, stored in the database but
        automatically vacuumed every so often

    *   :class:`AbstractModel` for abstract super classes meant to be shared by
        multiple inheriting model

    The system automatically instantiates every model once per database. Those
    instances represent the available models on each database, and depend on
    which modules are installed on that database. The actual class of each
    instance is built from the Python classes that create and inherit from the
    corresponding model.

    Every model instance is a \"recordset\", i.e., an ordered collection of
    records of the model. Recordsets are returned by methods like
    :meth:`~.browse`, :meth:`~.search`, or field accesses. Records have no
    explicit representation: a record is represented as a recordset of one
    record.

    To create a class that should not be instantiated, the _register class
    attribute may be set to False.
    "
                :superclasses ("object")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [10768 10793])
                    ("_auto" variable nil (reparse-symbol indented_block_body) [10798 10810])
                    ("_register" variable nil (reparse-symbol indented_block_body) [10841 10858])
                    ("_name" variable nil (reparse-symbol indented_block_body) [10930 10942])
                    ("_columns" variable nil (reparse-symbol indented_block_body) [10947 10960])
                    ("_constraints" variable nil (reparse-symbol indented_block_body) [10965 10982])
                    ("_custom" variable nil (reparse-symbol indented_block_body) [10987 11002])
                    ("_defaults" variable nil (reparse-symbol indented_block_body) [11007 11021])
                    ("_rec_name" variable nil (reparse-symbol indented_block_body) [11026 11042])
                    ("_parent_name" variable nil (reparse-symbol indented_block_body) [11047 11073])
                    ("_parent_store" variable nil (reparse-symbol indented_block_body) [11078 11099])
                    ("_parent_order" variable nil (reparse-symbol indented_block_body) [11104 11125])
                    ("_date_name" variable nil (reparse-symbol indented_block_body) [11130 11149])
                    ("_order" variable nil (reparse-symbol indented_block_body) [11154 11167])
                    ("_sequence" variable nil (reparse-symbol indented_block_body) [11172 11188])
                    ("_description" variable nil (reparse-symbol indented_block_body) [11193 11212])
                    ("_needaction" variable nil (reparse-symbol indented_block_body) [11217 11236])
                    ("_translate" variable nil (reparse-symbol indented_block_body) [11241 11258])
                    ("_group_by_full" variable nil (reparse-symbol indented_block_body) [11477 11496])
                    ("_transient" variable nil (reparse-symbol indented_block_body) [11519 11537])
                    ("_inherits" variable nil (reparse-symbol indented_block_body) [11631 11645])
                    ("_inherit_fields" variable nil (reparse-symbol indented_block_body) [12056 12076])
                    ("_table" variable nil (reparse-symbol indented_block_body) [12082 12095])
                    ("_log_create" variable nil (reparse-symbol indented_block_body) [12100 12119])
                    ("_sql_constraints" variable nil (reparse-symbol indented_block_body) [12124 12145])
                    ("_depends" variable nil (reparse-symbol indented_block_body) [12249 12262])
                    ("CONCURRENCY_CHECK_FIELD" variable nil (reparse-symbol indented_block_body) [12268 12309])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12323 12327])
                            ("cr" variable nil (reparse-symbol function_parameters) [12329 12331])
                            ("uid" variable nil (reparse-symbol function_parameters) [12333 12336])
                            ("id" variable nil (reparse-symbol function_parameters) [12338 12340])
                            ("message" variable nil (reparse-symbol function_parameters) [12342 12349])
                            ("secondary" variable nil (reparse-symbol function_parameters) [12351 12360])
                            ("context" variable nil (reparse-symbol function_parameters) [12368 12375]))                          )
                        (reparse-symbol indented_block_body) [12315 12515])
                    ("view_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12534 12538])
                            ("cr" variable nil (reparse-symbol function_parameters) [12540 12542])
                            ("uid" variable nil (reparse-symbol function_parameters) [12544 12547])
                            ("fields_list" variable nil (reparse-symbol function_parameters) [12549 12560])
                            ("context" variable nil (reparse-symbol function_parameters) [12562 12569]))                          
                        :documentation "Override this method to do specific things when a view on the object is opened.")
                        (reparse-symbol indented_block_body) [12520 12684])
                    ("_field_create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12707 12711])
                            ("cr" variable nil (reparse-symbol function_parameters) [12713 12715])
                            ("context" variable nil (reparse-symbol function_parameters) [12717 12724]))                          
                        :documentation " Create entries in ir_model_fields for all the model's fields.

        If necessary, also create an entry in ir_model, and if called from the
        modules loading scheme (by receiving 'module' in the context), also
        create entries in ir_model_data (for the model and the fields).

        - create an entry in ir_model (if there is not already one),
        - create an entry in ir_model_data (if there is not already one, and if
          'module' is in the context),
        - update ir_model_fields with the fields found in _columns
          (TODO there is some redundancy as _columns is updated from
          ir_model_fields in __init__).

        ")
                        (reparse-symbol indented_block_body) [12689 19135])
                    ("_add_field" function
                       (:documentation " Add the given ``field`` under the given ``name`` in the class "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19172 19175])
                            ("name" variable nil (reparse-symbol function_parameters) [19177 19181])
                            ("field" variable nil (reparse-symbol function_parameters) [19183 19188]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19140 19638])
                    ("_pop_field" function
                       (:documentation " Remove the field with the given ``name`` from the model.
            This method should only be used for manual fields.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19738 19741])
                            ("name" variable nil (reparse-symbol function_parameters) [19743 19747]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19706 20052])
                    ("_add_magic_fields" function
                       (:documentation " Introduce magic fields on the current class

        * id is a \"normal\" field (with a specific getter)
        * create_uid, create_date, write_uid and write_date have become
          \"normal\" fields
        * $CONCURRENCY_CHECK_FIELD is a computed field with its computing
          method defined dynamically. Uses ``str(datetime.datetime.utcnow())``
          to get the same structure as the previous
          ``(now() at time zone 'UTC')::timestamp``::

              # select (now() at time zone 'UTC')::timestamp;
                        timezone
              ----------------------------
               2013-06-18 08:30:37.292809

              >>> str(datetime.datetime.utcnow())
              '2013-06-18 08:31:32.821177'
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20096 20099]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20057 22125])
                    ("compute_concurrency_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22173 22177]))                          
                        :decorators 
                          ( ("api.one" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22130 22307])
                    ("" code nil (reparse-symbol indented_block_body) [22337 22366])
                    ("compute_concurrency_field_with_access" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22413 22417]))                          )
                        (reparse-symbol indented_block_body) [22371 22600])
                    ("_build_model" function
                       (:documentation " Instantiate a given model.

        This class method instantiates the class of some model (i.e. a class
        deriving from osv or osv_memory). The class might be the class passed
        in argument or, if it inherits from another class, a class constructed
        by combining the two classes.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22759 22762])
                            ("pool" variable nil (reparse-symbol function_parameters) [22764 22768])
                            ("cr" variable nil (reparse-symbol function_parameters) [22770 22772]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22725 26708])
                    ("_init_function_fields" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26756 26759])
                            ("pool" variable nil (reparse-symbol function_parameters) [26761 26765])
                            ("cr" variable nil (reparse-symbol function_parameters) [26767 26769]))                          )
                        (reparse-symbol indented_block_body) [26713 28645])
                    ("_init_manual_fields" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28691 28694])
                            ("cr" variable nil (reparse-symbol function_parameters) [28696 28698])
                            ("partial" variable nil (reparse-symbol function_parameters) [28700 28707]))                          )
                        (reparse-symbol indented_block_body) [28650 31041])
                    ("_init_constraints_onchanges" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [31095 31098]))                          )
                        (reparse-symbol indented_block_body) [31046 31260])
                    ("_constraint_methods" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31303 31307]))                          
                        :documentation " Return a list of methods implementing Python constraints. ")
                        (reparse-symbol indented_block_body) [31265 31933])
                    ("_onchange_methods" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31974 31978]))                          
                        :documentation " Return a dictionary mapping field names to onchange methods. ")
                        (reparse-symbol indented_block_body) [31938 32634])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [32651 32654]))                      ) (reparse-symbol indented_block_body) [32639 32944])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Initialize a model and make it part of the given registry.

        - copy the stored fields' functions in the registry,
        - retrieve custom fields and add them in the model,
        - ensure there is a many2one for each _inherits'd parent,
        - update the children's _columns,
        - give a chance to each field to initialize itself.

        \"\"\"" code nil (reparse-symbol indented_block_body) [32976 33341])
                            ("cls" variable nil (reparse-symbol indented_block_body) [33350 33366])
                            ("cls" variable nil (reparse-symbol indented_block_body) [33442 33457])
                            ("cls" variable nil (reparse-symbol indented_block_body) [33466 33483])
                            ("pool" code nil (reparse-symbol indented_block_body) [33530 33555])
                            ("if" code nil (reparse-symbol indented_block_body) [33629 33695])
                            ("if" code nil (reparse-symbol indented_block_body) [33703 33775])
                            ("if" code nil (reparse-symbol indented_block_body) [33783 33856])
                            ("if" code nil (reparse-symbol indented_block_body) [33864 34018])
                            ("if" code nil (reparse-symbol indented_block_body) [34048 34438]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32962 32966])
                            ("pool" variable nil (reparse-symbol function_parameters) [32968 32972])
                            ("cr" variable nil (reparse-symbol function_parameters) [32974 32976]))                          
                        :documentation " Initialize a model and make it part of the given registry.

        - copy the stored fields' functions in the registry,
        - retrieve custom fields and add them in the model,
        - ensure there is a many2one for each _inherits'd parent,
        - update the children's _columns,
        - give a chance to each field to initialize itself.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32949 34449])
                    ("" code nil (reparse-symbol indented_block_body) [34478 34480])
                    ("_is_an_ordinary_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34511 34515]))                          )
                        (reparse-symbol indented_block_body) [34485 34736])
                    ("__export_xml_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34761 34765]))                          
                        :documentation " Return a valid xml_id for the record ``self``. ")
                        (reparse-symbol indented_block_body) [34741 35908])
                    ("__export_rows" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35946 35950])
                            ("fields" variable nil (reparse-symbol function_parameters) [35952 35958]))                          
                        :documentation " Export fields of the records in ``self``.

            :param fields: list of lists of fields to traverse
            :return: list of lists of corresponding values
        ")
                        (reparse-symbol indented_block_body) [35913 38807])
                    ("export_data" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38843 38847])
                            ("fields_to_export" variable nil (reparse-symbol function_parameters) [38849 38865])
                            ("raw_data" variable nil (reparse-symbol function_parameters) [38867 38875]))                          
                        :documentation " Export fields for selected objects

            :param fields_to_export: list of fields
            :param raw_data: True to return value in native Python type
            :rtype: dictionary with a *datas* matrix

            This method is used when exporting data via client menu
        ")
                        (reparse-symbol indented_block_body) [38812 39410])
                    ("import_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39431 39435])
                            ("cr" variable nil (reparse-symbol function_parameters) [39437 39439])
                            ("uid" variable nil (reparse-symbol function_parameters) [39441 39444])
                            ("fields" variable nil (reparse-symbol function_parameters) [39446 39452])
                            ("datas" variable nil (reparse-symbol function_parameters) [39454 39459])
                            ("mode" variable nil (reparse-symbol function_parameters) [39461 39465])
                            ("current_module" variable nil (reparse-symbol function_parameters) [39474 39488])
                            ("noupdate" variable nil (reparse-symbol function_parameters) [39493 39501])
                            ("context" variable nil (reparse-symbol function_parameters) [39509 39516])
                            ("filename" variable nil (reparse-symbol function_parameters) [39523 39531]))                          
                        :documentation "
        .. deprecated:: 7.0
            Use :meth:`~load` instead

        Import given data in given module

        This method is used when importing data via client menu.

        Example of fields to import for a sale.order::

            .id,                         (=database_id)
            partner_id,                  (=name_search)
            order_line/.id,              (=database_id)
            order_line/name,
            order_line/product_id/id,    (=xml id)
            order_line/price_unit,
            order_line/product_uom_qty,
            order_line/product_uom/id    (=xml_id)

        This method returns a 4-tuple with the following structure::

            (return_code, errored_resource, error_message, unused)

        * The first item is a return code, it is ``-1`` in case of
          import error, or the last imported row number in case of success
        * The second item contains the record data dict that failed to import
          in case of error, otherwise it's 0
        * The third item contains an error message string in case of error,
          otherwise it's 0
        * The last item is currently unused, with no specific semantics

        :param fields: list of fields to import
        :param datas: data to import
        :param mode: 'init' or 'update' for record creation
        :param current_module: module name
        :param noupdate: flag for record creation
        :param filename: optional file to store partial import state for recovery
        :returns: 4-tuple in the form (return_code, errored_resource, error_message, unused)
        :rtype: (int, dict or 0, str or 0, str or 0)
        ")
                        (reparse-symbol indented_block_body) [39415 43230])
                    ("load" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43244 43248])
                            ("cr" variable nil (reparse-symbol function_parameters) [43250 43252])
                            ("uid" variable nil (reparse-symbol function_parameters) [43254 43257])
                            ("fields" variable nil (reparse-symbol function_parameters) [43259 43265])
                            ("data" variable nil (reparse-symbol function_parameters) [43267 43271])
                            ("context" variable nil (reparse-symbol function_parameters) [43273 43280]))                          
                        :documentation "
        Attempts to load the data matrix, and returns a list of ids (or
        ``False`` if there was an error and no id could be generated) and a
        list of messages.

        The ids are those of the records created and saved (in database), in
        the same order they were extracted from the file. They can be passed
        directly to :meth:`~read`

        :param fields: list of fields to import, at the same index as the corresponding data
        :type fields: list(str)
        :param data: row-major matrix of data to import
        :type data: list(list(str))
        :param dict context:
        :returns: {ids: list(int)|False, messages: [Message]}
        ")
                        (reparse-symbol indented_block_body) [43235 46677])
                    ("_add_fake_fields" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46703 46707])
                            ("cr" variable nil (reparse-symbol function_parameters) [46709 46711])
                            ("uid" variable nil (reparse-symbol function_parameters) [46713 46716])
                            ("fields" variable nil (reparse-symbol function_parameters) [46718 46724])
                            ("context" variable nil (reparse-symbol function_parameters) [46726 46733]))                          )
                        (reparse-symbol indented_block_body) [46682 46942])
                    ("_extract_records" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46968 46972])
                            ("cr" variable nil (reparse-symbol function_parameters) [46974 46976])
                            ("uid" variable nil (reparse-symbol function_parameters) [46978 46981])
                            ("fields_" variable nil (reparse-symbol function_parameters) [46983 46990])
                            ("data" variable nil (reparse-symbol function_parameters) [46992 46996])
                            ("context" variable nil (reparse-symbol function_parameters) [47023 47030])
                            ("log" variable nil (reparse-symbol function_parameters) [47037 47040]))                          
                        :documentation " Generates record dicts from the data sequence.

        The result is a generator of dicts mapping field names to raw
        (unconverted, unvalidated) values.

        For relational fields, if sub-fields were provided the value will be
        a list of sub-records

        The following sub-fields may be set on the record (by key):
        * None is the name_get for the record (to use with name_create/name_search)
        * \"id\" is the External ID for the record
        * \".id\" is the Database ID for the record
        ")
                        (reparse-symbol indented_block_body) [46947 50541])
                    ("_convert_records" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50571 50575])
                            ("cr" variable nil (reparse-symbol function_parameters) [50577 50579])
                            ("uid" variable nil (reparse-symbol function_parameters) [50581 50584])
                            ("records" variable nil (reparse-symbol function_parameters) [50586 50593])
                            ("context" variable nil (reparse-symbol function_parameters) [50620 50627])
                            ("log" variable nil (reparse-symbol function_parameters) [50634 50637]))                          
                        :documentation " Converts records from the source iterable (recursive dicts of
        strings) into forms which can be written to the database (via
        self.create or (ir.model.data)._update)

        :returns: a list of triplets of (id, xid, record)
        :rtype: list((int|None, str|None, dict))
        ")
                        (reparse-symbol indented_block_body) [50550 53120])
                    ("_validate_fields" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53161 53165])
                            ("field_names" variable nil (reparse-symbol function_parameters) [53167 53178]))                          
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [53125 55065])
                    ("default_get" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55101 55105])
                            ("fields_list" variable nil (reparse-symbol function_parameters) [55107 55118]))                          
                        :documentation " default_get(fields) -> default_values

        Return default values for the fields in ``fields_list``. Default
        values are determined by the context, user defaults, and the model
        itself.

        :param fields_list: a list of field names
        :return: a dictionary mapping each field name to its corresponding
            default value, if it has one.

        ")
                        (reparse-symbol indented_block_body) [55070 57190])
                    ("fields_get_keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57215 57219])
                            ("cr" variable nil (reparse-symbol function_parameters) [57221 57223])
                            ("user" variable nil (reparse-symbol function_parameters) [57225 57229])
                            ("context" variable nil (reparse-symbol function_parameters) [57231 57238]))                          )
                        (reparse-symbol indented_block_body) [57195 57517])
                    ("_rec_name_fallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57545 57549])
                            ("cr" variable nil (reparse-symbol function_parameters) [57551 57553])
                            ("uid" variable nil (reparse-symbol function_parameters) [57555 57558])
                            ("context" variable nil (reparse-symbol function_parameters) [57560 57567]))                          )
                        (reparse-symbol indented_block_body) [57522 57765])
                    ("view_header_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57885 57889])
                            ("cr" variable nil (reparse-symbol function_parameters) [57891 57893])
                            ("user" variable nil (reparse-symbol function_parameters) [57895 57899])
                            ("view_id" variable nil (reparse-symbol function_parameters) [57901 57908])
                            ("view_type" variable nil (reparse-symbol function_parameters) [57915 57924])
                            ("context" variable nil (reparse-symbol function_parameters) [57933 57940]))                          )
                        (reparse-symbol indented_block_body) [57865 57969])
                    ("user_has_groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57994 57998])
                            ("cr" variable nil (reparse-symbol function_parameters) [58000 58002])
                            ("uid" variable nil (reparse-symbol function_parameters) [58004 58007])
                            ("groups" variable nil (reparse-symbol function_parameters) [58009 58015])
                            ("context" variable nil (reparse-symbol function_parameters) [58017 58024]))                          
                        :documentation "Return true if the user is at least member of one of the groups
           in groups_str. Typically used to resolve ``groups`` attribute
           in view and model definitions.

           :param str groups: comma-separated list of fully-qualified group
                              external IDs, e.g.: ``base.group_user,base.group_system``
           :return: True if the current user is a member of one of the
                    given groups
        ")
                        (reparse-symbol indented_block_body) [57974 58644])
                    ("_get_default_form_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58676 58680])
                            ("cr" variable nil (reparse-symbol function_parameters) [58682 58684])
                            ("user" variable nil (reparse-symbol function_parameters) [58686 58690])
                            ("context" variable nil (reparse-symbol function_parameters) [58692 58699]))                          
                        :documentation " Generates a default single-line form view using all fields
        of the current model except the m2m and o2m ones.

        :param cr: database cursor
        :param int user: user id
        :param dict context: connection context
        :returns: a form view as an lxml document
        :rtype: etree._Element
        ")
                        (reparse-symbol indented_block_body) [58649 59486])
                    ("_get_default_search_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59520 59524])
                            ("cr" variable nil (reparse-symbol function_parameters) [59526 59528])
                            ("user" variable nil (reparse-symbol function_parameters) [59530 59534])
                            ("context" variable nil (reparse-symbol function_parameters) [59536 59543]))                          
                        :documentation " Generates a single-field search view, based on _rec_name.

        :param cr: database cursor
        :param int user: user id
        :param dict context: connection context
        :returns: a tree view as an lxml document
        :rtype: etree._Element
        ")
                        (reparse-symbol indented_block_body) [59491 60005])
                    ("_get_default_tree_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60037 60041])
                            ("cr" variable nil (reparse-symbol function_parameters) [60043 60045])
                            ("user" variable nil (reparse-symbol function_parameters) [60047 60051])
                            ("context" variable nil (reparse-symbol function_parameters) [60053 60060]))                          
                        :documentation " Generates a single-field tree view, based on _rec_name.

        :param cr: database cursor
        :param int user: user id
        :param dict context: connection context
        :returns: a tree view as an lxml document
        :rtype: etree._Element
        ")
                        (reparse-symbol indented_block_body) [60010 60518])
                    ("_get_default_calendar_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60554 60558])
                            ("cr" variable nil (reparse-symbol function_parameters) [60560 60562])
                            ("user" variable nil (reparse-symbol function_parameters) [60564 60568])
                            ("context" variable nil (reparse-symbol function_parameters) [60570 60577]))                          
                        :documentation " Generates a default calendar view by trying to infer
        calendar fields from a number of pre-set attribute names

        :param cr: database cursor
        :param int user: user id
        :param dict context: connection context
        :returns: a calendar view
        :rtype: etree._Element
        ")
                        (reparse-symbol indented_block_body) [60523 62680])
                    ("fields_view_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62705 62709])
                            ("cr" variable nil (reparse-symbol function_parameters) [62711 62713])
                            ("uid" variable nil (reparse-symbol function_parameters) [62715 62718])
                            ("view_id" variable nil (reparse-symbol function_parameters) [62720 62727])
                            ("view_type" variable nil (reparse-symbol function_parameters) [62734 62743])
                            ("context" variable nil (reparse-symbol function_parameters) [62752 62759])
                            ("toolbar" variable nil (reparse-symbol function_parameters) [62766 62773])
                            ("submenu" variable nil (reparse-symbol function_parameters) [62781 62788]))                          
                        :documentation " fields_view_get([view_id | view_type='form'])

        Get the detailed composition of the requested view like fields, model, view architecture

        :param view_id: id of the view or None
        :param view_type: type of the view to return if view_id is None ('form', 'tree', ...)
        :param toolbar: true to include contextual actions
        :param submenu: deprecated
        :return: dictionary describing the composition of the requested view (including inherited views and extensions)
        :raise AttributeError:
                            * if the inherited view has unknown position to work with other than 'before', 'after', 'inside', 'replace'
                            * if some tag other than 'position' is found in parent view
        :raise Invalid ArchitectureError: if there is view type other than form, tree, calendar, search etc defined on the structure
        ")
                        (reparse-symbol indented_block_body) [62685 68178])
                    ("get_formview_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68203 68207])
                            ("cr" variable nil (reparse-symbol function_parameters) [68209 68211])
                            ("uid" variable nil (reparse-symbol function_parameters) [68213 68216])
                            ("id" variable nil (reparse-symbol function_parameters) [68218 68220])
                            ("context" variable nil (reparse-symbol function_parameters) [68222 68229]))                          
                        :documentation " Return an view id to open the document with. This method is meant to be
            overridden in addons that want to give specific view ids for example.

            :param int id: id of the document to open
        ")
                        (reparse-symbol indented_block_body) [68183 68491])
                    ("get_formview_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68520 68524])
                            ("cr" variable nil (reparse-symbol function_parameters) [68526 68528])
                            ("uid" variable nil (reparse-symbol function_parameters) [68530 68533])
                            ("id" variable nil (reparse-symbol function_parameters) [68535 68537])
                            ("context" variable nil (reparse-symbol function_parameters) [68539 68546]))                          
                        :documentation " Return an action to open the document. This method is meant to be
            overridden in addons that want to give specific view ids for example.

            :param int id: id of the document to open
        ")
                        (reparse-symbol indented_block_body) [68496 69158])
                    ("get_access_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69185 69189])
                            ("cr" variable nil (reparse-symbol function_parameters) [69191 69193])
                            ("uid" variable nil (reparse-symbol function_parameters) [69195 69198])
                            ("id" variable nil (reparse-symbol function_parameters) [69200 69202])
                            ("context" variable nil (reparse-symbol function_parameters) [69204 69211]))                          
                        :documentation " Return an action to open the document. This method is meant to be
        overridden in addons that want to give specific access to the document.
        By default it opens the formview of the document.

        :param int id: id of the document to open
        ")
                        (reparse-symbol indented_block_body) [69163 69568])
                    ("_view_look_dom_arch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69597 69601])
                            ("cr" variable nil (reparse-symbol function_parameters) [69603 69605])
                            ("uid" variable nil (reparse-symbol function_parameters) [69607 69610])
                            ("node" variable nil (reparse-symbol function_parameters) [69612 69616])
                            ("view_id" variable nil (reparse-symbol function_parameters) [69618 69625])
                            ("context" variable nil (reparse-symbol function_parameters) [69627 69634]))                          )
                        (reparse-symbol indented_block_body) [69573 69770])
                    ("search_count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69792 69796])
                            ("cr" variable nil (reparse-symbol function_parameters) [69798 69800])
                            ("user" variable nil (reparse-symbol function_parameters) [69802 69806])
                            ("args" variable nil (reparse-symbol function_parameters) [69808 69812])
                            ("context" variable nil (reparse-symbol function_parameters) [69814 69821]))                          
                        :documentation " search_count(args) -> int

        Returns the number of records in the current model matching :ref:`the
        provided domain <reference/orm/domains>`.
        ")
                        (reparse-symbol indented_block_body) [69775 70160])
                    ("" code nil (reparse-symbol indented_block_body) [70177 70436])
                    ("search" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70452 70456])
                            ("cr" variable nil (reparse-symbol function_parameters) [70458 70460])
                            ("user" variable nil (reparse-symbol function_parameters) [70462 70466])
                            ("args" variable nil (reparse-symbol function_parameters) [70468 70472])
                            ("offset" variable nil (reparse-symbol function_parameters) [70474 70480])
                            ("limit" variable nil (reparse-symbol function_parameters) [70484 70489])
                            ("order" variable nil (reparse-symbol function_parameters) [70496 70501])
                            ("context" variable nil (reparse-symbol function_parameters) [70508 70515])
                            ("count" variable nil (reparse-symbol function_parameters) [70522 70527]))                          
                        :documentation " search(args[, offset=0][, limit=None][, order=None][, count=False])

        Searches for records based on the ``args``
        :ref:`search domain <reference/orm/domains>`.

        :param args: :ref:`A search domain <reference/orm/domains>`. Use an empty
                     list to match all records.
        :param int offset: number of results to ignore (default: none)
        :param int limit: maximum number of records to return (default: all)
        :param str order: sort string
        :param bool count: if True, only counts and returns the number of matching records (default: False)
        :returns: at most ``limit`` records matching the search criteria

        :raise AccessError: * if user tries to bypass access rules for read on the requested object.
        ")
                        (reparse-symbol indented_block_body) [70441 71449])
                    ("" code nil (reparse-symbol indented_block_body) [71534 71592])
                    ("_compute_display_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71623 71627]))                          )
                        (reparse-symbol indented_block_body) [71597 71758])
                    ("name_get" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71791 71795]))                          
                        :documentation " name_get() -> [(id, name), ...]

        Returns a textual representation for the records in ``self``.
        By default this is the value of the ``display_name`` field.

        :return: list of pairs ``(id, text_repr)`` for each records
        :rtype: list(tuple)
        ")
                        (reparse-symbol indented_block_body) [71763 72493])
                    ("name_create" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72529 72533])
                            ("name" variable nil (reparse-symbol function_parameters) [72535 72539]))                          
                        :documentation " name_create(name) -> record

        Create a new record by calling :meth:`~.create` with only one value
        provided: the display name of the new record.

        The new record will be initialized with any default values
        applicable to this model, or provided through the context. The usual
        behavior of :meth:`~.create` applies.

        :param name: display name of the record to create
        :rtype: tuple
        :return: the :meth:`~.name_get` pair value of the created record
        ")
                        (reparse-symbol indented_block_body) [72498 73331])
                    ("name_search" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73367 73371])
                            ("name" variable nil (reparse-symbol function_parameters) [73373 73377])
                            ("args" variable nil (reparse-symbol function_parameters) [73382 73386])
                            ("operator" variable nil (reparse-symbol function_parameters) [73393 73401])
                            ("limit" variable nil (reparse-symbol function_parameters) [73411 73416]))                          
                        :documentation " name_search(name='', args=None, operator='ilike', limit=100) -> records

        Search for records that have a display name matching the given
        ``name`` pattern when compared with the given ``operator``, while also
        matching the optional search domain (``args``).

        This is used for example to provide suggestions based on a partial
        value for a relational field. Sometimes be seen as the inverse
        function of :meth:`~.name_get`, but it is not guaranteed to be.

        This method is equivalent to calling :meth:`~.search` with a search
        domain based on ``display_name`` and then :meth:`~.name_get` on the
        result of the search.

        :param str name: the name pattern to match
        :param list args: optional search domain (see :meth:`~.search` for
                          syntax), specifying further restrictions
        :param str operator: domain operator for matching ``name``, such as
                             ``'like'`` or ``'='``.
        :param int limit: optional max number of records to return
        :rtype: list
        :return: list of pairs ``(id, text_repr)`` for all matching records.
        ")
                        (reparse-symbol indented_block_body) [73336 74683])
                    ("_name_search" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74705 74709])
                            ("cr" variable nil (reparse-symbol function_parameters) [74711 74713])
                            ("user" variable nil (reparse-symbol function_parameters) [74715 74719])
                            ("name" variable nil (reparse-symbol function_parameters) [74721 74725])
                            ("args" variable nil (reparse-symbol function_parameters) [74730 74734])
                            ("operator" variable nil (reparse-symbol function_parameters) [74741 74749])
                            ("context" variable nil (reparse-symbol function_parameters) [74759 74766])
                            ("limit" variable nil (reparse-symbol function_parameters) [74773 74778])
                            ("name_get_uid" variable nil (reparse-symbol function_parameters) [74784 74796]))                          )
                        (reparse-symbol indented_block_body) [74688 75551])
                    ("read_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75572 75576])
                            ("cr" variable nil (reparse-symbol function_parameters) [75578 75580])
                            ("uid" variable nil (reparse-symbol function_parameters) [75582 75585])
                            ("id" variable nil (reparse-symbol function_parameters) [75587 75589])
                            ("langs" variable nil (reparse-symbol function_parameters) [75591 75596])
                            ("fields" variable nil (reparse-symbol function_parameters) [75598 75604])
                            ("context" variable nil (reparse-symbol function_parameters) [75611 75618]))                          )
                        (reparse-symbol indented_block_body) [75556 76703])
                    ("write_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76725 76729])
                            ("cr" variable nil (reparse-symbol function_parameters) [76731 76733])
                            ("uid" variable nil (reparse-symbol function_parameters) [76735 76738])
                            ("id" variable nil (reparse-symbol function_parameters) [76740 76742])
                            ("langs" variable nil (reparse-symbol function_parameters) [76744 76749])
                            ("vals" variable nil (reparse-symbol function_parameters) [76751 76755])
                            ("context" variable nil (reparse-symbol function_parameters) [76757 76764]))                          )
                        (reparse-symbol indented_block_body) [76708 77418])
                    ("_add_missing_default_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77455 77459])
                            ("cr" variable nil (reparse-symbol function_parameters) [77461 77463])
                            ("uid" variable nil (reparse-symbol function_parameters) [77465 77468])
                            ("values" variable nil (reparse-symbol function_parameters) [77470 77476])
                            ("context" variable nil (reparse-symbol function_parameters) [77478 77485]))                          )
                        (reparse-symbol indented_block_body) [77423 79230])
                    ("clear_caches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79252 79256]))                          
                        :documentation " Clear the caches

        This clears the caches associated to methods decorated with
        ``tools.ormcache`` or ``tools.ormcache_multi``.
        ")
                        (reparse-symbol indented_block_body) [79235 79590])
                    ("_read_group_fill_results" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79625 79629])
                            ("cr" variable nil (reparse-symbol function_parameters) [79631 79633])
                            ("uid" variable nil (reparse-symbol function_parameters) [79635 79638])
                            ("domain" variable nil (reparse-symbol function_parameters) [79640 79646])
                            ("groupby" variable nil (reparse-symbol function_parameters) [79648 79655])
                            ("remaining_groupbys" variable nil (reparse-symbol function_parameters) [79657 79675])
                            ("aggregated_fields" variable nil (reparse-symbol function_parameters) [79710 79727])
                            ("count_field" variable nil (reparse-symbol function_parameters) [79729 79740])
                            ("read_group_result" variable nil (reparse-symbol function_parameters) [79775 79792])
                            ("read_group_order" variable nil (reparse-symbol function_parameters) [79794 79810])
                            ("context" variable nil (reparse-symbol function_parameters) [79817 79824]))                          
                        :documentation "Helper method for filling in empty groups for all possible values of
           the field being grouped by")
                        (reparse-symbol indented_block_body) [79596 83361])
                    ("_read_group_prepare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83390 83394])
                            ("orderby" variable nil (reparse-symbol function_parameters) [83396 83403])
                            ("aggregated_fields" variable nil (reparse-symbol function_parameters) [83405 83422])
                            ("annotated_groupbys" variable nil (reparse-symbol function_parameters) [83424 83442])
                            ("query" variable nil (reparse-symbol function_parameters) [83444 83449]))                          
                        :documentation "
        Prepares the GROUP BY and ORDER BY terms for the read_group method. Adds the missing JOIN clause
        to the query if order should be computed against m2o field. 
        :param orderby: the orderby definition in the form \"%(field)s %(order)s\"
        :param aggregated_fields: list of aggregated fields in the query
        :param annotated_groupbys: list of dictionaries returned by _read_group_process_groupby
                These dictionaries contains the qualified name of each groupby
                (fully qualified SQL name for the corresponding field),
                and the (non raw) field name.
        :param osv.Query query: the query under construction
        :return: (groupby_terms, orderby_terms)
        ")
                        (reparse-symbol indented_block_body) [83366 85679])
                    ("_read_group_process_groupby" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85716 85720])
                            ("gb" variable nil (reparse-symbol function_parameters) [85722 85724])
                            ("query" variable nil (reparse-symbol function_parameters) [85726 85731])
                            ("context" variable nil (reparse-symbol function_parameters) [85733 85740]))                          
                        :documentation "
            Helper method to collect important information about groupbys: raw
            field name, type, time information, qualified name, ...
        ")
                        (reparse-symbol indented_block_body) [85684 88317])
                    ("_read_group_prepare_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88351 88355])
                            ("key" variable nil (reparse-symbol function_parameters) [88357 88360])
                            ("value" variable nil (reparse-symbol function_parameters) [88362 88367])
                            ("groupby_dict" variable nil (reparse-symbol function_parameters) [88369 88381])
                            ("context" variable nil (reparse-symbol function_parameters) [88383 88390]))                          
                        :documentation "
            Helper method to sanitize the data received by read_group. The None
            values are converted to False, and the date/datetime are formatted,
            and corrected according to the timezones.
        ")
                        (reparse-symbol indented_block_body) [88322 89138])
                    ("_read_group_get_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89170 89174])
                            ("groupby" variable nil (reparse-symbol function_parameters) [89176 89183])
                            ("value" variable nil (reparse-symbol function_parameters) [89185 89190]))                          
                        :documentation "
            Helper method to construct the domain corresponding to a groupby and 
            a given value. This is mostly relevant for date/datetime.
        ")
                        (reparse-symbol indented_block_body) [89143 90114])
                    ("_read_group_format_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90149 90153])
                            ("data" variable nil (reparse-symbol function_parameters) [90155 90159])
                            ("annotated_groupbys" variable nil (reparse-symbol function_parameters) [90161 90179])
                            ("groupby" variable nil (reparse-symbol function_parameters) [90181 90188])
                            ("groupby_dict" variable nil (reparse-symbol function_parameters) [90190 90202])
                            ("domain" variable nil (reparse-symbol function_parameters) [90204 90210])
                            ("context" variable nil (reparse-symbol function_parameters) [90212 90219]))                          
                        :documentation "
            Helper method to format the data contained in the dictionary data by 
            adding the domain corresponding to its values, the groupbys in the 
            context and by properly formatting the date/datetime values. 
        ")
                        (reparse-symbol indented_block_body) [90119 91092])
                    ("read_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91112 91116])
                            ("cr" variable nil (reparse-symbol function_parameters) [91118 91120])
                            ("uid" variable nil (reparse-symbol function_parameters) [91122 91125])
                            ("domain" variable nil (reparse-symbol function_parameters) [91127 91133])
                            ("fields" variable nil (reparse-symbol function_parameters) [91135 91141])
                            ("groupby" variable nil (reparse-symbol function_parameters) [91143 91150])
                            ("offset" variable nil (reparse-symbol function_parameters) [91152 91158])
                            ("limit" variable nil (reparse-symbol function_parameters) [91162 91167])
                            ("context" variable nil (reparse-symbol function_parameters) [91174 91181])
                            ("orderby" variable nil (reparse-symbol function_parameters) [91188 91195])
                            ("lazy" variable nil (reparse-symbol function_parameters) [91203 91207]))                          
                        :documentation "
        Get the list of records in list view grouped by the given ``groupby`` fields

        :param cr: database cursor
        :param uid: current user id
        :param domain: list specifying search criteria [['field_name', 'operator', 'value'], ...]
        :param list fields: list of fields present in the list view specified on the object
        :param list groupby: list of groupby descriptions by which the records will be grouped.  
                A groupby description is either a field (then it will be grouped by that field)
                or a string 'field:groupby_function'.  Right now, the only functions supported
                are 'day', 'week', 'month', 'quarter' or 'year', and they only make sense for 
                date/datetime fields.
        :param int offset: optional number of records to skip
        :param int limit: optional max number of records to return
        :param dict context: context arguments, like lang, time zone. 
        :param list orderby: optional ``order by`` specification, for
                             overriding the natural sort ordering of the
                             groups, see also :py:meth:`~osv.osv.osv.search`
                             (supported only for many2one fields currently)
        :param bool lazy: if true, the results are only grouped by the first groupby and the 
                remaining groupbys are put in the __context key.  If false, all the groupbys are
                done in one call.
        :return: list of dictionaries(one dictionary for each record) containing:

                    * the values of fields grouped by the fields in ``groupby`` argument
                    * __domain: list of tuples specifying the search criteria
                    * __context: dictionary with argument like ``groupby``
        :rtype: [{'field_name_1': value, ...]
        :raise AccessError: * if user has no read rights on the requested object
                            * if user tries to bypass access rules for read on the requested object
        ")
                        (reparse-symbol indented_block_body) [91097 98446])
                    ("_inherits_join_add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98474 98478])
                            ("current_model" variable nil (reparse-symbol function_parameters) [98480 98493])
                            ("parent_model_name" variable nil (reparse-symbol function_parameters) [98495 98512])
                            ("query" variable nil (reparse-symbol function_parameters) [98514 98519]))                          
                        :documentation "
        Add missing table SELECT and JOIN clause to ``query`` for reaching the parent table (no duplicates)
        :param current_model: current model object
        :param parent_model_name: name of the parent model for which the clauses should be added
        :param query: query object on which the JOIN should be added
        ")
                        (reparse-symbol indented_block_body) [98451 99179])
                    ("_inherits_join_calc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99208 99212])
                            ("alias" variable nil (reparse-symbol function_parameters) [99214 99219])
                            ("field" variable nil (reparse-symbol function_parameters) [99221 99226])
                            ("query" variable nil (reparse-symbol function_parameters) [99228 99233])
                            ("implicit" variable nil (reparse-symbol function_parameters) [99235 99243])
                            ("outer" variable nil (reparse-symbol function_parameters) [99250 99255]))                          
                        :documentation "
        Adds missing table select and join clause(s) to ``query`` for reaching
        the field coming from an '_inherits' parent table (no duplicates).

        :param alias: name of the initial SQL alias
        :param field: name of inherited field to reach
        :param query: query object on which the JOIN should be added
        :return: qualified name of field, to be used in SELECT clause
        ")
                        (reparse-symbol indented_block_body) [99184 100490])
                    ("_parent_store_compute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100521 100525])
                            ("cr" variable nil (reparse-symbol function_parameters) [100527 100529]))                          )
                        (reparse-symbol indented_block_body) [100495 101677])
                    ("_update_store" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101700 101704])
                            ("cr" variable nil (reparse-symbol function_parameters) [101706 101708])
                            ("f" variable nil (reparse-symbol function_parameters) [101710 101711])
                            ("k" variable nil (reparse-symbol function_parameters) [101713 101714]))                          )
                        (reparse-symbol indented_block_body) [101682 102598])
                    ("_check_selection_field_value" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102651 102655])
                            ("field" variable nil (reparse-symbol function_parameters) [102657 102662])
                            ("value" variable nil (reparse-symbol function_parameters) [102664 102669]))                          
                        :documentation " Check whether value is among the valid values for the given
            selection/reference field, and raise an exception if not.
        ")
                        (reparse-symbol indented_block_body) [102603 102906])
                    ("_check_removed_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102938 102942])
                            ("cr" variable nil (reparse-symbol function_parameters) [102944 102946])
                            ("log" variable nil (reparse-symbol function_parameters) [102948 102951]))                          )
                        (reparse-symbol indented_block_body) [102911 104273])
                    ("_save_constraint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104299 104303])
                            ("cr" variable nil (reparse-symbol function_parameters) [104305 104307])
                            ("constraint_name" variable nil (reparse-symbol function_parameters) [104309 104324])
                            ("type" variable nil (reparse-symbol function_parameters) [104326 104330]))                          
                        :documentation "
        Record the creation of a constraint for this model, to make it possible
        to delete it later when the module is uninstalled. Type can be either
        'f' or 'u' depending on the constraint being a foreign key or not.
        ")
                        (reparse-symbol indented_block_body) [104278 105540])
                    ("_save_relation_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105570 105574])
                            ("cr" variable nil (reparse-symbol function_parameters) [105576 105578])
                            ("relation_table" variable nil (reparse-symbol function_parameters) [105580 105594]))                          
                        :documentation "
        Record the creation of a many2many for this model, to make it possible
        to delete it later when the module is uninstalled.
        ")
                        (reparse-symbol indented_block_body) [105545 106528])
                    ("_m2o_add_foreign_key_checked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106627 106631])
                            ("source_field" variable nil (reparse-symbol function_parameters) [106633 106645])
                            ("dest_model" variable nil (reparse-symbol function_parameters) [106647 106657])
                            ("ondelete" variable nil (reparse-symbol function_parameters) [106659 106667]))                          )
                        (reparse-symbol indented_block_body) [106594 107413])
                    ("_m2o_add_foreign_key_unchecked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107522 107526])
                            ("source_table" variable nil (reparse-symbol function_parameters) [107528 107540])
                            ("source_field" variable nil (reparse-symbol function_parameters) [107542 107554])
                            ("dest_model" variable nil (reparse-symbol function_parameters) [107556 107566])
                            ("ondelete" variable nil (reparse-symbol function_parameters) [107568 107576]))                          )
                        (reparse-symbol indented_block_body) [107487 107823])
                    ("_drop_constraint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107849 107853])
                            ("cr" variable nil (reparse-symbol function_parameters) [107855 107857])
                            ("source_table" variable nil (reparse-symbol function_parameters) [107859 107871])
                            ("constraint_name" variable nil (reparse-symbol function_parameters) [107873 107888]))                          )
                        (reparse-symbol indented_block_body) [107828 107980])
                    ("_m2o_fix_foreign_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108010 108014])
                            ("cr" variable nil (reparse-symbol function_parameters) [108016 108018])
                            ("source_table" variable nil (reparse-symbol function_parameters) [108020 108032])
                            ("source_field" variable nil (reparse-symbol function_parameters) [108034 108046])
                            ("dest_model" variable nil (reparse-symbol function_parameters) [108048 108058])
                            ("ondelete" variable nil (reparse-symbol function_parameters) [108060 108068]))                          )
                        (reparse-symbol indented_block_body) [107985 110412])
                    ("_set_default_value_on_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110451 110455])
                            ("cr" variable nil (reparse-symbol function_parameters) [110457 110459])
                            ("column_name" variable nil (reparse-symbol function_parameters) [110461 110472])
                            ("context" variable nil (reparse-symbol function_parameters) [110474 110481]))                          )
                        (reparse-symbol indented_block_body) [110418 111564])
                    ("_auto_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111584 111588])
                            ("cr" variable nil (reparse-symbol function_parameters) [111590 111592])
                            ("context" variable nil (reparse-symbol function_parameters) [111594 111601]))                          
                        :documentation "

        Call _field_create and, unless _auto is False:

        - create the corresponding table in database for the model,
        - possibly add the parent columns in database,
        - possibly add the columns 'create_uid', 'create_date', 'write_uid',
          'write_date' in database if _log_access is True (the default),
        - report on database columns no more existing in _columns,
        - remove no more existing not null constraints,
        - alter existing database columns to match _columns,
        - create database tables to match _columns,
        - add database indices to match _columns,
        - save in self._foreign_keys a list a foreign keys to create (see
          _auto_end).

        ")
                        (reparse-symbol indented_block_body) [111569 129157])
                    ("_auto_end" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129176 129180])
                            ("cr" variable nil (reparse-symbol function_parameters) [129182 129184])
                            ("context" variable nil (reparse-symbol function_parameters) [129186 129193]))                          
                        :documentation " Create the foreign keys recorded by _auto_init. ")
                        (reparse-symbol indented_block_body) [129162 129538])
                    ("_table_exist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129561 129565])
                            ("cr" variable nil (reparse-symbol function_parameters) [129567 129569]))                          )
                        (reparse-symbol indented_block_body) [129544 129708])
                    ("_create_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129732 129736])
                            ("cr" variable nil (reparse-symbol function_parameters) [129738 129740]))                          )
                        (reparse-symbol indented_block_body) [129714 129987])
                    ("_parent_columns_exist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130019 130023])
                            ("cr" variable nil (reparse-symbol function_parameters) [130025 130027]))                          )
                        (reparse-symbol indented_block_body) [129993 130256])
                    ("_create_parent_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130289 130293])
                            ("cr" variable nil (reparse-symbol function_parameters) [130295 130297]))                          )
                        (reparse-symbol indented_block_body) [130262 131834])
                    ("_select_column_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131864 131868])
                            ("cr" variable nil (reparse-symbol function_parameters) [131870 131872]))                          )
                        (reparse-symbol indented_block_body) [131840 132577])
                    ("_o2m_raise_on_missing_reference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132619 132623])
                            ("cr" variable nil (reparse-symbol function_parameters) [132625 132627])
                            ("f" variable nil (reparse-symbol function_parameters) [132629 132630]))                          )
                        (reparse-symbol indented_block_body) [132583 133092])
                    ("_m2m_raise_or_create_relation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133131 133135])
                            ("cr" variable nil (reparse-symbol function_parameters) [133137 133139])
                            ("f" variable nil (reparse-symbol function_parameters) [133141 133142]))                          
                        :documentation " Create the table for the relation if necessary.
        Return ``True`` if the relation had to be created.
        ")
                        (reparse-symbol indented_block_body) [133097 135216])
                    ("_add_sql_constraints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135247 135251])
                            ("cr" variable nil (reparse-symbol function_parameters) [135253 135255]))                          
                        :documentation "

        Modify this model's database table constraints so they match the one in
        _sql_constraints.

        ")
                        (reparse-symbol indented_block_body) [135222 138228])
                    ("_execute_sql" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138251 138255])
                            ("cr" variable nil (reparse-symbol function_parameters) [138257 138259]))                          
                        :documentation " Execute the SQL code from the _sql attribute (if any).")
                        (reparse-symbol indented_block_body) [138234 138563])
                    ("_init_inherited_fields" function
                       (:documentation " Determine inherited fields. "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [138698 138701]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [138654 139688])
                    ("_inherits_reload" function
                       (:documentation " Recompute the _inherit_fields mapping. "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [139731 139734]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [139693 140278])
                    ("_all_columns" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140314 140318]))                          
                        :documentation " Returns a dict mapping all fields names (self fields and inherited
        field via _inherits) to a ``column_info`` object giving detailed column
        information. This property is deprecated, use ``_fields`` instead.
        ")
                        (reparse-symbol indented_block_body) [140283 140958])
                    ("_inherits_check" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [141000 141003]))                          )
                        (reparse-symbol indented_block_body) [140963 142467])
                    ("_prepare_setup" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142506 142510]))                          
                        :documentation " Prepare the setup of the model. ")
                        (reparse-symbol indented_block_body) [142472 142600])
                    ("_setup_base" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142636 142640])
                            ("partial" variable nil (reparse-symbol function_parameters) [142642 142649]))                          
                        :documentation " Determine the inherited and custom fields of the model. ")
                        (reparse-symbol indented_block_body) [142605 143659])
                    ("_setup_fields" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143697 143701]))                          
                        :documentation " Setup the fields, except for recomputation triggers. ")
                        (reparse-symbol indented_block_body) [143664 144487])
                    ("_setup_complete" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144527 144531]))                          
                        :documentation " Setup recomputation triggers, and complete the model setup. ")
                        (reparse-symbol indented_block_body) [144492 146051])
                    ("fields_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146071 146075])
                            ("cr" variable nil (reparse-symbol function_parameters) [146077 146079])
                            ("user" variable nil (reparse-symbol function_parameters) [146081 146085])
                            ("allfields" variable nil (reparse-symbol function_parameters) [146087 146096])
                            ("context" variable nil (reparse-symbol function_parameters) [146103 146110])
                            ("write_access" variable nil (reparse-symbol function_parameters) [146117 146129])
                            ("attributes" variable nil (reparse-symbol function_parameters) [146136 146146]))                          
                        :documentation " fields_get([fields][, attributes])

        Return the definition of each field.

        The returned value is a dictionary (indiced by field name) of
        dictionaries. The _inherits'd fields are included. The string, help,
        and selection (if present) attributes are translated.

        :param allfields: list of fields to document, all if empty or not provided
        :param attributes: list of description attributes to return for each field, all if empty or not provided
        ")
                        (reparse-symbol indented_block_body) [146056 147564])
                    ("get_empty_list_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147593 147597])
                            ("cr" variable nil (reparse-symbol function_parameters) [147599 147601])
                            ("user" variable nil (reparse-symbol function_parameters) [147603 147607])
                            ("help" variable nil (reparse-symbol function_parameters) [147609 147613])
                            ("context" variable nil (reparse-symbol function_parameters) [147615 147622]))                          
                        :documentation " Generic method giving the help message displayed when having
            no result to display in a list or kanban view. By default it returns
            the help given in parameter that is generally the help message
            defined in the action.
        ")
                        (reparse-symbol indented_block_body) [147569 147926])
                    ("check_field_access_rights" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147961 147965])
                            ("cr" variable nil (reparse-symbol function_parameters) [147967 147969])
                            ("user" variable nil (reparse-symbol function_parameters) [147971 147975])
                            ("operation" variable nil (reparse-symbol function_parameters) [147977 147986])
                            ("fields" variable nil (reparse-symbol function_parameters) [147988 147994])
                            ("context" variable nil (reparse-symbol function_parameters) [147996 148003]))                          
                        :documentation "
        Check the user access rights on the given fields. This raises Access
        Denied if the user does not have the rights. Otherwise it returns the
        fields (as is if the fields is not falsy, or the readable/writable
        fields if fields is falsy).
        ")
                        (reparse-symbol indented_block_body) [147931 149399])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149479 149483])
                            ("cr" variable nil (reparse-symbol function_parameters) [149485 149487])
                            ("user" variable nil (reparse-symbol function_parameters) [149489 149493])
                            ("ids" variable nil (reparse-symbol function_parameters) [149495 149498])
                            ("fields" variable nil (reparse-symbol function_parameters) [149500 149506])
                            ("context" variable nil (reparse-symbol function_parameters) [149513 149520])
                            ("load" variable nil (reparse-symbol function_parameters) [149527 149531]))                          
                        :decorators 
                          ( ("api.v7" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [149458 149745])
                    ("_prefetch_field" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151989 151993])
                            ("field" variable nil (reparse-symbol function_parameters) [151995 152000]))                          
                        :documentation " Read from the database in order to fetch ``field`` (:class:`Field`
            instance) for ``self`` in cache.
        ")
                        (reparse-symbol indented_block_body) [151954 154480])
                    ("_read_from_database" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154524 154528])
                            ("field_names" variable nil (reparse-symbol function_parameters) [154530 154541])
                            ("inherited_field_names" variable nil (reparse-symbol function_parameters) [154543 154564]))                          
                        :documentation " Read the given fields of the records in ``self`` from the database,
            and store them in cache. Access errors are also stored in cache.

            :param field_names: list of column names of model ``self``; all those
                fields are guaranteed to be read
            :param inherited_field_names: list of column names from parent
                models; some of those fields may not be read
        ")
                        (reparse-symbol indented_block_body) [154485 161788])
                    ("get_metadata" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161825 161829]))                          
                        :documentation "
        Returns some metadata about the given records.

        :return: list of ownership dictionaries for each requested record
        :rtype: list of dictionaries with the following keys:

                    * id: object id
                    * create_uid: user who created the record
                    * create_date: date when the record was created
                    * write_uid: last user who changed the record
                    * write_date: date of the last change to the record
                    * xmlid: XML ID to use to refer to this record (if there is one), in format ``module.name``
                    * noupdate: A boolean telling if the record will be updated or not
        ")
                        (reparse-symbol indented_block_body) [161793 163723])
                    ("_check_concurrency" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163751 163755])
                            ("cr" variable nil (reparse-symbol function_parameters) [163757 163759])
                            ("ids" variable nil (reparse-symbol function_parameters) [163761 163764])
                            ("context" variable nil (reparse-symbol function_parameters) [163766 163773]))                          )
                        (reparse-symbol indented_block_body) [163728 164863])
                    ("_check_record_rules_result_count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164905 164909])
                            ("cr" variable nil (reparse-symbol function_parameters) [164911 164913])
                            ("uid" variable nil (reparse-symbol function_parameters) [164915 164918])
                            ("ids" variable nil (reparse-symbol function_parameters) [164920 164923])
                            ("result_ids" variable nil (reparse-symbol function_parameters) [164925 164935])
                            ("operation" variable nil (reparse-symbol function_parameters) [164937 164946])
                            ("context" variable nil (reparse-symbol function_parameters) [164948 164955]))                          
                        :documentation "Verify the returned rows after applying record rules matches
           the length of ``ids``, and raise an appropriate exception if it does not.
        ")
                        (reparse-symbol indented_block_body) [164868 167057])
                    ("check_access_rights" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167087 167091])
                            ("cr" variable nil (reparse-symbol function_parameters) [167093 167095])
                            ("uid" variable nil (reparse-symbol function_parameters) [167097 167100])
                            ("operation" variable nil (reparse-symbol function_parameters) [167102 167111])
                            ("raise_exception" variable nil (reparse-symbol function_parameters) [167113 167128]))                          
                        :documentation "Verifies that the operation given by ``operation`` is allowed for the user
           according to the access rights.")
                        (reparse-symbol indented_block_body) [167063 167396])
                    ("check_access_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167423 167427])
                            ("cr" variable nil (reparse-symbol function_parameters) [167429 167431])
                            ("uid" variable nil (reparse-symbol function_parameters) [167433 167436])
                            ("ids" variable nil (reparse-symbol function_parameters) [167438 167441])
                            ("operation" variable nil (reparse-symbol function_parameters) [167443 167452])
                            ("context" variable nil (reparse-symbol function_parameters) [167454 167461]))                          
                        :documentation "Verifies that the operation given by ``operation`` is allowed for the user
           according to ir.rules.

           :param operation: one of ``write``, ``unlink``
           :raise except_orm: * if current ir.rules do not permit this operation.
           :return: None if the operation is allowed
        ")
                        (reparse-symbol indented_block_body) [167401 169727])
                    ("create_workflow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [169752 169756])
                            ("cr" variable nil (reparse-symbol function_parameters) [169758 169760])
                            ("uid" variable nil (reparse-symbol function_parameters) [169762 169765])
                            ("ids" variable nil (reparse-symbol function_parameters) [169767 169770])
                            ("context" variable nil (reparse-symbol function_parameters) [169772 169779]))                          
                        :documentation "Create a workflow instance for each given record IDs.")
                        (reparse-symbol indented_block_body) [169732 170060])
                    ("delete_workflow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170085 170089])
                            ("cr" variable nil (reparse-symbol function_parameters) [170091 170093])
                            ("uid" variable nil (reparse-symbol function_parameters) [170095 170098])
                            ("ids" variable nil (reparse-symbol function_parameters) [170100 170103])
                            ("context" variable nil (reparse-symbol function_parameters) [170105 170112]))                          
                        :documentation "Delete the workflow instances bound to the given record IDs.")
                        (reparse-symbol indented_block_body) [170065 170396])
                    ("step_workflow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170419 170423])
                            ("cr" variable nil (reparse-symbol function_parameters) [170425 170427])
                            ("uid" variable nil (reparse-symbol function_parameters) [170429 170432])
                            ("ids" variable nil (reparse-symbol function_parameters) [170434 170437])
                            ("context" variable nil (reparse-symbol function_parameters) [170439 170446]))                          
                        :documentation "Reevaluate the workflow instances of the given record IDs.")
                        (reparse-symbol indented_block_body) [170401 170731])
                    ("signal_workflow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170756 170760])
                            ("cr" variable nil (reparse-symbol function_parameters) [170762 170764])
                            ("uid" variable nil (reparse-symbol function_parameters) [170766 170769])
                            ("ids" variable nil (reparse-symbol function_parameters) [170771 170774])
                            ("signal" variable nil (reparse-symbol function_parameters) [170776 170782])
                            ("context" variable nil (reparse-symbol function_parameters) [170784 170791]))                          
                        :documentation "Send given workflow signal and return a dict mapping ids to workflow results")
                        (reparse-symbol indented_block_body) [170736 171144])
                    ("redirect_workflow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171171 171175])
                            ("cr" variable nil (reparse-symbol function_parameters) [171177 171179])
                            ("uid" variable nil (reparse-symbol function_parameters) [171181 171184])
                            ("old_new_ids" variable nil (reparse-symbol function_parameters) [171186 171197])
                            ("context" variable nil (reparse-symbol function_parameters) [171199 171206]))                          
                        :documentation " Rebind the workflow instance bound to the given 'old' record IDs to
            the given 'new' IDs. (``old_new_ids`` is a list of pairs ``(old, new)``.
        ")
                        (reparse-symbol indented_block_body) [171149 171618])
                    ("unlink" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171634 171638])
                            ("cr" variable nil (reparse-symbol function_parameters) [171640 171642])
                            ("uid" variable nil (reparse-symbol function_parameters) [171644 171647])
                            ("ids" variable nil (reparse-symbol function_parameters) [171649 171652])
                            ("context" variable nil (reparse-symbol function_parameters) [171654 171661]))                          
                        :documentation " unlink()

        Deletes the records of the current set

        :raise AccessError: * if user has no unlink rights on the requested object
                            * if user tries to bypass access rules for unlink on the requested object
        :raise UserError: if the record is default property for other records

        ")
                        (reparse-symbol indented_block_body) [171623 176202])
                    ("write" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176265 176269])
                            ("vals" variable nil (reparse-symbol function_parameters) [176271 176275]))                          
                        :documentation " write(vals)

        Updates all records in the current set with the provided values.

        :param dict vals: fields to update and the value to set on them e.g::

                {'foo': 1, 'bar': \"Qux\"}

            will set the field ``foo`` to ``1`` and the field ``bar`` to
            ``\"Qux\"`` if those are valid (otherwise it will trigger an error).

        :raise AccessError: * if user has no write rights on the requested object
                            * if user tries to bypass access rules for write on the requested object
        :raise ValidateError: if user tries to enter invalid value for a field that is not in selection
        :raise UserError: if a loop would be created in a hierarchy of objects a result of the operation (such as setting an object as its own parent)

        * For numeric fields (:class:`~openerp.fields.Integer`,
          :class:`~openerp.fields.Float`) the value should be of the
          corresponding type
        * For :class:`~openerp.fields.Boolean`, the value should be a
          :class:`python:bool`
        * For :class:`~openerp.fields.Selection`, the value should match the
          selection values (generally :class:`python:str`, sometimes
          :class:`python:int`)
        * For :class:`~openerp.fields.Many2one`, the value should be the
          database identifier of the record to set
        * Other non-relational fields use a string for value

          .. danger::

              for historical and compatibility reasons,
              :class:`~openerp.fields.Date` and
              :class:`~openerp.fields.Datetime` fields use strings as values
              (written and read) rather than :class:`~python:datetime.date` or
              :class:`~python:datetime.datetime`. These date strings are
              UTC-only and formatted according to
              :const:`openerp.tools.misc.DEFAULT_SERVER_DATE_FORMAT` and
              :const:`openerp.tools.misc.DEFAULT_SERVER_DATETIME_FORMAT`
        * .. _openerp/models/relationals/format:

          :class:`~openerp.fields.One2many` and
          :class:`~openerp.fields.Many2many` use a special \"commands\" format to
          manipulate the set of records stored in/associated with the field.

          This format is a list of triplets executed sequentially, where each
          triplet is a command to execute on the set of records. Not all
          commands apply in all situations. Possible commands are:

          ``(0, _, values)``
              adds a new record created from the provided ``value`` dict.
          ``(1, id, values)``
              updates an existing record of id ``id`` with the values in
              ``values``. Can not be used in :meth:`~.create`.
          ``(2, id, _)``
              removes the record of id ``id`` from the set, then deletes it
              (from the database). Can not be used in :meth:`~.create`.
          ``(3, id, _)``
              removes the record of id ``id`` from the set, but does not
              delete it. Can not be used on
              :class:`~openerp.fields.One2many`. Can not be used in
              :meth:`~.create`.
          ``(4, id, _)``
              adds an existing record of id ``id`` to the set. Can not be
              used on :class:`~openerp.fields.One2many`.
          ``(5, _, _)``
              removes all records from the set, equivalent to using the
              command ``3`` on every record explicitly. Can not be used on
              :class:`~openerp.fields.One2many`. Can not be used in
              :meth:`~.create`.
          ``(6, _, ids)``
              replaces all existing records in the set by the ``ids`` list,
              equivalent to using the command ``5`` followed by a command
              ``4`` for each ``id`` in ``ids``. Can not be used on
              :class:`~openerp.fields.One2many`.

          .. note:: Values marked as ``_`` in the list above are ignored and
                    can be anything, generally ``0`` or ``False``.
        ")
                        (reparse-symbol indented_block_body) [176240 181647])
                    ("_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [181663 181667])
                            ("cr" variable nil (reparse-symbol function_parameters) [181669 181671])
                            ("user" variable nil (reparse-symbol function_parameters) [181673 181677])
                            ("ids" variable nil (reparse-symbol function_parameters) [181679 181682])
                            ("vals" variable nil (reparse-symbol function_parameters) [181684 181688])
                            ("context" variable nil (reparse-symbol function_parameters) [181690 181697]))                          )
                        (reparse-symbol indented_block_body) [181652 194033])
                    ("" code nil (reparse-symbol indented_block_body) [194117 194149])
                    ("create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [194165 194169])
                            ("vals" variable nil (reparse-symbol function_parameters) [194171 194175]))                          
                        :documentation " create(vals) -> record

        Creates a new record for the model.

        The new record is initialized using the values from ``vals`` and
        if necessary those from :meth:`~.default_get`.

        :param dict vals:
            values for the model's fields, as a dictionary::

                {'field_name': field_value, ...}

            see :meth:`~.write` for details
        :return: new record created
        :raise AccessError: * if user has no create rights on the requested object
                            * if user tries to bypass access rules for create on the requested object
        :raise ValidateError: if user tries to enter invalid value for a field that is not in selection
        :raise UserError: if a loop would be created in a hierarchy of objects a result of the operation (such as setting an object as its own parent)
        ")
                        (reparse-symbol indented_block_body) [194154 196482])
                    ("_create" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [196499 196503])
                            ("cr" variable nil (reparse-symbol function_parameters) [196505 196507])
                            ("user" variable nil (reparse-symbol function_parameters) [196509 196513])
                            ("vals" variable nil (reparse-symbol function_parameters) [196515 196519])
                            ("context" variable nil (reparse-symbol function_parameters) [196521 196528]))                          )
                        (reparse-symbol indented_block_body) [196487 206626])
                    ("_store_get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [206653 206657])
                            ("cr" variable nil (reparse-symbol function_parameters) [206659 206661])
                            ("uid" variable nil (reparse-symbol function_parameters) [206663 206666])
                            ("ids" variable nil (reparse-symbol function_parameters) [206668 206671])
                            ("fields" variable nil (reparse-symbol function_parameters) [206673 206679])
                            ("context" variable nil (reparse-symbol function_parameters) [206681 206688]))                          
                        :documentation "Returns an ordered list of fields.function to call due to
           an update operation on ``fields`` of records with ``ids``,
           obtained by calling the 'store' triggers of these fields,
           as setup by their 'store' attribute.

           :return: [(priority, model_name, [record_ids,], [function_fields,])]
        ")
                        (reparse-symbol indented_block_body) [206631 209729])
                    ("_store_set_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [209756 209760])
                            ("cr" variable nil (reparse-symbol function_parameters) [209762 209764])
                            ("uid" variable nil (reparse-symbol function_parameters) [209766 209769])
                            ("ids" variable nil (reparse-symbol function_parameters) [209771 209774])
                            ("fields" variable nil (reparse-symbol function_parameters) [209776 209782])
                            ("context" variable nil (reparse-symbol function_parameters) [209784 209791]))                          
                        :documentation "Calls the fields.function's \"implementation function\" for all ``fields``, on records with ``ids`` (taking care of
           respecting ``multi`` attributes), and stores the resulting values in the database directly.")
                        (reparse-symbol indented_block_body) [209734 213886])
                    ("_where_calc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [213939 213943])
                            ("cr" variable nil (reparse-symbol function_parameters) [213945 213947])
                            ("user" variable nil (reparse-symbol function_parameters) [213949 213953])
                            ("domain" variable nil (reparse-symbol function_parameters) [213955 213961])
                            ("active_test" variable nil (reparse-symbol function_parameters) [213963 213974])
                            ("context" variable nil (reparse-symbol function_parameters) [213981 213988]))                          
                        :documentation "Computes the WHERE clause needed to implement an OpenERP domain.
        :param domain: the domain to compute
        :type domain: list
        :param active_test: whether the default filtering of records with ``active``
                            field set to ``False`` should be applied.
        :return: the query expressing the given domain as provided in domain
        :rtype: osv.query.Query
        ")
                        (reparse-symbol indented_block_body) [213923 215440])
                    ("_check_qorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [215463 215467])
                            ("word" variable nil (reparse-symbol function_parameters) [215469 215473]))                          )
                        (reparse-symbol indented_block_body) [215445 215745])
                    ("_apply_ir_rules" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [215770 215774])
                            ("cr" variable nil (reparse-symbol function_parameters) [215776 215778])
                            ("uid" variable nil (reparse-symbol function_parameters) [215780 215783])
                            ("query" variable nil (reparse-symbol function_parameters) [215785 215790])
                            ("mode" variable nil (reparse-symbol function_parameters) [215792 215796])
                            ("context" variable nil (reparse-symbol function_parameters) [215805 215812]))                          
                        :documentation "Add what's missing in ``query`` to implement all appropriate ir.rules
          (using the ``model_name``'s rules or the current model's rules if ``model_name`` is None)

           :param query: the current query object
        ")
                        (reparse-symbol indented_block_body) [215750 218735])
                    ("_generate_m2o_order_by" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [218767 218771])
                            ("alias" variable nil (reparse-symbol function_parameters) [218773 218778])
                            ("order_field" variable nil (reparse-symbol function_parameters) [218780 218791])
                            ("query" variable nil (reparse-symbol function_parameters) [218793 218798])
                            ("reverse_direction" variable nil (reparse-symbol function_parameters) [218800 218817])
                            ("seen" variable nil (reparse-symbol function_parameters) [218819 218823]))                          
                        :documentation "
        Add possibly missing JOIN to ``query`` and generate the ORDER BY clause for m2o fields,
        either native m2o fields or function/related fields that are stored, including
        intermediate JOINs for inheritance if required.

        :return: the qualified field name to use in an ORDER BY clause to sort by ``order_field``
        ")
                        (reparse-symbol indented_block_body) [218740 220943])
                    ("_generate_order_by_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [220977 220981])
                            ("alias" variable nil (reparse-symbol function_parameters) [220983 220988])
                            ("order_spec" variable nil (reparse-symbol function_parameters) [220990 221000])
                            ("query" variable nil (reparse-symbol function_parameters) [221002 221007])
                            ("reverse_direction" variable nil (reparse-symbol function_parameters) [221009 221026])
                            ("seen" variable nil (reparse-symbol function_parameters) [221034 221038]))                          )
                        (reparse-symbol indented_block_body) [220948 223821])
                    ("_generate_order_by" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [223849 223853])
                            ("order_spec" variable nil (reparse-symbol function_parameters) [223855 223865])
                            ("query" variable nil (reparse-symbol function_parameters) [223867 223872]))                          
                        :documentation "
        Attempt to construct an appropriate ORDER BY clause based on order_spec, which must be
        a comma-separated list of valid field names, optionally followed by an ASC or DESC direction.

        :raise\" except_orm in case order_spec is malformed
        ")
                        (reparse-symbol indented_block_body) [223826 224523])
                    ("_search" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [224540 224544])
                            ("cr" variable nil (reparse-symbol function_parameters) [224546 224548])
                            ("user" variable nil (reparse-symbol function_parameters) [224550 224554])
                            ("args" variable nil (reparse-symbol function_parameters) [224556 224560])
                            ("offset" variable nil (reparse-symbol function_parameters) [224562 224568])
                            ("limit" variable nil (reparse-symbol function_parameters) [224572 224577])
                            ("order" variable nil (reparse-symbol function_parameters) [224584 224589])
                            ("context" variable nil (reparse-symbol function_parameters) [224596 224603])
                            ("count" variable nil (reparse-symbol function_parameters) [224610 224615])
                            ("access_rights_uid" variable nil (reparse-symbol function_parameters) [224623 224640]))                          
                        :documentation "
        Private implementation of search() method, allowing specifying the uid to use for the access right check.
        This is useful for example when filling in the selection list for a drop-down and avoiding access rights errors,
        by specifying ``access_rights_uid=1`` to bypass access rights check, but not ir.rules!
        This is ok at the security level because this method is private and not callable through XML-RPC.

        :param access_rights_uid: optional user ID to use when checking access rights
                                  (not for ir.rules, this is only for ir.model.access)
        ")
                        (reparse-symbol indented_block_body) [224528 227103])
                    ("distinct_field_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [227287 227291])
                            ("cr" variable nil (reparse-symbol function_parameters) [227293 227295])
                            ("uid" variable nil (reparse-symbol function_parameters) [227297 227300])
                            ("field" variable nil (reparse-symbol function_parameters) [227302 227307])
                            ("value" variable nil (reparse-symbol function_parameters) [227309 227314])
                            ("args" variable nil (reparse-symbol function_parameters) [227316 227320])
                            ("offset" variable nil (reparse-symbol function_parameters) [227327 227333])
                            ("limit" variable nil (reparse-symbol function_parameters) [227337 227342]))                          )
                        (reparse-symbol indented_block_body) [227264 227670])
                    ("copy_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [227689 227693])
                            ("cr" variable nil (reparse-symbol function_parameters) [227695 227697])
                            ("uid" variable nil (reparse-symbol function_parameters) [227699 227702])
                            ("id" variable nil (reparse-symbol function_parameters) [227704 227706])
                            ("default" variable nil (reparse-symbol function_parameters) [227708 227715])
                            ("context" variable nil (reparse-symbol function_parameters) [227722 227729]))                          
                        :documentation "
        Copy given record's data with all its fields values

        :param cr: database cursor
        :param uid: current user id
        :param id: id of the record to copy
        :param default: field values to override in the original values of the copied record
        :type default: dictionary
        :param context: context arguments, like lang, time zone
        :type context: dictionary
        :return: dictionary containing all the field values
        ")
                        (reparse-symbol indented_block_body) [227675 231408])
                    ("copy_translations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [231435 231439])
                            ("cr" variable nil (reparse-symbol function_parameters) [231441 231443])
                            ("uid" variable nil (reparse-symbol function_parameters) [231445 231448])
                            ("old_id" variable nil (reparse-symbol function_parameters) [231450 231456])
                            ("new_id" variable nil (reparse-symbol function_parameters) [231458 231464])
                            ("context" variable nil (reparse-symbol function_parameters) [231466 231473]))                          )
                        (reparse-symbol indented_block_body) [231413 234771])
                    ("" code nil (reparse-symbol indented_block_body) [234788 234820])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [234834 234838])
                            ("cr" variable nil (reparse-symbol function_parameters) [234840 234842])
                            ("uid" variable nil (reparse-symbol function_parameters) [234844 234847])
                            ("id" variable nil (reparse-symbol function_parameters) [234849 234851])
                            ("default" variable nil (reparse-symbol function_parameters) [234853 234860])
                            ("context" variable nil (reparse-symbol function_parameters) [234867 234874]))                          
                        :documentation " copy(default=None)

        Duplicate record with given id updating it with default values

        :param dict default: dictionary of field values to override in the
               original values of the copied record, e.g: ``{'field_name': overridden_value, ...}``
        :returns: new record

        ")
                        (reparse-symbol indented_block_body) [234825 235486])
                    ("" code nil (reparse-symbol indented_block_body) [235518 235526])
                    ("exists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [235542 235546]))                          
                        :documentation "  exists() -> records

        Returns the subset of records in ``self`` that exist, and marks deleted
        records as such in cache. It can be used as a test on records::

            if record.exists():
                ...

        By convention, new records are returned as existing.
        ")
                        (reparse-symbol indented_block_body) [235531 236517])
                    ("check_recursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [236542 236546])
                            ("cr" variable nil (reparse-symbol function_parameters) [236548 236550])
                            ("uid" variable nil (reparse-symbol function_parameters) [236552 236555])
                            ("ids" variable nil (reparse-symbol function_parameters) [236557 236560])
                            ("context" variable nil (reparse-symbol function_parameters) [236562 236569])
                            ("parent" variable nil (reparse-symbol function_parameters) [236576 236582]))                          )
                        (reparse-symbol indented_block_body) [236522 237017])
                    ("_check_recursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [237043 237047])
                            ("cr" variable nil (reparse-symbol function_parameters) [237049 237051])
                            ("uid" variable nil (reparse-symbol function_parameters) [237053 237056])
                            ("ids" variable nil (reparse-symbol function_parameters) [237058 237061])
                            ("context" variable nil (reparse-symbol function_parameters) [237063 237070])
                            ("parent" variable nil (reparse-symbol function_parameters) [237077 237083]))                          
                        :documentation "
        Verifies that there is no loop in a hierarchical structure of records,
        by following the parent relationship using the **parent** field until a loop
        is detected or until a top-level record is found.

        :param cr: database cursor
        :param uid: current user id
        :param ids: list of ids of records to check
        :param parent: optional parent field name (default: ``self._parent_name = parent_id``)
        :return: **True** if the operation can proceed safely, or **False** if an infinite loop is detected.
        ")
                        (reparse-symbol indented_block_body) [237022 238209])
                    ("_check_m2m_recursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [238239 238243])
                            ("cr" variable nil (reparse-symbol function_parameters) [238245 238247])
                            ("uid" variable nil (reparse-symbol function_parameters) [238249 238252])
                            ("ids" variable nil (reparse-symbol function_parameters) [238254 238257])
                            ("field_name" variable nil (reparse-symbol function_parameters) [238259 238269]))                          
                        :documentation "
        Verifies that there is no loop in a hierarchical structure of records,
        by following the parent relationship using the **parent** field until a loop
        is detected or until a top-level record is found.

        :param cr: database cursor
        :param uid: current user id
        :param ids: list of ids of records to check
        :param field_name: field to check
        :return: **True** if the operation can proceed safely, or **False** if an infinite loop is detected.
        ")
                        (reparse-symbol indented_block_body) [238214 239744])
                    ("_get_external_ids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [239771 239775])
                            ("cr" variable nil (reparse-symbol function_parameters) [239777 239779])
                            ("uid" variable nil (reparse-symbol function_parameters) [239781 239784])
                            ("ids" variable nil (reparse-symbol function_parameters) [239786 239789])
                            ("args" variable nil (reparse-symbol function_parameters) [239791 239796])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [239798 239806]))                          
                        :documentation "Retrieve the External ID(s) of any database record.

        **Synopsis**: ``_get_xml_ids(cr, uid, ids) -> { 'id': ['module.xml_id'] }``

        :return: map of ids to the list of their fully qualified External IDs
                 in the form ``module.key``, or an empty list when there's no External
                 ID for a record, e.g.::

                     { 'id': ['module.ext_id', 'module.ext_id_bis'],
                       'id2': [] }
        ")
                        (reparse-symbol indented_block_body) [239749 240803])
                    ("get_external_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [240828 240832])
                            ("cr" variable nil (reparse-symbol function_parameters) [240834 240836])
                            ("uid" variable nil (reparse-symbol function_parameters) [240838 240841])
                            ("ids" variable nil (reparse-symbol function_parameters) [240843 240846])
                            ("args" variable nil (reparse-symbol function_parameters) [240848 240853])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [240855 240863]))                          
                        :documentation "Retrieve the External ID of any database record, if there
        is one. This method works as a possible implementation
        for a function field, to be able to add it to any
        model object easily, referencing it as ``Model.get_external_id``.

        When multiple External IDs exist for a record, only one
        of them is returned (randomly).

        :return: map of ids to their fully qualified XML ID,
                 defaulting to an empty string when there's none
                 (to be usable as a function field),
                 e.g.::

                     { 'id': 'module.ext_id',
                       'id2': '' }
        ")
                        (reparse-symbol indented_block_body) [240808 241758])
                    ("get_xml_id" variable nil (reparse-symbol indented_block_body) [241793 241821])
                    ("_get_xml_ids" variable nil (reparse-symbol indented_block_body) [241826 241858])
                    ("print_report" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [241881 241885])
                            ("cr" variable nil (reparse-symbol function_parameters) [241887 241889])
                            ("uid" variable nil (reparse-symbol function_parameters) [241891 241894])
                            ("ids" variable nil (reparse-symbol function_parameters) [241896 241899])
                            ("name" variable nil (reparse-symbol function_parameters) [241901 241905])
                            ("data" variable nil (reparse-symbol function_parameters) [241907 241911])
                            ("context" variable nil (reparse-symbol function_parameters) [241913 241920]))                          
                        :documentation "
        Render the report ``name`` for the given IDs. The report must be defined
        for this model, not another.
        ")
                        (reparse-symbol indented_block_body) [241864 242247])
                    ("is_transient" function
                       (:documentation " Return whether the model is transient.

        See :class:`TransientModel`.

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [242303 242306]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [242269 242441])
                    ("_transient_clean_rows_older_than" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [242483 242487])
                            ("cr" variable nil (reparse-symbol function_parameters) [242489 242491])
                            ("seconds" variable nil (reparse-symbol function_parameters) [242493 242500]))                          )
                        (reparse-symbol indented_block_body) [242446 243036])
                    ("_transient_clean_old_rows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [243071 243075])
                            ("cr" variable nil (reparse-symbol function_parameters) [243077 243079])
                            ("max_count" variable nil (reparse-symbol function_parameters) [243081 243090]))                          )
                        (reparse-symbol indented_block_body) [243041 243386])
                    ("_transient_vacuum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [243413 243417])
                            ("cr" variable nil (reparse-symbol function_parameters) [243419 243421])
                            ("uid" variable nil (reparse-symbol function_parameters) [243423 243426])
                            ("force" variable nil (reparse-symbol function_parameters) [243428 243433]))                          
                        :documentation "Clean the transient records.

        This unlinks old records from the transient model tables whenever the
        \"_transient_max_count\" or \"_max_age\" conditions (if any) are reached.
        Actual cleaning will happen only once every \"_transient_check_time\" calls.
        This means this method can be called frequently called (e.g. whenever
        a new record is created).
        Example with both max_hours and max_count active:
        Suppose max_hours = 0.2 (e.g. 12 minutes), max_count = 20, there are 55 rows in the
        table, 10 created/changed in the last 5 minutes, an additional 12 created/changed between
        5 and 10 minutes ago, the rest created/changed more then 12 minutes ago.
        - age based vacuum will leave the 22 rows created/changed in the last 12 minutes
        - count based vacuum will wipe out another 12 rows. Not just 2, otherwise each addition
          would immediately cause the maximum to be reached again.
        - the 10 rows that have been created/changed the last 5 minutes will NOT be deleted
        ")
                        (reparse-symbol indented_block_body) [243391 245244])
                    ("resolve_2many_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [245276 245280])
                            ("cr" variable nil (reparse-symbol function_parameters) [245282 245284])
                            ("uid" variable nil (reparse-symbol function_parameters) [245286 245289])
                            ("field_name" variable nil (reparse-symbol function_parameters) [245291 245301])
                            ("commands" variable nil (reparse-symbol function_parameters) [245303 245311])
                            ("fields" variable nil (reparse-symbol function_parameters) [245313 245319])
                            ("context" variable nil (reparse-symbol function_parameters) [245326 245333]))                          
                        :documentation " Serializes one2many and many2many commands into record dictionaries
            (as if all the records came from the database via a read()).  This
            method is aimed at onchange methods on one2many and many2many fields.

            Because commands might be creation commands, not all record dicts
            will contain an ``id`` field.  Commands matching an existing record
            will have an ``id``.

            :param field_name: name of the one2many or many2many field matching the commands
            :type field_name: str
            :param commands: one2many or many2many commands to execute on ``field_name``
            :type commands: list((int|False, int|False, dict|False))
            :param fields: list of fields to read from the database, when applicable
            :type fields: list(str)
            :returns: records in a shape similar to that returned by ``read()``
                (except records may be missing the ``id`` field if they don't exist in db)
            :rtype: list(dict)
        ")
                        (reparse-symbol indented_block_body) [245249 247642])
                    ("resolve_o2m_commands_to_record_dicts" variable nil (reparse-symbol indented_block_body) [247680 247741])
                    ("search_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [247763 247767])
                            ("cr" variable nil (reparse-symbol function_parameters) [247769 247771])
                            ("uid" variable nil (reparse-symbol function_parameters) [247773 247776])
                            ("domain" variable nil (reparse-symbol function_parameters) [247778 247784])
                            ("fields" variable nil (reparse-symbol function_parameters) [247791 247797])
                            ("offset" variable nil (reparse-symbol function_parameters) [247804 247810])
                            ("limit" variable nil (reparse-symbol function_parameters) [247814 247819])
                            ("order" variable nil (reparse-symbol function_parameters) [247826 247831])
                            ("context" variable nil (reparse-symbol function_parameters) [247838 247845]))                          
                        :documentation "
        Performs a ``search()`` followed by a ``read()``.

        :param cr: database cursor
        :param user: current user id
        :param domain: Search domain, see ``args`` parameter in ``search()``. Defaults to an empty domain that will match all records.
        :param fields: List of fields to read, see ``fields`` parameter in ``read()``. Defaults to all fields.
        :param offset: Number of records to skip, see ``offset`` parameter in ``search()``. Defaults to 0.
        :param limit: Maximum number of records to return, see ``limit`` parameter in ``search()``. Defaults to no limit.
        :param order: Columns to sort result, see ``order`` parameter in ``search()``. Defaults to no sort.
        :param context: context arguments.
        :return: List of dictionaries containing the asked fields.
        :rtype: List of dictionaries.

        ")
                        (reparse-symbol indented_block_body) [247747 250267])
                    ("_register_hook" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [250291 250295])
                            ("cr" variable nil (reparse-symbol function_parameters) [250297 250299]))                          
                        :documentation " stuff to do right after the registry is built ")
                        (reparse-symbol indented_block_body) [250272 250377])
                    ("_patch_method" function
                       (:documentation " Monkey-patch a method for all instances of this model. This replaces
            the method called ``name`` by ``method`` in the given class.
            The original method is then accessible via ``method.origin``, and it
            can be restored with :meth:`~._revert_method`.

            Example::

                @api.multi
                def do_write(self, values):
                    # do stuff, and call the original method
                    return do_write.origin(self, values)

                # patch method write of model
                model._patch_method('write', do_write)

                # this will call do_write
                records = model.search([...])
                records.write(...)

                # restore the original method
                model._revert_method('write')
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [250417 250420])
                            ("name" variable nil (reparse-symbol function_parameters) [250422 250426])
                            ("method" variable nil (reparse-symbol function_parameters) [250428 250434]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [250382 251547])
                    ("_revert_method" function
                       (:documentation " Revert the original method called ``name`` in the given class.
            See :meth:`~._patch_method`.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [251588 251591])
                            ("name" variable nil (reparse-symbol function_parameters) [251593 251597]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [251552 251806])
                    ("_browse" function
                       (:documentation " Create an instance attached to ``env``; ``ids`` is a tuple of record
            ids.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [252427 252430])
                            ("env" variable nil (reparse-symbol function_parameters) [252432 252435])
                            ("ids" variable nil (reparse-symbol function_parameters) [252437 252440]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [252398 252711])
                    ("browse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [252739 252743])
                            ("cr" variable nil (reparse-symbol function_parameters) [252745 252747])
                            ("uid" variable nil (reparse-symbol function_parameters) [252749 252752])
                            ("arg" variable nil (reparse-symbol function_parameters) [252754 252757])
                            ("context" variable nil (reparse-symbol function_parameters) [252764 252771]))                          
                        :decorators 
                          ( ("api.v7" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [252716 252975])
                    ("browse" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.v8" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [253003 253007])
                            ("arg" variable nil (reparse-symbol function_parameters) [253009 253012]))                          
                        :documentation " browse([ids]) -> records

        Returns a recordset for the ids provided as parameter in the current
        environment.

        Can take no ids, a single id or a sequence of ids.
        ")
                        (reparse-symbol indented_block_body) [252980 253397])
                    ("ids" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [253511 253515]))                          
                        :documentation " List of actual record ids in this recordset (ignores placeholder
        ids for records to create)
        ")
                        (reparse-symbol indented_block_body) [253489 253687])
                    ("_cr" variable nil (reparse-symbol indented_block_body) [253748 253788])
                    ("_uid" variable nil (reparse-symbol indented_block_body) [253793 253835])
                    ("_context" variable nil (reparse-symbol indented_block_body) [253840 253890])
                    ("ensure_one" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [253949 253953]))                          
                        :documentation " Verifies that the current recorset holds a single record. Raises
        an exception otherwise.
        ")
                        (reparse-symbol indented_block_body) [253934 254200])
                    ("with_env" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [254218 254222])
                            ("env" variable nil (reparse-symbol function_parameters) [254224 254227]))                          
                        :documentation " Returns a new version of this recordset attached to the provided
        environment

        .. warning::
            The new environment will not benefit from the current
            environment's data cache, so later data access may incur extra
            delays while re-fetching from the database.

        :type env: :class:`~openerp.api.Environment`
        ")
                        (reparse-symbol indented_block_body) [254205 254656])
                    ("sudo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [254670 254674])
                            ("user" variable nil (reparse-symbol function_parameters) [254676 254680]))                          
                        :documentation " sudo([user=SUPERUSER])

        Returns a new version of this recordset attached to the provided
        user.

        By default this returns a `SUPERUSER` recordset, where access control
        and record rules are bypassed.

        .. note::
            Using `sudo` could cause data access to cross the boundaries of
            record rules, possibly mixing records that are meant to be
            isolated (e.g. records from different companies in multi-company
            environments).

            It may lead to un-intuitive results in methods which select one
            record among many - for example getting the default company, or
            selecting a Bill of Materials.

        .. note::
            Because the record rules and access control will have to be
            re-evaluated, the new recordset will not benefit from the current
            environment's data cache, so later data access may incur extra
            delays while re-fetching from the database.
        ")
                        (reparse-symbol indented_block_body) [254661 255765])
                    ("with_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [255787 255791])
                            ("args" variable nil (reparse-symbol function_parameters) [255793 255798])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [255800 255808]))                          
                        :documentation " with_context([context][, **overrides]) -> records

        Returns a new version of this recordset attached to an extended
        context.

        The extended context is either the provided ``context`` in which
        ``overrides`` are merged or the *current* context in which
        ``overrides`` are merged e.g.::

            # current context is {'key1': True}
            r2 = records.with_context({}, key2=True)
            # -> r2._context is {'key2': True}
            r2 = records.with_context(key2=True)
            # -> r2._context is {'key1': True, 'key2': True}
        ")
                        (reparse-symbol indented_block_body) [255770 256540])
                    ("_convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [256567 256571])
                            ("values" variable nil (reparse-symbol function_parameters) [256573 256579])
                            ("update" variable nil (reparse-symbol function_parameters) [256581 256587])
                            ("validate" variable nil (reparse-symbol function_parameters) [256595 256603]))                          
                        :documentation " Convert the ``values`` dictionary into cached values.

            :param update: whether the conversion is made for updating ``self``;
                this is necessary for interpreting the commands of *2many fields
            :param validate: whether values must be checked
        ")
                        (reparse-symbol indented_block_body) [256545 257182])
                    ("_convert_to_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [257209 257213])
                            ("values" variable nil (reparse-symbol function_parameters) [257215 257221]))                          
                        :documentation " Convert the ``values`` dictionary into the format of :meth:`write`. ")
                        (reparse-symbol indented_block_body) [257187 257609])
                    ("_mapped_func" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [257678 257682])
                            ("func" variable nil (reparse-symbol function_parameters) [257684 257688]))                          
                        :documentation " Apply function ``func`` on all records in ``self``, and return the
            result as a list or a recordset (if ``func`` returns recordsets).
        ")
                        (reparse-symbol indented_block_body) [257661 258278])
                    ("mapped" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [258294 258298])
                            ("func" variable nil (reparse-symbol function_parameters) [258300 258304]))                          
                        :documentation " Apply ``func`` on all records in ``self``, and return the result as a
            list or a recordset (if ``func`` return recordsets). In the latter
            case, the order of the returned recordset is arbitrary.

            :param func: a function or a dot-separated sequence of field names
        ")
                        (reparse-symbol indented_block_body) [258283 258883])
                    ("_mapped_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [258906 258910])
                            ("name_seq" variable nil (reparse-symbol function_parameters) [258912 258920]))                          
                        :documentation " Same as `~.mapped`, but ``name_seq`` is a dot-separated sequence of
            field names, and only cached values are used.
        ")
                        (reparse-symbol indented_block_body) [258888 259305])
                    ("filtered" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [259323 259327])
                            ("func" variable nil (reparse-symbol function_parameters) [259329 259333]))                          
                        :documentation " Select the records in ``self`` such that ``func(rec)`` is true, and
            return them as a recordset.

            :param func: a function or a dot-separated sequence of field names
        ")
                        (reparse-symbol indented_block_body) [259310 259741])
                    ("sorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [259757 259761])
                            ("key" variable nil (reparse-symbol function_parameters) [259763 259766])
                            ("reverse" variable nil (reparse-symbol function_parameters) [259773 259780]))                          
                        :documentation " Return the recordset ``self`` ordered by ``key``.

            :param key: either a function of one argument that returns a
                comparison key for each record, or ``None``, in which case
                records are ordered according the default model's order

            :param reverse: if ``True``, return the result in reverse order
        ")
                        (reparse-symbol indented_block_body) [259746 260423])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [260439 260443])
                            ("values" variable nil (reparse-symbol function_parameters) [260445 260451]))                          
                        :documentation " Update record `self[0]` with ``values``. ")
                        (reparse-symbol indented_block_body) [260428 260589])
                    ("new" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [260749 260753])
                            ("values" variable nil (reparse-symbol function_parameters) [260755 260761]))                          
                        :documentation " new([values]) -> record

        Return a new record instance attached to the current environment and
        initialized with the provided ``value``. The record is *not* created
        in database, it only exists in memory.
        ")
                        (reparse-symbol indented_block_body) [260726 261627])
                    ("_is_dirty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261725 261729]))                          
                        :documentation " Return whether any record in ``self`` is dirty. ")
                        (reparse-symbol indented_block_body) [261711 261882])
                    ("_get_dirty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261902 261906]))                          
                        :documentation " Return the list of field names for which ``self`` is dirty. ")
                        (reparse-symbol indented_block_body) [261887 262057])
                    ("_set_dirty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262077 262081])
                            ("field_name" variable nil (reparse-symbol function_parameters) [262083 262093]))                          
                        :documentation " Mark the records in ``self`` as dirty for the given ``field_name``. ")
                        (reparse-symbol indented_block_body) [262062 262281])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262338 262342]))                          
                        :documentation " Test whether ``self`` is nonempty. ")
                        (reparse-symbol indented_block_body) [262322 262445])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262462 262466]))                          
                        :documentation " Return the size of ``self``. ")
                        (reparse-symbol indented_block_body) [262450 262544])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262562 262566]))                          
                        :documentation " Return an iterator over ``self``. ")
                        (reparse-symbol indented_block_body) [262549 262696])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [262718 262722])
                            ("item" variable nil (reparse-symbol function_parameters) [262724 262728]))                          
                        :documentation " Test whether ``item`` (record or field name) is an element of ``self``.
            In the first case, the test is fully equivalent to::

                any(item == record for record in self)
        ")
                        (reparse-symbol indented_block_body) [262701 263270])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [263287 263291])
                            ("other" variable nil (reparse-symbol function_parameters) [263293 263298]))                          
                        :documentation " Return the concatenation of two recordsets. ")
                        (reparse-symbol indented_block_body) [263275 263583])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [263600 263604])
                            ("other" variable nil (reparse-symbol function_parameters) [263606 263611]))                          
                        :documentation " Return the recordset of all the records in ``self`` that are not in ``other``. ")
                        (reparse-symbol indented_block_body) [263588 263992])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264009 264013])
                            ("other" variable nil (reparse-symbol function_parameters) [264015 264020]))                          
                        :documentation " Return the intersection of two recordsets.
            Note that recordset order is not preserved.
        ")
                        (reparse-symbol indented_block_body) [263997 264378])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264394 264398])
                            ("other" variable nil (reparse-symbol function_parameters) [264400 264405]))                          
                        :documentation " Return the union of two recordsets.
            Note that recordset order is not preserved.
        ")
                        (reparse-symbol indented_block_body) [264383 264756])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [264772 264776])
                            ("other" variable nil (reparse-symbol function_parameters) [264778 264783]))                          
                        :documentation " Test whether two recordsets are equivalent (up to reordering). ")
                        (reparse-symbol indented_block_body) [264761 265250])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265266 265270])
                            ("other" variable nil (reparse-symbol function_parameters) [265272 265277]))                          )
                        (reparse-symbol indented_block_body) [265255 265313])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265329 265333])
                            ("other" variable nil (reparse-symbol function_parameters) [265335 265340]))                          )
                        (reparse-symbol indented_block_body) [265318 265562])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265578 265582])
                            ("other" variable nil (reparse-symbol function_parameters) [265584 265589]))                          )
                        (reparse-symbol indented_block_body) [265567 265813])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [265829 265833])
                            ("other" variable nil (reparse-symbol function_parameters) [265835 265840]))                          )
                        (reparse-symbol indented_block_body) [265818 266062])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266078 266082])
                            ("other" variable nil (reparse-symbol function_parameters) [266084 266089]))                          )
                        (reparse-symbol indented_block_body) [266067 266313])
                    ("__int__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266330 266334]))                          )
                        (reparse-symbol indented_block_body) [266318 266360])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266377 266381]))                          )
                        (reparse-symbol indented_block_body) [266365 266448])
                    ("__unicode__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266469 266473]))                          )
                        (reparse-symbol indented_block_body) [266453 266510])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [266515 266533])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266552 266556]))                          )
                        (reparse-symbol indented_block_body) [266539 266703])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [266724 266728])
                            ("key" variable nil (reparse-symbol function_parameters) [266730 266733]))                          
                        :documentation " If ``key`` is an integer or a slice, return the corresponding record
            selection as an instance (attached to ``self.env``).
            Otherwise read the field ``key`` of the first record in ``self``.

            Examples::

                inst = model.search(dom)    # inst is a recordset
                r4 = inst[3]                # fourth record in inst
                rs = inst[10:20]            # subset of inst
                nm = rs['name']             # name of first record in inst
        ")
                        (reparse-symbol indented_block_body) [266708 267598])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [267619 267623])
                            ("key" variable nil (reparse-symbol function_parameters) [267625 267628])
                            ("value" variable nil (reparse-symbol function_parameters) [267630 267635]))                          
                        :documentation " Assign the field ``key`` to ``value`` in record ``self``. ")
                        (reparse-symbol indented_block_body) [267603 267820])
                    ("_cache" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [267909 267913]))                          
                        :documentation " Return the cache of ``self``, mapping field names to values. ")
                        (reparse-symbol indented_block_body) [267879 268026])
                    ("_in_cache_without" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268068 268072])
                            ("field" variable nil (reparse-symbol function_parameters) [268074 268079]))                          
                        :documentation " Make sure ``self`` is present in cache (for prefetching), and return
            the records of model ``self`` in cache that have no value for ``field``
            (:class:`Field` instance).
        ")
                        (reparse-symbol indented_block_body) [268031 268505])
                    ("refresh" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268537 268541]))                          
                        :documentation " Clear the records cache.

            .. deprecated:: 8.0
                The record cache is automatically invalidated.
        ")
                        (reparse-symbol indented_block_body) [268510 268721])
                    ("invalidate_cache" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [268762 268766])
                            ("fnames" variable nil (reparse-symbol function_parameters) [268768 268774])
                            ("ids" variable nil (reparse-symbol function_parameters) [268781 268784]))                          
                        :documentation " Invalidate the record caches after some records have been modified.
            If both ``fnames`` and ``ids`` are ``None``, the whole cache is cleared.

            :param fnames: the list of modified fields, or ``None`` for all fields
            :param ids: the list of modified record ids, or ``None`` for all
        ")
                        (reparse-symbol indented_block_body) [268726 269558])
                    ("modified" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [269591 269595])
                            ("fnames" variable nil (reparse-symbol function_parameters) [269597 269603]))                          
                        :documentation " Notify that fields have been modified on ``self``. This invalidates
            the cache, and prepares the recomputation of stored function fields
            (new-style fields only).

            :param fnames: iterable of field names that have been modified on
                records ``self``
        ")
                        (reparse-symbol indented_block_body) [269563 270432])
                    ("_recompute_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [270458 270462])
                            ("field" variable nil (reparse-symbol function_parameters) [270464 270469]))                          
                        :documentation " If ``field`` must be recomputed on some record in ``self``, return the
            corresponding records that must be recomputed.
        ")
                        (reparse-symbol indented_block_body) [270437 270674])
                    ("_recompute_todo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [270699 270703])
                            ("field" variable nil (reparse-symbol function_parameters) [270705 270710]))                          
                        :documentation " Mark ``field`` to be recomputed. ")
                        (reparse-symbol indented_block_body) [270679 270801])
                    ("_recompute_done" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [270826 270830])
                            ("field" variable nil (reparse-symbol function_parameters) [270832 270837]))                          
                        :documentation " Mark ``field`` as recomputed. ")
                        (reparse-symbol indented_block_body) [270806 270928])
                    ("recompute" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [270962 270966]))                          
                        :documentation " Recompute stored function fields. The fields and records to
            recompute have been determined by method :meth:`modified`.
        ")
                        (reparse-symbol indented_block_body) [270933 271884])
                    ("_has_onchange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [271950 271954])
                            ("field" variable nil (reparse-symbol function_parameters) [271956 271961])
                            ("other_fields" variable nil (reparse-symbol function_parameters) [271963 271975]))                          
                        :documentation " Return whether ``field`` should trigger an onchange event in the
            presence of ``other_fields``.
        ")
                        (reparse-symbol indented_block_body) [271932 272357])
                    ("_onchange_spec" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.model" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [272396 272400])
                            ("view_info" variable nil (reparse-symbol function_parameters) [272402 272411]))                          
                        :documentation " Return the onchange spec from a view description; if not given, the
            result of ``self.fields_view_get()`` is used.
        ")
                        (reparse-symbol indented_block_body) [272362 273448])
                    ("_onchange_eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [273472 273476])
                            ("field_name" variable nil (reparse-symbol function_parameters) [273478 273488])
                            ("onchange" variable nil (reparse-symbol function_parameters) [273490 273498])
                            ("result" variable nil (reparse-symbol function_parameters) [273500 273506]))                          
                        :documentation " Apply onchange method(s) for field ``field_name`` with spec ``onchange``
            on record ``self``. Value assignments are applied on ``self``, while
            domain and warning messages are put in dictionary ``result``.
        ")
                        (reparse-symbol indented_block_body) [273453 277351])
                    ("onchange" function
                       (:parent "dummy"
                        :decorators 
                          ( ("api.multi" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [277383 277387])
                            ("values" variable nil (reparse-symbol function_parameters) [277389 277395])
                            ("field_name" variable nil (reparse-symbol function_parameters) [277397 277407])
                            ("field_onchange" variable nil (reparse-symbol function_parameters) [277409 277423]))                          
                        :documentation " Perform an onchange on the given field.

            :param values: dictionary mapping field names to values, giving the
                current state of modification
            :param field_name: name of the modified field, or list of field
                names (in view order), or False
            :param field_onchange: dictionary mapping field names to their
                on_change attribute
        ")
                        (reparse-symbol indented_block_body) [277355 282562]))                  
                :type "class")
                nil [9564 282562])
            ("RecordCache" type
               (:documentation " Implements a proxy dictionary to read/update the cache of a record.
        Upon iteration, it looks like a dictionary mapping field names to
        values. However, fields may be used as keys as well.
    "
                :superclasses ("MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [282622 282642]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282835 282839])
                            ("records" variable nil (reparse-symbol function_parameters) [282841 282848]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [282822 282880])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282898 282902])
                            ("field" variable nil (reparse-symbol function_parameters) [282904 282909]))                          
                        :documentation " Return whether `records[0]` has a value for ``field`` in cache. ")
                        (reparse-symbol indented_block_body) [282885 283140])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283162 283166])
                            ("field" variable nil (reparse-symbol function_parameters) [283168 283173]))                          
                        :documentation " Return whether `records[0]` has a regular value for ``field`` in cache. ")
                        (reparse-symbol indented_block_body) [283145 283508])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283529 283533])
                            ("field" variable nil (reparse-symbol function_parameters) [283535 283540]))                          
                        :documentation " Return the cached value of ``field`` for `records[0]`. ")
                        (reparse-symbol indented_block_body) [283513 283834])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283855 283859])
                            ("field" variable nil (reparse-symbol function_parameters) [283861 283866])
                            ("value" variable nil (reparse-symbol function_parameters) [283868 283873]))                          
                        :documentation " Assign the cached value of ``field`` for all records in ``records``. ")
                        (reparse-symbol indented_block_body) [283839 284155])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [284171 284175])
                            ("args" variable nil (reparse-symbol function_parameters) [284177 284182])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [284184 284192]))                          
                        :documentation " Update the cache of all records in ``records``. If the argument is a
            ``SpecialValue``, update all fields (except \"magic\" columns).
        ")
                        (reparse-symbol indented_block_body) [284160 284719])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [284740 284744])
                            ("field" variable nil (reparse-symbol function_parameters) [284746 284751]))                          
                        :documentation " Remove the cached value of ``field`` for all ``records``. ")
                        (reparse-symbol indented_block_body) [284724 285039])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [285057 285061]))                          
                        :documentation " Iterate over the field names with a regular value in cache. ")
                        (reparse-symbol indented_block_body) [285044 285408])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [285425 285429]))                          
                        :documentation " Return the number of fields with a regular value in cache. ")
                        (reparse-symbol indented_block_body) [285413 285546]))                  
                :type "class")
                nil [282564 285546])
            ("Model" type
               (:documentation "Main super-class for regular database-persisted OpenERP models.

    OpenERP models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    "
                :superclasses ("BaseModel")
                :members 
                  ( ("_auto" variable nil (reparse-symbol indented_block_body) [285876 285888])
                    ("_register" variable nil (reparse-symbol indented_block_body) [285893 285910])
                    ("_transient" variable nil (reparse-symbol indented_block_body) [285980 285998]))                  
                :type "class")
                nil [285547 286026])
            ("TransientModel" type
               (:documentation "Model super-class for transient records, meant to be temporarily
       persisted, and regularly vacuum-cleaned.

       A TransientModel has a simplified access rights management,
       all users can create new records, and may only access the
       records they created. The super-user has unrestricted access
       to all TransientModel records.
    "
                :superclasses ("BaseModel")
                :members 
                  ( ("_auto" variable nil (reparse-symbol indented_block_body) [286431 286443])
                    ("_register" variable nil (reparse-symbol indented_block_body) [286448 286465])
                    ("_transient" variable nil (reparse-symbol indented_block_body) [286535 286552]))                  
                :type "class")
                nil [286027 286553])
            ("AbstractModel" type
               (:documentation "Abstract Model super-class for creating an abstract class meant to be
       inherited by regular models (Models or TransientModels) but not meant to
       be usable on its own, or persisted.

       Technical note: we don't want to make AbstractModel the super-class of
       Model or BaseModel because it would not make sense to put the main
       definition of persistence methods such as create() in it, and still we
       should be able to override them within an AbstractModel.
       "
                :superclasses ("BaseModel")
                :members 
                  ( ("_auto" variable nil (reparse-symbol indented_block_body) [287096 287109])
                    ("_register" variable nil (reparse-symbol indented_block_body) [287169 287186])
                    ("_transient" variable nil (reparse-symbol indented_block_body) [287256 287274]))                  
                :type "class")
                nil [286554 287275])
            ("itemgetter_tuple" function
               (:documentation " Fixes itemgetter inconsistency (useful in some cases) of not returning
    a tuple if len(items) == 1: always returns an n-tuple where n = len(items)
    "
                :arguments 
                  ( ("items" variable nil (reparse-symbol function_parameters) [287297 287302]))                  )
                nil [287276 287640])
            ("convert_pgerror_23502" function (:arguments 
              ( ("model" variable nil (reparse-symbol function_parameters) [287667 287672])
                ("fields" variable nil (reparse-symbol function_parameters) [287674 287680])
                ("info" variable nil (reparse-symbol function_parameters) [287682 287686])
                ("e" variable nil (reparse-symbol function_parameters) [287688 287689]))              ) nil [287641 288264])
            ("convert_pgerror_23505" function (:arguments 
              ( ("model" variable nil (reparse-symbol function_parameters) [288291 288296])
                ("fields" variable nil (reparse-symbol function_parameters) [288298 288304])
                ("info" variable nil (reparse-symbol function_parameters) [288306 288310])
                ("e" variable nil (reparse-symbol function_parameters) [288312 288313]))              ) nil [288265 288913])
            ("PGERROR_TO_OE" variable nil nil [288914 289189])
            ("_normalize_ids" function
               (:documentation " Normalizes the ids argument for ``browse`` (v7 and v8) to a tuple.

    Various implementations were tested on the corpus of all browse() calls
    performed during a full crawler run (after having installed all website_*
    modules) and this one was the most efficient overall.

    A possible bit of correctness was sacrificed by not doing any test on
    Iterable and just assuming that any non-atomic type was an iterable of
    some kind.

    :rtype: tuple
    "
                :arguments 
                  ( ("arg" variable nil (reparse-symbol function_parameters) [289210 289213])
                    ("atoms" variable nil (reparse-symbol function_parameters) [289215 289220]))                  )
                nil [289191 290263])
            ("expression" include nil nil [290333 290350])
            ("Field" include nil nil [290364 290403])
            ("SpecialValue" include nil nil [290364 290403])
            ("FailedValue" include nil nil [290364 290403]))          
    :file "models.py"
    :pointmax 290234
    :fsize 290472
    :lastmodtime '(22569 63136 977938 879000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "api.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\" This module provides the elements for managing two different API styles,
    namely the \"traditional\" and \"record\" styles.

    In the \"traditional\" style, parameters like the database cursor, user id,
    context dictionary and record ids (usually denoted as ``cr``, ``uid``,
    ``context``, ``ids``) are passed explicitly to all methods. In the \"record\"
    style, those parameters are hidden into model instances, which gives it a
    more object-oriented feel.

    For instance, the statements::

        model = self.pool.get(MODEL)
        ids = model.search(cr, uid, DOMAIN, context=context)
        for rec in model.browse(cr, uid, ids, context=context):
            print rec.name
        model.write(cr, uid, ids, VALUES, context=context)

    may also be written as::

        env = Environment(cr, uid, context) # cr, uid, context wrapped in env
        model = env[MODEL]                  # retrieve an instance of MODEL
        recs = model.search(DOMAIN)         # search returns a recordset
        for rec in recs:                    # iterate over the records
            print rec.name
        recs.write(VALUES)                  # update all records in recs

    Methods written in the \"traditional\" style are automatically decorated,
    following some heuristics based on parameter names.
\"\"\"" code nil nil [986 2306])
            ("__all__" variable nil nil [2308 2579])
            ("logging" include nil nil [2581 2595])
            ("operator" include nil nil [2596 2611])
            ("inspect" include nil nil [2613 2657])
            ("collections" include nil nil [2658 2709])
            ("contextlib" include nil nil [2710 2747])
            ("pprint" include nil nil [2748 2774])
            ("weakref" include nil nil [2775 2802])
            ("werkzeug.local" include nil nil [2803 2850])
            ("openerp.tools" include nil nil [2852 2903])
            ("_logger" variable nil nil [2905 2942])
            ("WRAPPED_ATTRS" variable nil nil [3497 3634])
            ("INHERITED_ATTRS" variable nil nil [3636 3667])
            ("Meta" type
               (:documentation " Metaclass that automatically decorates traditional-style methods by
        guessing their API. It also implements the inheritance of the
        :func:`returns` decorators.
    "
                :superclasses ("type")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("meta" variable nil (reparse-symbol function_parameters) [3895 3899])
                        ("name" variable nil (reparse-symbol function_parameters) [3901 3905])
                        ("bases" variable nil (reparse-symbol function_parameters) [3907 3912])
                        ("attrs" variable nil (reparse-symbol function_parameters) [3914 3919]))                      ) (reparse-symbol indented_block_body) [3883 4623]))                  
                :type "class")
                nil [3670 4623])
            ("identity" variable nil nil [4625 4647])
            ("decorate" function
               (:documentation " Decorate ``method`` or its original method. "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [4662 4668])
                    ("attr" variable nil (reparse-symbol function_parameters) [4670 4674])
                    ("value" variable nil (reparse-symbol function_parameters) [4676 4681]))                  )
                nil [4649 5047])
            ("propagate" function
               (:documentation " Propagate decorators from ``from_method`` to ``to_method``, and return the
        resulting method.
    "
                :arguments 
                  ( ("from_method" variable nil (reparse-symbol function_parameters) [5062 5073])
                    ("to_method" variable nil (reparse-symbol function_parameters) [5075 5084]))                  )
                nil [5048 5440])
            ("constrains" function
               (:documentation " Decorates a constraint checker. Each argument must be a field name
    used in the check::

        @api.one
        @api.constrains('name', 'description')
        def _check_description(self):
            if self.name == self.description:
                raise ValidationError(\"Fields name and description must be different\")

    Invoked on the records on which one of the named fields has been modified.

    Should raise :class:`~openerp.exceptions.ValidationError` if the
    validation failed.

    .. warning::

        ``@constrains`` only supports simple field names, dotted names
        (fields of relational fields e.g. ``partner_id.customer``) are not
        supported and will be ignored
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [5457 5462]))                  )
                nil [5442 6248])
            ("onchange" function
               (:documentation " Return a decorator to decorate an onchange method for given fields.
        Each argument must be a field name::

            @api.onchange('partner_id')
            def _onchange_partner(self):
                self.message = \"Dear %s\" % (self.partner_id.name or \"\")

        In the form views where the field appears, the method will be called
        when one of the given fields is modified. The method is invoked on a
        pseudo-record that contains the values present in the form. Field
        assignments on that record are automatically sent back to the client.

        The method may return a dictionary for changing field domains and pop up
        a warning message, like in the old API::

            return {
                'domain': {'other_id': [('partner_id', '=', partner_id)]},
                'warning': {'title': \"Warning\", 'message': \"What is this?\"},
            }


        .. warning::

            ``@onchange`` only supports simple field names, dotted names
            (fields of relational fields e.g. ``partner_id.tz``) are not
            supported and will be ignored
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [6263 6268]))                  )
                nil [6250 7454])
            ("depends" function
               (:documentation " Return a decorator that specifies the field dependencies of a \"compute\"
        method (for new-style function fields). Each argument must be a string
        that consists in a dot-separated sequence of field names::

            pname = fields.Char(compute='_compute_pname')

            @api.one
            @api.depends('partner_id.name', 'partner_id.is_company')
            def _compute_pname(self):
                if self.partner_id.is_company:
                    self.pname = (self.partner_id.name or \"\").upper()
                else:
                    self.pname = self.partner_id.name

        One may also pass a single function as argument. In that case, the
        dependencies are given by calling the function with the field's model.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [7468 7473]))                  )
                nil [7456 8500])
            ("returns" function
               (:documentation " Return a decorator for methods that return instances of ``model``.

        :param model: a model name, or ``'self'`` for the current model

        :param downgrade: a function ``downgrade(self, value, *args, **kwargs)``
            to convert the record-style ``value`` to a traditional-style output

        :param upgrade: a function ``upgrade(self, value, *args, **kwargs)``
            to convert the traditional-style ``value`` to a record-style output

        The arguments ``self``, ``*args`` and ``**kwargs`` are the ones passed
        to the method in the record-style.

        The decorator adapts the method output to the api style: ``id``, ``ids`` or
        ``False`` for the traditional style, and recordset for the record style::

            @model
            @returns('res.partner')
            def find_partner(self, arg):
                ...     # return some record

            # output depends on call style: traditional vs record style
            partner_id = model.find_partner(cr, uid, arg, context=context)

            # recs = model.browse(cr, uid, ids, context)
            partner_record = recs.find_partner(arg)

        Note that the decorated method must satisfy that convention.

        Those decorators are automatically *inherited*: a method that overrides
        a decorated existing method will be decorated with the same
        ``@returns(model)``.
    "
                :arguments 
                  ( ("model" variable nil (reparse-symbol function_parameters) [8514 8519])
                    ("downgrade" variable nil (reparse-symbol function_parameters) [8521 8530])
                    ("upgrade" variable nil (reparse-symbol function_parameters) [8537 8544]))                  )
                nil [8502 10050])
            ("make_wrapper" function
               (:documentation " Return a wrapper method for ``method``. "
                :arguments 
                  ( ("decorator" variable nil (reparse-symbol function_parameters) [10069 10078])
                    ("method" variable nil (reparse-symbol function_parameters) [10080 10086])
                    ("old_api" variable nil (reparse-symbol function_parameters) [10088 10095])
                    ("new_api" variable nil (reparse-symbol function_parameters) [10097 10104]))                  )
                nil [10052 10690])
            ("get_downgrade" function
               (:documentation " Return a function `downgrade(self, value, *args, **kwargs)` that adapts
        ``value`` from record-style to traditional-style, following the
        convention of ``method``.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [10710 10716]))                  )
                nil [10692 11323])
            ("get_upgrade" function
               (:documentation " Return a function `upgrade(self, value, *args, **kwargs)` that adapts
        ``value`` from traditional-style to record-style, following the
        convention of ``method``.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [11341 11347]))                  )
                nil [11325 11938])
            ("get_aggregate" function
               (:documentation " Return a function `aggregate(self, value)` that aggregates record-style
        ``value`` for a method decorated with ``@one``.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [11958 11964]))                  )
                nil [11940 12487])
            ("get_context_split" function
               (:documentation " Return a function ``split`` that extracts the context from a pair of
        positional and keyword arguments::

            context, args, kwargs = split(args, kwargs)
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [12511 12517]))                  )
                nil [12489 12948])
            ("model" function
               (:documentation " Decorate a record-style method where ``self`` is a recordset, but its
        contents is not relevant, only the model is. Such a method::

            @api.model
            def method(self, args):
                ...

        may be called in both record and traditional styles, like::

            # recs = model.browse(cr, uid, ids, context)
            recs.method(args)

            model.method(cr, uid, args, context=context)

        Notice that no ``ids`` are passed to the method in the traditional style.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [12960 12966]))                  )
                nil [12950 13889])
            ("multi" function
               (:documentation " Decorate a record-style method where ``self`` is a recordset. The method
        typically defines an operation on records. Such a method::

            @api.multi
            def method(self, args):
                ...

        may be called in both record and traditional styles, like::

            # recs = model.browse(cr, uid, ids, context)
            recs.method(args)

            model.method(cr, uid, ids, args, context=context)
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [13901 13907]))                  )
                nil [13891 14759])
            ("one" function
               (:documentation " Decorate a record-style method where ``self`` is expected to be a
        singleton instance. The decorated method automatically loops on records,
        and makes a list with the results. In case the method is decorated with
        :func:`returns`, it concatenates the resulting instances. Such a
        method::

            @api.one
            def method(self, args):
                return self.name

        may be called in both record and traditional styles, like::

            # recs = model.browse(cr, uid, ids, context)
            names = recs.method(args)

            names = model.method(cr, uid, ids, args, context=context)

        .. deprecated:: 9.0

            :func:`~.one` often makes the code less clear and behaves in ways
            developers and readers may not expect.

            It is strongly recommended to use :func:`~.multi` and either
            iterate on the ``self`` recordset or ensure that the recordset
            is a single record with :meth:`~openerp.models.Model.ensure_one`.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [14769 14775]))                  )
                nil [14761 16399])
            ("cr" function
               (:documentation " Decorate a traditional-style method that takes ``cr`` as a parameter.
        Such a method may be called in both record and traditional styles, like::

            # recs = model.browse(cr, uid, ids, context)
            recs.method(args)

            model.method(cr, args)
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [16408 16414]))                  )
                nil [16401 16991])
            ("cr_context" function
               (:documentation " Decorate a traditional-style method that takes ``cr``, ``context`` as parameters. "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [17008 17014]))                  )
                nil [16993 17456])
            ("cr_uid" function
               (:documentation " Decorate a traditional-style method that takes ``cr``, ``uid`` as parameters. "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [17469 17475]))                  )
                nil [17458 17859])
            ("cr_uid_context" function
               (:documentation " Decorate a traditional-style method that takes ``cr``, ``uid``, ``context`` as
        parameters. Such a method may be called in both record and traditional
        styles, like::

            # recs = model.browse(cr, uid, ids, context)
            recs.method(args)

            model.method(cr, uid, args, context=context)
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [17880 17886]))                  )
                nil [17861 18586])
            ("cr_uid_id" function
               (:documentation " Decorate a traditional-style method that takes ``cr``, ``uid``, ``id`` as
        parameters. Such a method may be called in both record and traditional
        styles. In the record style, the method automatically loops on records.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [18602 18608]))                  )
                nil [18588 19179])
            ("cr_uid_id_context" function
               (:documentation " Decorate a traditional-style method that takes ``cr``, ``uid``, ``id``,
        ``context`` as parameters. Such a method::

            @api.cr_uid_id
            def method(self, cr, uid, id, args, context=None):
                ...

        may be called in both record and traditional styles, like::

            # rec = model.browse(cr, uid, id, context)
            rec.method(args)

            model.method(cr, uid, id, args, context=context)
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [19203 19209]))                  )
                nil [19181 20060])
            ("cr_uid_ids" function
               (:documentation " Decorate a traditional-style method that takes ``cr``, ``uid``, ``ids`` as
        parameters. Such a method may be called in both record and traditional
        styles.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [20077 20083]))                  )
                nil [20062 20577])
            ("cr_uid_ids_context" function
               (:documentation " Decorate a traditional-style method that takes ``cr``, ``uid``, ``ids``,
        ``context`` as parameters. Such a method::

            @api.cr_uid_ids_context
            def method(self, cr, uid, ids, args, context=None):
                ...

        may be called in both record and traditional styles, like::

            # recs = model.browse(cr, uid, ids, context)
            recs.method(args)

            model.method(cr, uid, ids, args, context=context)

        It is generally not necessary, see :func:`guess`.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [20602 20608]))                  )
                nil [20579 21519])
            ("v7" function
               (:documentation " Decorate a method that supports the old-style api only. A new-style api
        may be provided by redefining a method with the same name and decorated
        with :func:`~.v8`::

            @api.v7
            def foo(self, cr, uid, ids, context=None):
                ...

            @api.v8
            def foo(self):
                ...

        Special care must be taken if one method calls the other one, because
        the method may be overridden! In that case, one should call the method
        from the current class (say ``MyClass``), for instance::

            @api.v7
            def foo(self, cr, uid, ids, context=None):
                # Beware: records.foo() may call an overriding of foo()
                records = self.browse(cr, uid, ids, context)
                return MyClass.foo(records)

        Note that the wrapper method uses the docstring of the first method.
    "
                :arguments 
                  ( ("method_v7" variable nil (reparse-symbol function_parameters) [21528 21537]))                  )
                nil [21521 22776])
            ("v8" function
               (:documentation " Decorate a method that supports the new-style api only. An old-style api
        may be provided by redefining a method with the same name and decorated
        with :func:`~.v7`::

            @api.v8
            def foo(self):
                ...

            @api.v7
            def foo(self, cr, uid, ids, context=None):
                ...

        Note that the wrapper method uses the docstring of the first method.
    "
                :arguments 
                  ( ("method_v8" variable nil (reparse-symbol function_parameters) [22785 22794]))                  )
                nil [22778 23558])
            ("noguess" function
               (:documentation " Decorate a method to prevent any effect from :func:`guess`. "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [23572 23578]))                  )
                nil [23560 23695])
            ("guess" function
               (:documentation " Decorate ``method`` to make it callable in both traditional and record
        styles. This decorator is applied automatically by the model's
        metaclass, and has no effect on already-decorated methods.

        The API style is determined by heuristics on the parameter names: ``cr``
        or ``cursor`` for the cursor, ``uid`` or ``user`` for the user id,
        ``id`` or ``ids`` for a list of record ids, and ``context`` for the
        context dictionary. If a traditional API is recognized, one of the
        decorators :func:`cr`, :func:`cr_context`, :func:`cr_uid`,
        :func:`cr_uid_context`, :func:`cr_uid_id`, :func:`cr_uid_id_context`,
        :func:`cr_uid_ids`, :func:`cr_uid_ids_context` is applied on the method.

        Method calls are considered traditional style when their first parameter
        is a database cursor.
    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [23707 23713]))                  )
                nil [23697 25735])
            ("expected" function
               (:documentation " Decorate ``func`` with ``decorator`` if ``func`` is not wrapped yet. "
                :arguments 
                  ( ("decorator" variable nil (reparse-symbol function_parameters) [25750 25759])
                    ("func" variable nil (reparse-symbol function_parameters) [25761 25765]))                  )
                nil [25737 25915])
            ("Environment" type
               (:documentation " An environment wraps data for ORM records:

         - :attr:`cr`, the current database cursor;
         - :attr:`uid`, the current user id;
         - :attr:`context`, the current context dictionary.

        It also provides access to the registry, a cache for records, and a data
        structure to manage recomputations.
    "
                :superclasses ("object")
                :members 
                  ( ("_local" variable nil (reparse-symbol indented_block_body) [26292 26308])
                    ("envs" function
                       (:decorators 
                          ( ("classproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26342 26345]))                          )
                        (reparse-symbol indented_block_body) [26314 26387])
                    ("manage" function
                       (:documentation " Context manager for a set of environments. "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26440 26443]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil)
                            ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26392 26744])
                    ("reset" function
                       (:documentation " Clear the set of environments.
            This may be useful when recreating a registry inside a transaction.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [26776 26779]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26749 26966])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [26983 26986])
                        ("cr" variable nil (reparse-symbol function_parameters) [26988 26990])
                        ("uid" variable nil (reparse-symbol function_parameters) [26992 26995])
                        ("context" variable nil (reparse-symbol function_parameters) [26997 27004]))                      ) (reparse-symbol indented_block_body) [26971 27840])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27861 27865])
                            ("model_name" variable nil (reparse-symbol function_parameters) [27867 27877]))                          
                        :documentation " return a given model ")
                        (reparse-symbol indented_block_body) [27845 27976])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27994 27998])
                            ("cr" variable nil (reparse-symbol function_parameters) [28000 28002])
                            ("user" variable nil (reparse-symbol function_parameters) [28009 28013])
                            ("context" variable nil (reparse-symbol function_parameters) [28020 28027]))                          
                        :documentation " Return an environment based on ``self`` with modified parameters.

            :param cr: optional database cursor to change the current cursor
            :param user: optional user/user id to change the current user
            :param context: optional context dictionary to change the current context
        ")
                        (reparse-symbol indented_block_body) [27981 28568])
                    ("ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28581 28585])
                            ("xml_id" variable nil (reparse-symbol function_parameters) [28587 28593])
                            ("raise_if_not_found" variable nil (reparse-symbol function_parameters) [28595 28613]))                          
                        :documentation " return the record corresponding to the given ``xml_id`` ")
                        (reparse-symbol indented_block_body) [28573 28793])
                    ("user" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28821 28825]))                          
                        :documentation " return the current user (as an instance) ")
                        (reparse-symbol indented_block_body) [28798 28954])
                    ("lang" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28982 28986]))                          
                        :documentation " return the current language code ")
                        (reparse-symbol indented_block_body) [28959 29078])
                    ("_do_in_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29119 29123])
                            ("mode" variable nil (reparse-symbol function_parameters) [29125 29129]))                          
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29083 29360])
                    ("do_in_draft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29381 29385]))                          
                        :documentation " Context-switch to draft mode, where all field updates are done in
            cache only.
        ")
                        (reparse-symbol indented_block_body) [29365 29540])
                    ("in_draft" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29572 29576]))                          
                        :documentation " Return whether we are in draft mode. ")
                        (reparse-symbol indented_block_body) [29545 29667])
                    ("do_in_onchange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29691 29695]))                          
                        :documentation " Context-switch to 'onchange' draft mode, which is a specialized
            draft mode used during execution of onchange methods.
        ")
                        (reparse-symbol indented_block_body) [29672 29896])
                    ("in_onchange" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29931 29935]))                          
                        :documentation " Return whether we are in 'onchange' draft mode. ")
                        (reparse-symbol indented_block_body) [29901 30045])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30065 30069])
                            ("spec" variable nil (reparse-symbol function_parameters) [30071 30075]))                          
                        :documentation " Invalidate some fields for some records in the cache of all
            environments.

            :param spec: what to invalidate, a list of `(field, ids)` pair,
                where ``field`` is a field object, and ``ids`` is a list of record
                ids or ``None`` (to invalidate all records).
        ")
                        (reparse-symbol indented_block_body) [30050 30800])
                    ("invalidate_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30824 30828]))                          
                        :documentation " Clear the cache of all environments. ")
                        (reparse-symbol indented_block_body) [30805 31045])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31060 31064]))                          
                        :documentation " Clear all record caches, and discard all fields to recompute.
            This may be useful when recovering from a failed ORM operation.
        ")
                        (reparse-symbol indented_block_body) [31050 31289])
                    ("clear_upon_failure" function
                       (:parent "dummy"
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31337 31341]))                          
                        :documentation " Context manager that clears the environments (caches and fields to
            recompute) upon exception.
        ")
                        (reparse-symbol indented_block_body) [31294 31574])
                    ("field_todo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31594 31598])
                            ("field" variable nil (reparse-symbol function_parameters) [31600 31605]))                          
                        :documentation " Check whether ``field`` must be recomputed, and returns a recordset
            with all records to recompute for ``field``.
        ")
                        (reparse-symbol indented_block_body) [31579 31854])
                    ("check_todo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31874 31878])
                            ("field" variable nil (reparse-symbol function_parameters) [31880 31885])
                            ("record" variable nil (reparse-symbol function_parameters) [31887 31893]))                          
                        :documentation " Check whether ``field`` must be recomputed on ``record``, and if so,
            returns the corresponding recordset to recompute.
        ")
                        (reparse-symbol indented_block_body) [31859 32159])
                    ("add_todo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32177 32181])
                            ("field" variable nil (reparse-symbol function_parameters) [32183 32188])
                            ("records" variable nil (reparse-symbol function_parameters) [32190 32197]))                          
                        :documentation " Mark ``field`` to be recomputed on ``records``. ")
                        (reparse-symbol indented_block_body) [32164 32354])
                    ("remove_todo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32375 32379])
                            ("field" variable nil (reparse-symbol function_parameters) [32381 32386])
                            ("records" variable nil (reparse-symbol function_parameters) [32388 32395]))                          
                        :documentation " Mark ``field`` as recomputed on ``records``. ")
                        (reparse-symbol indented_block_body) [32359 32648])
                    ("has_todo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32666 32670]))                          
                        :documentation " Return whether some fields must be recomputed. ")
                        (reparse-symbol indented_block_body) [32653 32771])
                    ("get_todo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32789 32793]))                          
                        :documentation " Return a pair `(field, records)` to recompute. ")
                        (reparse-symbol indented_block_body) [32776 32957])
                    ("check_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32978 32982]))                          
                        :documentation " Check the cache consistency. ")
                        (reparse-symbol indented_block_body) [32962 34010])
                    ("recompute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34043 34047]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34015 34084])
                    ("norecompute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34125 34129]))                          
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34089 34285])
                    ("recompute_old" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34322 34326]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34290 34367])
                    ("clear_recompute_old" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34396 34400]))                          )
                        (reparse-symbol indented_block_body) [34372 34441]))                  
                :type "class")
                nil [25918 34441])
            ("Environments" type
               (:documentation " A common object for all environments in a request. "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [34566 34587])
                            ("self" variable nil (reparse-symbol indented_block_body) [34633 34647])
                            ("self" variable nil (reparse-symbol indented_block_body) [34709 34726])
                            ("self" variable nil (reparse-symbol indented_block_body) [34775 34796])
                            ("self" variable nil (reparse-symbol indented_block_body) [34805 34828]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34551 34555]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34538 34882])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34895 34899])
                            ("env" variable nil (reparse-symbol function_parameters) [34901 34904]))                          
                        :documentation " Add the environment ``env``. ")
                        (reparse-symbol indented_block_body) [34887 34979])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34997 35001]))                          
                        :documentation " Iterate over environments. ")
                        (reparse-symbol indented_block_body) [34984 35078]))                  
                :type "class")
                nil [34443 35078])
            ("openerp" include nil nil [35155 35187])
            ("openerp.exceptions" include nil nil [35188 35253])
            ("openerp.modules.registry" include nil nil [35254 35306]))          
    :file "api.py"
    :pointmax 35307
    :fsize 35306
    :lastmodtime '(22202 40076 0 0)
    :unmatched-syntax '((NAME 28468 . 28475) (IF 28491 . 28493) (ELSE 28510 . 28514) (NAME 28414 . 28417) (IF 28429 . 28431) (ELSE 28445 . 28449) (NAME 28371 . 28373) (IF 28384 . 28386) (ELSE 28398 . 28402) (RETURN 25853 . 25859) (IF 25876 . 25878) (ELSE 25905 . 25909) (COLON 11928 . 11929) (EXPONENT 11920 . 11922) (RETURN 11893 . 11899) (MULT 11913 . 11914) (COLON 11841 . 11842) (EXPONENT 11833 . 11835) (RETURN 11806 . 11812) (MULT 11826 . 11827) (COLON 11757 . 11758) (EXPONENT 11749 . 11751) (RETURN 11722 . 11728) (MULT 11742 . 11743) (COLON 11313 . 11314) (EXPONENT 11305 . 11307) (RETURN 11278 . 11284) (MULT 11298 . 11299) (COLON 11246 . 11247) (EXPONENT 11238 . 11240) (RETURN 11211 . 11217) (MULT 11231 . 11232) (COLON 11164 . 11165) (EXPONENT 11156 . 11158) (RETURN 11129 . 11135) (MULT 11149 . 11150))
    )
   (semanticdb-table "fields.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\" High-level objects for fields. \"\"\"" code nil nil [986 1024])
            ("collections" include nil nil [1026 1061])
            ("datetime" include nil nil [1062 1097])
            ("functools" include nil nil [1098 1127])
            ("operator" include nil nil [1128 1159])
            ("types" include nil nil [1160 1186])
            ("logging" include nil nil [1187 1201])
            ("pytz" include nil nil [1202 1213])
            ("xmlrpclib" include nil nil [1214 1230])
            ("openerp.sql_db" include nil nil [1232 1269])
            ("openerp.tools" include nil nil [1270 1352])
            ("openerp.tools" include nil nil [1353 1420])
            ("openerp.tools" include nil nil [1421 1496])
            ("DATE_LENGTH" variable nil nil [1498 1551])
            ("DATETIME_LENGTH" variable nil nil [1552 1615])
            ("EMPTY_DICT" variable nil nil [1616 1641])
            ("_logger" variable nil nil [1643 1680])
            ("pdb" include nil nil [1682 1692])
            ("SpecialValue" type
               (:documentation " Encapsulates a value in the cache in place of a normal value. "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1823 1841]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1813 1817])
                            ("value" variable nil (reparse-symbol function_parameters) [1819 1824]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1800 1854])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1866 1870]))                          )
                        (reparse-symbol indented_block_body) [1858 1899]))                  
                :type "class")
                nil [1694 1899])
            ("FailedValue" type
               (:documentation " Special value that encapsulates an exception instead of a value. "
                :superclasses ("SpecialValue")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2041 2067]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2027 2031])
                            ("exception" variable nil (reparse-symbol function_parameters) [2033 2042]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2014 2080])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2092 2096]))                          )
                        (reparse-symbol indented_block_body) [2084 2149]))                  
                :type "class")
                nil [1900 2149])
            ("_check_value" function
               (:documentation " Return ``value``, or call its getter if ``value`` is a :class:`SpecialValue`. "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [2167 2172]))                  )
                nil [2150 2334])
            ("copy_cache" function
               (:documentation " Recursively copy the cache of ``records`` to the environment ``env``. "
                :arguments 
                  ( ("records" variable nil (reparse-symbol function_parameters) [2350 2357])
                    ("env" variable nil (reparse-symbol function_parameters) [2359 2362]))                  )
                nil [2335 2868])
            ("resolve_all_mro" function
               (:documentation " Return the (successively overridden) values of attribute ``name`` in ``cls``
        in mro order, or inverse mro order if ``reverse`` is true.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2890 2893])
                    ("name" variable nil (reparse-symbol function_parameters) [2895 2899])
                    ("reverse" variable nil (reparse-symbol function_parameters) [2901 2908]))                  )
                nil [2870 3241])
            ("MetaField" type
               (:documentation " Metaclass for field classes. "
                :superclasses ("type")
                :members 
                  ( ("by_type" variable nil (reparse-symbol indented_block_body) [3311 3323])
                    ("__new__" function
                       (:documentation " Combine the ``_slots`` dict from parent classes, and determine
        ``__slots__`` for them on the new class.
        "
                        :arguments 
                          ( ("meta" variable nil (reparse-symbol function_parameters) [3341 3345])
                            ("name" variable nil (reparse-symbol function_parameters) [3347 3351])
                            ("bases" variable nil (reparse-symbol function_parameters) [3353 3358])
                            ("attrs" variable nil (reparse-symbol function_parameters) [3360 3365]))                          )
                        (reparse-symbol indented_block_body) [3329 3849])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3889 3939])
                            ("if" code nil (reparse-symbol indented_block_body) [3948 4045])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4122 4143])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4152 4174])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4183 4209])
                            ("for" code nil (reparse-symbol indented_block_body) [4218 4563]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3867 3870])
                            ("name" variable nil (reparse-symbol function_parameters) [3872 3876])
                            ("bases" variable nil (reparse-symbol function_parameters) [3878 3883])
                            ("attrs" variable nil (reparse-symbol function_parameters) [3885 3890]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3854 4575]))                  
                :type "class")
                nil [3243 4575])
            ("Field" type
               (:documentation " The field descriptor contains the field definition, and manages accesses
        and assignments of the corresponding field on records. The following
        attributes may be provided when instanciating a field:

        :param string: the label of the field seen by users (string); if not
            set, the ORM takes the field name in the class (capitalized).

        :param help: the tooltip of the field seen by users (string)

        :param readonly: whether the field is readonly (boolean, by default ``False``)

        :param required: whether the value of the field is required (boolean, by
            default ``False``)

        :param index: whether the field is indexed in database (boolean, by
            default ``False``)

        :param default: the default value for the field; this is either a static
            value, or a function taking a recordset and returning a value

        :param states: a dictionary mapping state values to lists of UI attribute-value
            pairs; possible attributes are: 'readonly', 'required', 'invisible'.
            Note: Any state-based condition requires the ``state`` field value to be
            available on the client-side UI. This is typically done by including it in
            the relevant views, possibly made invisible if not relevant for the
            end-user.

        :param groups: comma-separated list of group xml ids (string); this
            restricts the field access to the users of the given groups only

        :param bool copy: whether the field value should be copied when the record
            is duplicated (default: ``True`` for normal fields, ``False`` for
            ``one2many`` and computed fields, including property fields and
            related fields)

        :param string oldname: the previous name of this field, so that ORM can rename
            it automatically at migration

        .. _field-computed:

        .. rubric:: Computed fields

        One can define a field whose value is computed instead of simply being
        read from the database. The attributes that are specific to computed
        fields are given below. To define such a field, simply provide a value
        for the attribute ``compute``.

        :param compute: name of a method that computes the field

        :param inverse: name of a method that inverses the field (optional)

        :param search: name of a method that implement search on the field (optional)

        :param store: whether the field is stored in database (boolean, by
            default ``False`` on computed fields)

        :param compute_sudo: whether the field should be recomputed as superuser
            to bypass access rights (boolean, by default ``False``)

        The methods given for ``compute``, ``inverse`` and ``search`` are model
        methods. Their signature is shown in the following example::

            upper = fields.Char(compute='_compute_upper',
                                inverse='_inverse_upper',
                                search='_search_upper')

            @api.depends('name')
            def _compute_upper(self):
                for rec in self:
                    rec.upper = rec.name.upper() if rec.name else False

            def _inverse_upper(self):
                for rec in self:
                    rec.name = rec.upper.lower() if rec.upper else False

            def _search_upper(self, operator, value):
                if operator == 'like':
                    operator = 'ilike'
                return [('name', operator, value)]

        The compute method has to assign the field on all records of the invoked
        recordset. The decorator :meth:`openerp.api.depends` must be applied on
        the compute method to specify the field dependencies; those dependencies
        are used to determine when to recompute the field; recomputation is
        automatic and guarantees cache/database consistency. Note that the same
        method can be used for several fields, you simply have to assign all the
        given fields in the method; the method will be invoked once for all
        those fields.

        By default, a computed field is not stored to the database, and is
        computed on-the-fly. Adding the attribute ``store=True`` will store the
        field's values in the database. The advantage of a stored field is that
        searching on that field is done by the database itself. The disadvantage
        is that it requires database updates when the field must be recomputed.

        The inverse method, as its name says, does the inverse of the compute
        method: the invoked records have a value for the field, and you must
        apply the necessary changes on the field dependencies such that the
        computation gives the expected value. Note that a computed field without
        an inverse method is readonly by default.

        The search method is invoked when processing domains before doing an
        actual search on the model. It must return a domain equivalent to the
        condition: ``field operator value``.

        .. _field-related:

        .. rubric:: Related fields

        The value of a related field is given by following a sequence of
        relational fields and reading a field on the reached model. The complete
        sequence of fields to traverse is specified by the attribute

        :param related: sequence of field names

        Some field attributes are automatically copied from the source field if
        they are not redefined: ``string``, ``help``, ``readonly``, ``required`` (only
        if all fields in the sequence are required), ``groups``, ``digits``, ``size``,
        ``translate``, ``sanitize``, ``selection``, ``comodel_name``, ``domain``,
        ``context``. All semantic-free attributes are copied from the source
        field.

        By default, the values of related fields are not stored to the database.
        Add the attribute ``store=True`` to make it stored, just like computed
        fields. Related fields are automatically recomputed when their
        dependencies are modified.

        .. _field-company-dependent:

        .. rubric:: Company-dependent fields

        Formerly known as 'property' fields, the value of those fields depends
        on the company. In other words, users that belong to different companies
        may see different values for the field on a given record.

        :param company_dependent: whether the field is company-dependent (boolean)

        .. _field-incremental-definition:

        .. rubric:: Incremental definition

        A field is defined as class attribute on a model class. If the model
        is extended (see :class:`~openerp.models.Model`), one can also extend
        the field definition by redefining a field with the same name and same
        type on the subclass. In that case, the attributes of the field are
        taken from the parent class and overridden by the ones given in
        subclasses.

        For instance, the second class below only adds a tooltip on the field
        ``state``::

            class First(models.Model):
                _name = 'foo'
                state = fields.Selection([...], required=True)

            class Second(models.Model):
                _inherit = 'foo'
                state = fields.Selection(help=\"Blah blah blah\")

    "
                :superclasses ("object")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [12016 12041])
                    ("type" variable nil (reparse-symbol indented_block_body) [12047 12058])
                    ("relational" variable nil (reparse-symbol indented_block_body) [12116 12134])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [12197 15099])
                    ("__init__" function
                       (:suite 
                          ( ("kwargs" variable nil (reparse-symbol indented_block_body) [15144 15169])
                            ("attrs" variable nil (reparse-symbol indented_block_body) [15178 15250])
                            ("self" code nil (reparse-symbol indented_block_body) [15259 15292]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15118 15122])
                            ("string" variable nil (reparse-symbol function_parameters) [15124 15130])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [15137 15145]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15105 15305])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15326 15330])
                            ("name" variable nil (reparse-symbol function_parameters) [15332 15336]))                          
                        :documentation " Access non-slot field attribute. ")
                        (reparse-symbol indented_block_body) [15310 15502])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15523 15527])
                            ("name" variable nil (reparse-symbol function_parameters) [15529 15533])
                            ("value" variable nil (reparse-symbol function_parameters) [15535 15540]))                          
                        :documentation " Set slot or non-slot field attribute. ")
                        (reparse-symbol indented_block_body) [15507 15848])
                    ("__delattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15869 15873])
                            ("name" variable nil (reparse-symbol function_parameters) [15875 15879]))                          
                        :documentation " Remove non-slot field attribute. ")
                        (reparse-symbol indented_block_body) [15853 16042])
                    ("new" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16055 16059])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16061 16069]))                          
                        :documentation " Return a field of the same type as ``self``, with its own parameters. ")
                        (reparse-symbol indented_block_body) [16047 16194])
                    ("set_class_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16218 16222])
                            ("cls" variable nil (reparse-symbol function_parameters) [16224 16227])
                            ("name" variable nil (reparse-symbol function_parameters) [16229 16233]))                          
                        :documentation " Assign the model class and field name of ``self``. ")
                        (reparse-symbol indented_block_body) [16199 17962])
                    ("_determine_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17990 17994])
                            ("cls" variable nil (reparse-symbol function_parameters) [17996 17999])
                            ("name" variable nil (reparse-symbol function_parameters) [18001 18005]))                          
                        :documentation " Retrieve the default value for ``self`` in the hierarchy of ``cls``, and
            determine ``self.default`` and ``cls._defaults`` accordingly.
        ")
                        (reparse-symbol indented_block_body) [17967 19860])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19877 19881]))                          )
                        (reparse-symbol indented_block_body) [19865 19938])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19956 19960]))                          )
                        (reparse-symbol indented_block_body) [19943 20017])
                    ("setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20144 20148])
                            ("env" variable nil (reparse-symbol function_parameters) [20150 20153]))                          
                        :documentation " Make sure that ``self`` is set up, except for recomputation triggers. ")
                        (reparse-symbol indented_block_body) [20134 20438])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20509 20513])
                            ("env" variable nil (reparse-symbol function_parameters) [20515 20518]))                          
                        :documentation " Setup the attributes of a non-related field. ")
                        (reparse-symbol indented_block_body) [20490 21533])
                    ("_setup_related" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21600 21604])
                            ("env" variable nil (reparse-symbol function_parameters) [21606 21609]))                          
                        :documentation " Setup the attributes of a related field. ")
                        (reparse-symbol indented_block_body) [21581 23441])
                    ("_compute_related" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23467 23471])
                            ("records" variable nil (reparse-symbol function_parameters) [23473 23480]))                          
                        :documentation " Compute the related field ``self`` on ``records``. ")
                        (reparse-symbol indented_block_body) [23446 24148])
                    ("_inverse_related" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24174 24178])
                            ("records" variable nil (reparse-symbol function_parameters) [24180 24187]))                          
                        :documentation " Inverse the related field ``self`` on ``records``. ")
                        (reparse-symbol indented_block_body) [24153 24713])
                    ("_search_related" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24738 24742])
                            ("records" variable nil (reparse-symbol function_parameters) [24744 24751])
                            ("operator" variable nil (reparse-symbol function_parameters) [24753 24761])
                            ("value" variable nil (reparse-symbol function_parameters) [24763 24768]))                          
                        :documentation " Determine the domain to search on field ``self``. ")
                        (reparse-symbol indented_block_body) [24718 24896])
                    ("_related_comodel_name" variable nil (reparse-symbol indented_block_body) [24977 25037])
                    ("_related_string" variable nil (reparse-symbol indented_block_body) [25042 25090])
                    ("_related_help" variable nil (reparse-symbol indented_block_body) [25095 25139])
                    ("_related_readonly" variable nil (reparse-symbol indented_block_body) [25144 25196])
                    ("_related_groups" variable nil (reparse-symbol indented_block_body) [25201 25249])
                    ("base_field" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25284 25288]))                          
                        :documentation " Return the base field of an inherited field, or ``self``. ")
                        (reparse-symbol indented_block_body) [25255 25438])
                    ("add_trigger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25800 25804])
                            ("trigger" variable nil (reparse-symbol function_parameters) [25806 25813]))                          
                        :documentation " Add a recomputation trigger on ``self``. ")
                        (reparse-symbol indented_block_body) [25784 25956])
                    ("setup_triggers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25980 25984])
                            ("env" variable nil (reparse-symbol function_parameters) [25986 25989]))                          
                        :documentation " Add the necessary triggers to invalidate/recompute ``self``. ")
                        (reparse-symbol indented_block_body) [25961 26203])
                    ("_setup_dependency" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26230 26234])
                            ("path0" variable nil (reparse-symbol function_parameters) [26236 26241])
                            ("model" variable nil (reparse-symbol function_parameters) [26243 26248])
                            ("path1" variable nil (reparse-symbol function_parameters) [26250 26255]))                          
                        :documentation " Make ``self`` depend on ``model``; `path0 + path1` is a dependency of
            ``self``, and ``path0`` is the sequence of field names from ``self.model``
            to ``model``.
        ")
                        (reparse-symbol indented_block_body) [26208 27529])
                    ("dependents" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27563 27567]))                          
                        :documentation " Return the computed fields that depend on ``self``. ")
                        (reparse-symbol indented_block_body) [27534 27695])
                    ("get_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27838 27842])
                            ("env" variable nil (reparse-symbol function_parameters) [27844 27847]))                          
                        :documentation " Return a dictionary that describes the field ``self``. ")
                        (reparse-symbol indented_block_body) [27818 28203])
                    ("_description_store" variable nil (reparse-symbol indented_block_body) [28251 28301])
                    ("_description_manual" variable nil (reparse-symbol indented_block_body) [28306 28358])
                    ("_description_depends" variable nil (reparse-symbol indented_block_body) [28363 28417])
                    ("_description_related" variable nil (reparse-symbol indented_block_body) [28422 28476])
                    ("_description_company_dependent" variable nil (reparse-symbol indented_block_body) [28481 28555])
                    ("_description_readonly" variable nil (reparse-symbol indented_block_body) [28560 28616])
                    ("_description_required" variable nil (reparse-symbol indented_block_body) [28621 28677])
                    ("_description_states" variable nil (reparse-symbol indented_block_body) [28682 28734])
                    ("_description_groups" variable nil (reparse-symbol indented_block_body) [28739 28791])
                    ("_description_change_default" variable nil (reparse-symbol indented_block_body) [28796 28864])
                    ("_description_deprecated" variable nil (reparse-symbol indented_block_body) [28869 28929])
                    ("_description_searchable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28977 28981]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [28935 29077])
                    ("_description_sortable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29122 29126]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29082 29220])
                    ("_description_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29249 29253])
                            ("env" variable nil (reparse-symbol function_parameters) [29255 29258]))                          )
                        (reparse-symbol indented_block_body) [29225 29540])
                    ("_description_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29567 29571])
                            ("env" variable nil (reparse-symbol function_parameters) [29573 29576]))                          )
                        (reparse-symbol indented_block_body) [29545 29813])
                    ("to_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29962 29966]))                          
                        :documentation " Return a column object corresponding to ``self``, or ``None``. ")
                        (reparse-symbol indented_block_body) [29948 31118])
                    ("_column_copy" variable nil (reparse-symbol indented_block_body) [31188 31231])
                    ("_column_select" variable nil (reparse-symbol indented_block_body) [31236 31282])
                    ("_column_manual" variable nil (reparse-symbol indented_block_body) [31287 31334])
                    ("_column_string" variable nil (reparse-symbol indented_block_body) [31339 31386])
                    ("_column_help" variable nil (reparse-symbol indented_block_body) [31391 31434])
                    ("_column_readonly" variable nil (reparse-symbol indented_block_body) [31439 31490])
                    ("_column_required" variable nil (reparse-symbol indented_block_body) [31495 31546])
                    ("_column_states" variable nil (reparse-symbol indented_block_body) [31551 31598])
                    ("_column_groups" variable nil (reparse-symbol indented_block_body) [31603 31650])
                    ("_column_change_default" variable nil (reparse-symbol indented_block_body) [31655 31718])
                    ("_column_deprecated" variable nil (reparse-symbol indented_block_body) [31723 31778])
                    ("null" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31914 31918])
                            ("env" variable nil (reparse-symbol function_parameters) [31920 31923]))                          
                        :documentation " return the null value for this field in the given environment ")
                        (reparse-symbol indented_block_body) [31905 32025])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32051 32055])
                            ("value" variable nil (reparse-symbol function_parameters) [32057 32062])
                            ("record" variable nil (reparse-symbol function_parameters) [32064 32070])
                            ("validate" variable nil (reparse-symbol function_parameters) [32072 32080]))                          
                        :documentation " convert ``value`` to the cache level in ``env``; ``value`` may come from
            an assignment, or have the format of methods :meth:`BaseModel.read`
            or :meth:`BaseModel.write`

            :param record: the target record for the assignment, or an empty recordset

            :param bool validate: when True, field-specific validation of
                ``value`` will be performed
        ")
                        (reparse-symbol indented_block_body) [32030 32532])
                    ("convert_to_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32557 32561])
                            ("value" variable nil (reparse-symbol function_parameters) [32563 32568])
                            ("use_name_get" variable nil (reparse-symbol function_parameters) [32570 32582]))                          
                        :documentation " convert ``value`` from the cache to a value as returned by method
            :meth:`BaseModel.read`

            :param bool use_name_get: when True, value's diplay name will
                be computed using :meth:`BaseModel.name_get`, if relevant
                for the field
        ")
                        (reparse-symbol indented_block_body) [32537 32943])
                    ("convert_to_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32969 32973])
                            ("value" variable nil (reparse-symbol function_parameters) [32975 32980])
                            ("target" variable nil (reparse-symbol function_parameters) [32982 32988])
                            ("fnames" variable nil (reparse-symbol function_parameters) [32995 33001]))                          
                        :documentation " convert ``value`` from the cache to a valid value for method
            :meth:`BaseModel.write`.

            :param target: optional, the record to be modified with this value
            :param fnames: for relational fields only, an optional collection of
                field names to convert
        ")
                        (reparse-symbol indented_block_body) [32948 33374])
                    ("convert_to_onchange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33403 33407])
                            ("value" variable nil (reparse-symbol function_parameters) [33409 33414]))                          
                        :documentation " convert ``value`` from the cache to a valid value for an onchange
            method v7.
        ")
                        (reparse-symbol indented_block_body) [33379 33574])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33601 33605])
                            ("value" variable nil (reparse-symbol function_parameters) [33607 33612])
                            ("env" variable nil (reparse-symbol function_parameters) [33614 33617]))                          
                        :documentation " convert ``value`` from the cache to a valid value for export. The
            parameter ``env`` is given for managing translations.
        ")
                        (reparse-symbol indented_block_body) [33579 33896])
                    ("convert_to_display_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33929 33933])
                            ("value" variable nil (reparse-symbol function_parameters) [33935 33940])
                            ("record" variable nil (reparse-symbol function_parameters) [33942 33948]))                          
                        :documentation " convert ``value`` from the cache to a suitable display name. ")
                        (reparse-symbol indented_block_body) [33901 34060])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34196 34200])
                            ("record" variable nil (reparse-symbol function_parameters) [34202 34208])
                            ("owner" variable nil (reparse-symbol function_parameters) [34210 34215]))                          
                        :documentation " return the value of field ``self`` on ``record`` ")
                        (reparse-symbol indented_block_body) [34184 35068])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35085 35089])
                            ("record" variable nil (reparse-symbol function_parameters) [35091 35097])
                            ("value" variable nil (reparse-symbol function_parameters) [35099 35104]))                          
                        :documentation " set the value of field ``self`` on ``record`` ")
                        (reparse-symbol indented_block_body) [35073 36153])
                    ("_compute_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36305 36309])
                            ("records" variable nil (reparse-symbol function_parameters) [36311 36318]))                          
                        :documentation " Invoke the compute method on ``records``. ")
                        (reparse-symbol indented_block_body) [36286 36763])
                    ("compute_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36786 36790])
                            ("records" variable nil (reparse-symbol function_parameters) [36792 36799]))                          
                        :documentation " Invoke the compute method on ``records``; the results are in cache. ")
                        (reparse-symbol indented_block_body) [36768 37343])
                    ("determine_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37368 37372])
                            ("record" variable nil (reparse-symbol function_parameters) [37374 37380]))                          
                        :documentation " Determine the value of ``self`` for ``record``. ")
                        (reparse-symbol indented_block_body) [37348 39125])
                    ("determine_draft_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39156 39160])
                            ("record" variable nil (reparse-symbol function_parameters) [39162 39168]))                          
                        :documentation " Determine the value of ``self`` for the given draft ``record``. ")
                        (reparse-symbol indented_block_body) [39130 39400])
                    ("determine_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39427 39431])
                            ("records" variable nil (reparse-symbol function_parameters) [39433 39440]))                          
                        :documentation " Given the value of ``self`` on ``records``, inverse the computation. ")
                        (reparse-symbol indented_block_body) [39405 39587])
                    ("determine_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39613 39617])
                            ("records" variable nil (reparse-symbol function_parameters) [39619 39626])
                            ("operator" variable nil (reparse-symbol function_parameters) [39628 39636])
                            ("value" variable nil (reparse-symbol function_parameters) [39638 39643]))                          
                        :documentation " Return a domain representing a condition on ``self``. ")
                        (reparse-symbol indented_block_body) [39592 39861])
                    ("modified" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40017 40021])
                            ("records" variable nil (reparse-symbol function_parameters) [40023 40030]))                          
                        :documentation " Notify that field ``self`` has been modified on ``records``: prepare the
            fields/records to recompute, and return a spec indicating what to
            invalidate.
        ")
                        (reparse-symbol indented_block_body) [40004 41217])
                    ("modified_draft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41241 41245])
                            ("records" variable nil (reparse-symbol function_parameters) [41247 41254]))                          
                        :documentation " Same as :meth:`modified`, but in draft mode. ")
                        (reparse-symbol indented_block_body) [41222 42081]))                  
                :type "class")
                nil [4577 42081])
            ("Boolean" type
               (:superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [42109 42125])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42152 42156])
                            ("value" variable nil (reparse-symbol function_parameters) [42158 42163])
                            ("record" variable nil (reparse-symbol function_parameters) [42165 42171])
                            ("validate" variable nil (reparse-symbol function_parameters) [42173 42181]))                          )
                        (reparse-symbol indented_block_body) [42131 42216])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42243 42247])
                            ("value" variable nil (reparse-symbol function_parameters) [42249 42254])
                            ("env" variable nil (reparse-symbol function_parameters) [42256 42259]))                          )
                        (reparse-symbol indented_block_body) [42221 42361]))                  
                :type "class")
                nil [42083 42361])
            ("Integer" type
               (:superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [42389 42405])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [42410 42500])
                    ("_related_group_operator" variable nil (reparse-symbol indented_block_body) [42506 42570])
                    ("_column_group_operator" variable nil (reparse-symbol indented_block_body) [42575 42638])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42665 42669])
                            ("value" variable nil (reparse-symbol function_parameters) [42671 42676])
                            ("record" variable nil (reparse-symbol function_parameters) [42678 42684])
                            ("validate" variable nil (reparse-symbol function_parameters) [42686 42694]))                          )
                        (reparse-symbol indented_block_body) [42644 42895])
                    ("convert_to_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42920 42924])
                            ("value" variable nil (reparse-symbol function_parameters) [42926 42931])
                            ("use_name_get" variable nil (reparse-symbol function_parameters) [42933 42945]))                          )
                        (reparse-symbol indented_block_body) [42900 43180])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43197 43201])
                            ("records" variable nil (reparse-symbol function_parameters) [43203 43210])
                            ("value" variable nil (reparse-symbol function_parameters) [43212 43217]))                          )
                        (reparse-symbol indented_block_body) [43185 43345])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43372 43376])
                            ("value" variable nil (reparse-symbol function_parameters) [43378 43383])
                            ("env" variable nil (reparse-symbol function_parameters) [43385 43388]))                          )
                        (reparse-symbol indented_block_body) [43350 43521]))                  
                :type "class")
                nil [42363 43521])
            ("Float" type
               (:documentation " The precision digits are given by the attribute

    :param digits: a pair (total, decimal), or a function taking a database
                   cursor and returning a pair (total, decimal)
    "
                :superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [43752 43766])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [43771 43947])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [44005 44073]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43966 43970])
                            ("string" variable nil (reparse-symbol function_parameters) [43972 43978])
                            ("digits" variable nil (reparse-symbol function_parameters) [43985 43991])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43998 44006]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43953 44086])
                    ("digits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44116 44120]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44091 44281])
                    ("_setup_digits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44304 44308])
                            ("env" variable nil (reparse-symbol function_parameters) [44310 44313]))                          
                        :documentation " Setup the digits for ``self`` and its corresponding column ")
                        (reparse-symbol indented_block_body) [44286 44404])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44428 44432])
                            ("env" variable nil (reparse-symbol function_parameters) [44434 44437]))                          )
                        (reparse-symbol indented_block_body) [44409 44519])
                    ("_related__digits" variable nil (reparse-symbol indented_block_body) [44524 44574])
                    ("_related_group_operator" variable nil (reparse-symbol indented_block_body) [44579 44643])
                    ("_description_digits" variable nil (reparse-symbol indented_block_body) [44649 44701])
                    ("_column_digits" variable nil (reparse-symbol indented_block_body) [44707 44790])
                    ("_column_digits_compute" variable nil (reparse-symbol indented_block_body) [44795 44882])
                    ("_column_group_operator" variable nil (reparse-symbol indented_block_body) [44887 44950])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44977 44981])
                            ("value" variable nil (reparse-symbol function_parameters) [44983 44988])
                            ("record" variable nil (reparse-symbol function_parameters) [44990 44996])
                            ("validate" variable nil (reparse-symbol function_parameters) [44998 45006]))                          )
                        (reparse-symbol indented_block_body) [44956 45282])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45309 45313])
                            ("value" variable nil (reparse-symbol function_parameters) [45315 45320])
                            ("env" variable nil (reparse-symbol function_parameters) [45322 45325]))                          )
                        (reparse-symbol indented_block_body) [45287 45460]))                  
                :type "class")
                nil [43523 45460])
            ("_String" type
               (:documentation " Abstract class for string fields. "
                :superclasses ("Field")
                :members 
                  ( ("_slots" variable nil (reparse-symbol indented_block_body) [45534 45624])
                    ("_column_translate" variable nil (reparse-symbol indented_block_body) [45630 45683])
                    ("_related_translate" variable nil (reparse-symbol indented_block_body) [45688 45742])
                    ("_description_translate" variable nil (reparse-symbol indented_block_body) [45747 45805]))                  
                :type "class")
                nil [45462 45806])
            ("Char" type
               (:documentation " Basic string field, can be length-limited, usually displayed as a
    single-line string in clients

    :param int size: the maximum size of values stored for that field
    :param bool translate: whether the values of this field can be translated
    "
                :superclasses ("_String")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [46102 46115])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [46120 46214])
                    ("_column_size" variable nil (reparse-symbol indented_block_body) [46220 46263])
                    ("_related_size" variable nil (reparse-symbol indented_block_body) [46268 46312])
                    ("_description_size" variable nil (reparse-symbol indented_block_body) [46317 46365])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46390 46394])
                            ("env" variable nil (reparse-symbol function_parameters) [46396 46399]))                          )
                        (reparse-symbol indented_block_body) [46371 46578])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46604 46608])
                            ("value" variable nil (reparse-symbol function_parameters) [46610 46615])
                            ("record" variable nil (reparse-symbol function_parameters) [46617 46623])
                            ("validate" variable nil (reparse-symbol function_parameters) [46625 46633]))                          )
                        (reparse-symbol indented_block_body) [46583 46749]))                  
                :type "class")
                nil [45812 46749])
            ("Text" type
               (:documentation " Very similar to :class:`~.Char` but used for longer contents, does not
    have a size and usually displayed as a multiline text box.

    :param translate: whether the value of this field can be translated
    "
                :superclasses ("_String")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [46998 47011])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47038 47042])
                            ("value" variable nil (reparse-symbol function_parameters) [47044 47049])
                            ("record" variable nil (reparse-symbol function_parameters) [47051 47057])
                            ("validate" variable nil (reparse-symbol function_parameters) [47059 47067]))                          )
                        (reparse-symbol indented_block_body) [47017 47171]))                  
                :type "class")
                nil [46750 47171])
            ("Html" type
               (:superclasses ("_String")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [47197 47210])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [47215 47381])
                    ("_column_sanitize" variable nil (reparse-symbol indented_block_body) [47387 47438])
                    ("_related_sanitize" variable nil (reparse-symbol indented_block_body) [47443 47495])
                    ("_description_sanitize" variable nil (reparse-symbol indented_block_body) [47500 47556])
                    ("_column_strip_style" variable nil (reparse-symbol indented_block_body) [47562 47619])
                    ("_related_strip_style" variable nil (reparse-symbol indented_block_body) [47624 47682])
                    ("_description_strip_style" variable nil (reparse-symbol indented_block_body) [47687 47749])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47776 47780])
                            ("value" variable nil (reparse-symbol function_parameters) [47782 47787])
                            ("record" variable nil (reparse-symbol function_parameters) [47789 47795])
                            ("validate" variable nil (reparse-symbol function_parameters) [47797 47805]))                          )
                        (reparse-symbol indented_block_body) [47755 48012]))                  
                :type "class")
                nil [47172 48012])
            ("Date" type
               (:superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [48037 48050])
                    ("today" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [48084 48089]))                          
                        :documentation " Return the current day in the format expected by the ORM.
            This function may be used to compute default values.
        ")
                        (reparse-symbol indented_block_body) [48056 48289])
                    ("context_today" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("record" variable nil (reparse-symbol function_parameters) [48330 48336])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [48338 48347]))                          
                        :documentation " Return the current date as seen in the client's timezone in a format
            fit for date fields. This method may be used to compute default
            values.

            :param datetime timestamp: optional datetime value to use instead of
                the current date and time (must be a datetime, regular dates
                can't be converted between timezones.)
            :rtype: str
        ")
                        (reparse-symbol indented_block_body) [48294 49382])
                    ("from_string" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [49421 49426]))                          
                        :documentation " Convert an ORM ``value`` into a :class:`date` value. ")
                        (reparse-symbol indented_block_body) [49387 49640])
                    ("to_string" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [49677 49682]))                          
                        :documentation " Convert a :class:`date` value into the format expected by the ORM. ")
                        (reparse-symbol indented_block_body) [49645 49831])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49857 49861])
                            ("value" variable nil (reparse-symbol function_parameters) [49863 49868])
                            ("record" variable nil (reparse-symbol function_parameters) [49870 49876])
                            ("validate" variable nil (reparse-symbol function_parameters) [49878 49886]))                          )
                        (reparse-symbol indented_block_body) [49836 50171])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50198 50202])
                            ("value" variable nil (reparse-symbol function_parameters) [50204 50209])
                            ("env" variable nil (reparse-symbol function_parameters) [50211 50214]))                          )
                        (reparse-symbol indented_block_body) [50176 50355]))                  
                :type "class")
                nil [48014 50355])
            ("Datetime" type
               (:superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [50384 50401])
                    ("now" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [50433 50438]))                          
                        :documentation " Return the current day and time in the format expected by the ORM.
            This function may be used to compute default values.
        ")
                        (reparse-symbol indented_block_body) [50407 50653])
                    ("context_timestamp" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("record" variable nil (reparse-symbol function_parameters) [50698 50704])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [50706 50715]))                          
                        :documentation "Returns the given timestamp converted to the client's timezone.
           This method is *not* meant for use as a _defaults initializer,
           because datetime fields are automatically converted upon
           display on client side. For _defaults you :meth:`fields.datetime.now`
           should be used instead.

           :param datetime timestamp: naive datetime value (expressed in UTC)
                                      to be converted to the client timezone
           :rtype: datetime
           :return: timestamp converted to timezone-aware datetime in context
                    timezone
        ")
                        (reparse-symbol indented_block_body) [50658 51972])
                    ("from_string" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [52011 52016]))                          
                        :documentation " Convert an ORM ``value`` into a :class:`datetime` value. ")
                        (reparse-symbol indented_block_body) [51977 52306])
                    ("to_string" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [52343 52348]))                          
                        :documentation " Convert a :class:`datetime` value into the format expected by the ORM. ")
                        (reparse-symbol indented_block_body) [52311 52505])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52531 52535])
                            ("value" variable nil (reparse-symbol function_parameters) [52537 52542])
                            ("record" variable nil (reparse-symbol function_parameters) [52544 52550])
                            ("validate" variable nil (reparse-symbol function_parameters) [52552 52560]))                          )
                        (reparse-symbol indented_block_body) [52510 52954])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52981 52985])
                            ("value" variable nil (reparse-symbol function_parameters) [52987 52992])
                            ("env" variable nil (reparse-symbol function_parameters) [52994 52997]))                          )
                        (reparse-symbol indented_block_body) [52959 53138])
                    ("convert_to_display_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53171 53175])
                            ("value" variable nil (reparse-symbol function_parameters) [53177 53182])
                            ("record" variable nil (reparse-symbol function_parameters) [53184 53190]))                          )
                        (reparse-symbol indented_block_body) [53143 53338]))                  
                :type "class")
                nil [50357 53338])
            ("Binary" type
               (:superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [53365 53380]))                  
                :type "class")
                nil [53340 53381])
            ("Selection" type
               (:documentation "
    :param selection: specifies the possible values for this field.
        It is given as either a list of pairs (``value``, ``string``), or a
        model method, or a method name.
    :param selection_add: provides an extension of the selection in the case
        of an overridden field. It is a list of pairs (``value``, ``string``).

    The attribute ``selection`` is mandatory except in the case of
    :ref:`related fields <field-related>` or :ref:`field extensions
    <field-incremental-definition>`.
    "
                :superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [53940 53958])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [53963 54069])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [54130 54249])
                            ("super" code nil (reparse-symbol indented_block_body) [54257 54334]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54088 54092])
                            ("selection" variable nil (reparse-symbol function_parameters) [54094 54103])
                            ("string" variable nil (reparse-symbol function_parameters) [54110 54116])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [54123 54131]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54075 54347])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54371 54375])
                            ("env" variable nil (reparse-symbol function_parameters) [54377 54380]))                          )
                        (reparse-symbol indented_block_body) [54352 54513])
                    ("_setup_related" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54537 54541])
                            ("env" variable nil (reparse-symbol function_parameters) [54543 54546]))                          )
                        (reparse-symbol indented_block_body) [54518 54768])
                    ("set_class_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54792 54796])
                            ("cls" variable nil (reparse-symbol function_parameters) [54798 54801])
                            ("name" variable nil (reparse-symbol function_parameters) [54803 54807]))                          )
                        (reparse-symbol indented_block_body) [54773 55642])
                    ("_description_selection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55674 55678])
                            ("env" variable nil (reparse-symbol function_parameters) [55680 55683]))                          
                        :documentation " return the selection list (pairs (value, label)); labels are
            translated according to context language
        ")
                        (reparse-symbol indented_block_body) [55647 56420])
                    ("_column_selection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56461 56465]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [56425 56677])
                    ("get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56697 56701])
                            ("env" variable nil (reparse-symbol function_parameters) [56703 56706]))                          
                        :documentation " return a list of the possible values ")
                        (reparse-symbol indented_block_body) [56682 57049])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57075 57079])
                            ("value" variable nil (reparse-symbol function_parameters) [57081 57086])
                            ("record" variable nil (reparse-symbol function_parameters) [57088 57094])
                            ("validate" variable nil (reparse-symbol function_parameters) [57096 57104]))                          )
                        (reparse-symbol indented_block_body) [57054 57361])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57388 57392])
                            ("value" variable nil (reparse-symbol function_parameters) [57394 57399])
                            ("env" variable nil (reparse-symbol function_parameters) [57401 57404]))                          )
                        (reparse-symbol indented_block_body) [57366 57702]))                  
                :type "class")
                nil [53383 57702])
            ("Reference" type
               (:superclasses ("Selection")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [57736 57754])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [57759 57853])
                    ("_related_size" variable nil (reparse-symbol indented_block_body) [57859 57903])
                    ("_column_size" variable nil (reparse-symbol indented_block_body) [57908 57951])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57976 57980])
                            ("env" variable nil (reparse-symbol function_parameters) [57982 57985]))                          )
                        (reparse-symbol indented_block_body) [57957 58174])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58200 58204])
                            ("value" variable nil (reparse-symbol function_parameters) [58206 58211])
                            ("record" variable nil (reparse-symbol function_parameters) [58213 58219])
                            ("validate" variable nil (reparse-symbol function_parameters) [58221 58229]))                          )
                        (reparse-symbol indented_block_body) [58179 58726])
                    ("convert_to_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58751 58755])
                            ("value" variable nil (reparse-symbol function_parameters) [58757 58762])
                            ("use_name_get" variable nil (reparse-symbol function_parameters) [58764 58776]))                          )
                        (reparse-symbol indented_block_body) [58731 58853])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58880 58884])
                            ("value" variable nil (reparse-symbol function_parameters) [58886 58891])
                            ("env" variable nil (reparse-symbol function_parameters) [58893 58896]))                          )
                        (reparse-symbol indented_block_body) [58858 58954])
                    ("convert_to_display_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58987 58991])
                            ("value" variable nil (reparse-symbol function_parameters) [58993 58998])
                            ("record" variable nil (reparse-symbol function_parameters) [59000 59006]))                          )
                        (reparse-symbol indented_block_body) [58959 59064]))                  
                :type "class")
                nil [57704 59064])
            ("_Relational" type
               (:documentation " Abstract class for relational fields. "
                :superclasses ("Field")
                :members 
                  ( ("relational" variable nil (reparse-symbol indented_block_body) [59146 59163])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [59168 59325])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59350 59354])
                            ("env" variable nil (reparse-symbol function_parameters) [59356 59359]))                          )
                        (reparse-symbol indented_block_body) [59331 59633])
                    ("_related_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59672 59676]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [59638 59946])
                    ("_related_context" variable nil (reparse-symbol indented_block_body) [59951 60001])
                    ("_description_relation" variable nil (reparse-symbol indented_block_body) [60007 60067])
                    ("_description_context" variable nil (reparse-symbol indented_block_body) [60072 60126])
                    ("_description_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60156 60160])
                            ("env" variable nil (reparse-symbol function_parameters) [60162 60165]))                          )
                        (reparse-symbol indented_block_body) [60132 60259])
                    ("_column_obj" variable nil (reparse-symbol indented_block_body) [60264 60314])
                    ("_column_domain" variable nil (reparse-symbol indented_block_body) [60319 60366])
                    ("_column_context" variable nil (reparse-symbol indented_block_body) [60371 60420])
                    ("null" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60435 60439])
                            ("env" variable nil (reparse-symbol function_parameters) [60441 60444]))                          )
                        (reparse-symbol indented_block_body) [60426 60485])
                    ("modified" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60503 60507])
                            ("records" variable nil (reparse-symbol function_parameters) [60509 60516]))                          )
                        (reparse-symbol indented_block_body) [60490 60870]))                  
                :type "class")
                nil [59066 60870])
            ("Many2one" type
               (:documentation " The value of such a field is a recordset of size 0 (no
    record) or 1 (a single record).

    :param comodel_name: name of the target model (string)

    :param domain: an optional domain to set on candidate values on the
        client side (domain or string)

    :param context: an optional context to use on the client side when
        handling that field (dictionary)

    :param ondelete: what to do when the referred record is deleted;
        possible values are: ``'set null'``, ``'restrict'``, ``'cascade'``

    :param auto_join: whether JOINs are generated upon search through that
        field (boolean, by default ``False``)

    :param delegate: set it to ``True`` to make fields of the target model
        accessible from the current model (corresponds to ``_inherits``)

    The attribute ``comodel_name`` is mandatory except in the case of related
    fields or field extensions.
    "
                :superclasses ("_Relational")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [61824 61841])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [61846 62096])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [62160 62242]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62115 62119])
                            ("comodel_name" variable nil (reparse-symbol function_parameters) [62121 62133])
                            ("string" variable nil (reparse-symbol function_parameters) [62140 62146])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [62153 62161]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [62102 62255])
                    ("set_class_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62279 62283])
                            ("cls" variable nil (reparse-symbol function_parameters) [62285 62288])
                            ("name" variable nil (reparse-symbol function_parameters) [62290 62294]))                          )
                        (reparse-symbol indented_block_body) [62260 62476])
                    ("_column_ondelete" variable nil (reparse-symbol indented_block_body) [62481 62532])
                    ("_column_auto_join" variable nil (reparse-symbol indented_block_body) [62537 62590])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62608 62612])
                            ("records" variable nil (reparse-symbol function_parameters) [62614 62621])
                            ("value" variable nil (reparse-symbol function_parameters) [62623 62628]))                          
                        :documentation " Update the cached value of ``self`` for ``records`` with ``value``. ")
                        (reparse-symbol indented_block_body) [62596 62752])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62778 62782])
                            ("value" variable nil (reparse-symbol function_parameters) [62784 62789])
                            ("record" variable nil (reparse-symbol function_parameters) [62791 62797])
                            ("validate" variable nil (reparse-symbol function_parameters) [62799 62807]))                          )
                        (reparse-symbol indented_block_body) [62757 63420])
                    ("convert_to_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63445 63449])
                            ("value" variable nil (reparse-symbol function_parameters) [63451 63456])
                            ("use_name_get" variable nil (reparse-symbol function_parameters) [63458 63470]))                          )
                        (reparse-symbol indented_block_body) [63425 64368])
                    ("convert_to_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64394 64398])
                            ("value" variable nil (reparse-symbol function_parameters) [64400 64405])
                            ("target" variable nil (reparse-symbol function_parameters) [64407 64413])
                            ("fnames" variable nil (reparse-symbol function_parameters) [64420 64426]))                          )
                        (reparse-symbol indented_block_body) [64373 64458])
                    ("convert_to_onchange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64487 64491])
                            ("value" variable nil (reparse-symbol function_parameters) [64493 64498]))                          )
                        (reparse-symbol indented_block_body) [64463 64525])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64552 64556])
                            ("value" variable nil (reparse-symbol function_parameters) [64558 64563])
                            ("env" variable nil (reparse-symbol function_parameters) [64565 64568]))                          )
                        (reparse-symbol indented_block_body) [64530 64626])
                    ("convert_to_display_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64659 64663])
                            ("value" variable nil (reparse-symbol function_parameters) [64665 64670])
                            ("record" variable nil (reparse-symbol function_parameters) [64672 64678]))                          )
                        (reparse-symbol indented_block_body) [64631 64726]))                  
                :type "class")
                nil [60872 64726])
            ("UnionUpdate" type
               (:documentation " Placeholder for a value update; when this value is taken from the cache,
        it returns ``record[field.name] | value`` and stores it in the cache.
    "
                :superclasses ("SpecialValue")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [64871 64905]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64945 64949])
                            ("field" variable nil (reparse-symbol function_parameters) [64951 64956])
                            ("record" variable nil (reparse-symbol function_parameters) [64958 64964])
                            ("value" variable nil (reparse-symbol function_parameters) [64966 64971]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [64932 65017])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65030 65034]))                          )
                        (reparse-symbol indented_block_body) [65022 65353]))                  
                :type "class")
                nil [64728 65353])
            ("_RelationalMulti" type
               (:documentation " Abstract class for relational fields *2many. "
                :superclasses ("_Relational")
                :members 
                  ( ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65466 65470])
                            ("records" variable nil (reparse-symbol function_parameters) [65472 65479])
                            ("value" variable nil (reparse-symbol function_parameters) [65481 65486]))                          
                        :documentation " Update the cached value of ``self`` for ``records`` with ``value``. ")
                        (reparse-symbol indented_block_body) [65454 65795])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65821 65825])
                            ("value" variable nil (reparse-symbol function_parameters) [65827 65832])
                            ("record" variable nil (reparse-symbol function_parameters) [65834 65840])
                            ("validate" variable nil (reparse-symbol function_parameters) [65842 65850]))                          )
                        (reparse-symbol indented_block_body) [65800 67473])
                    ("convert_to_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67498 67502])
                            ("value" variable nil (reparse-symbol function_parameters) [67504 67509])
                            ("use_name_get" variable nil (reparse-symbol function_parameters) [67511 67523]))                          )
                        (reparse-symbol indented_block_body) [67478 67556])
                    ("convert_to_write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67582 67586])
                            ("value" variable nil (reparse-symbol function_parameters) [67588 67593])
                            ("target" variable nil (reparse-symbol function_parameters) [67595 67601])
                            ("fnames" variable nil (reparse-symbol function_parameters) [67608 67614]))                          )
                        (reparse-symbol indented_block_body) [67561 68871])
                    ("convert_to_export" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68898 68902])
                            ("value" variable nil (reparse-symbol function_parameters) [68904 68909])
                            ("env" variable nil (reparse-symbol function_parameters) [68911 68914]))                          )
                        (reparse-symbol indented_block_body) [68876 68997])
                    ("convert_to_display_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69030 69034])
                            ("value" variable nil (reparse-symbol function_parameters) [69036 69041])
                            ("record" variable nil (reparse-symbol function_parameters) [69043 69049]))                          )
                        (reparse-symbol indented_block_body) [69002 69093])
                    ("_compute_related" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69119 69123])
                            ("records" variable nil (reparse-symbol function_parameters) [69125 69132]))                          
                        :documentation " Compute the related field ``self`` on ``records``. ")
                        (reparse-symbol indented_block_body) [69098 69475]))                  
                :type "class")
                nil [65355 69475])
            ("One2many" type
               (:documentation " One2many field; the value of such a field is the recordset of all the
        records in ``comodel_name`` such that the field ``inverse_name`` is equal to
        the current record.

        :param comodel_name: name of the target model (string)

        :param inverse_name: name of the inverse ``Many2one`` field in
            ``comodel_name`` (string)

        :param domain: an optional domain to set on candidate values on the
            client side (domain or string)

        :param context: an optional context to use on the client side when
            handling that field (dictionary)

        :param auto_join: whether JOINs are generated upon search through that
            field (boolean, by default ``False``)

        :param limit: optional limit to use upon read (integer)

        The attributes ``comodel_name`` and ``inverse_name`` are mandatory except in
        the case of related fields or field extensions.
    "
                :superclasses ("_RelationalMulti")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [70466 70483])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [70488 70800])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [70784 70951]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70819 70823])
                            ("comodel_name" variable nil (reparse-symbol function_parameters) [70825 70837])
                            ("inverse_name" variable nil (reparse-symbol function_parameters) [70844 70856])
                            ("string" variable nil (reparse-symbol function_parameters) [70863 70869])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [70876 70884]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70806 71063])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71087 71091])
                            ("env" variable nil (reparse-symbol function_parameters) [71093 71096]))                          )
                        (reparse-symbol indented_block_body) [71068 71669])
                    ("_description_relation_field" variable nil (reparse-symbol indented_block_body) [71674 71740])
                    ("_column_fields_id" variable nil (reparse-symbol indented_block_body) [71746 71802])
                    ("_column_auto_join" variable nil (reparse-symbol indented_block_body) [71807 71860])
                    ("_column_limit" variable nil (reparse-symbol indented_block_body) [71865 71910]))                  
                :type "class")
                nil [69477 71911])
            ("Many2many" type
               (:documentation " Many2many field; the value of such a field is the recordset.

        :param comodel_name: name of the target model (string)

        The attribute ``comodel_name`` is mandatory except in the case of related
        fields or field extensions.

        :param relation: optional name of the table that stores the relation in
            the database (string)

        :param column1: optional name of the column referring to \"these\" records
            in the table ``relation`` (string)

        :param column2: optional name of the column referring to \"those\" records
            in the table ``relation`` (string)

        The attributes ``relation``, ``column1`` and ``column2`` are optional. If not
        given, names are automatically generated from model names, provided
        ``model_name`` and ``comodel_name`` are different!

        :param domain: an optional domain to set on candidate values on the
            client side (domain or string)

        :param context: an optional context to use on the client side when
            handling that field (dictionary)

        :param limit: optional limit to use upon read (integer)

    "
                :superclasses ("_RelationalMulti")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [73114 73132])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [73137 73439])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [73464 73682]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73458 73462])
                            ("comodel_name" variable nil (reparse-symbol function_parameters) [73464 73476])
                            ("relation" variable nil (reparse-symbol function_parameters) [73483 73491])
                            ("column1" variable nil (reparse-symbol function_parameters) [73498 73505])
                            ("column2" variable nil (reparse-symbol function_parameters) [73512 73519])
                            ("string" variable nil (reparse-symbol function_parameters) [73543 73549])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [73556 73564]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [73445 73794])
                    ("_setup_regular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73818 73822])
                            ("env" variable nil (reparse-symbol function_parameters) [73824 73827]))                          )
                        (reparse-symbol indented_block_body) [73799 74696])
                    ("_column_rel" variable nil (reparse-symbol indented_block_body) [74701 74747])
                    ("_column_id1" variable nil (reparse-symbol indented_block_body) [74752 74797])
                    ("_column_id2" variable nil (reparse-symbol indented_block_body) [74802 74847])
                    ("_column_limit" variable nil (reparse-symbol indented_block_body) [74852 74897]))                  
                :type "class")
                nil [71913 74898])
            ("Serialized" type
               (:documentation " Minimal support for existing sparse and serialized fields. "
                :superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [75000 75019])
                    ("convert_to_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75046 75050])
                            ("value" variable nil (reparse-symbol function_parameters) [75052 75057])
                            ("record" variable nil (reparse-symbol function_parameters) [75059 75065])
                            ("validate" variable nil (reparse-symbol function_parameters) [75067 75075]))                          )
                        (reparse-symbol indented_block_body) [75025 75110]))                  
                :type "class")
                nil [74900 75110])
            ("Id" type
               (:documentation " Special case for field 'id'. "
                :superclasses ("Field")
                :members 
                  ( ("type" variable nil (reparse-symbol indented_block_body) [75174 75190])
                    ("_slots" variable nil (reparse-symbol indented_block_body) [75195 75284])
                    ("to_column" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75304 75308]))                          )
                        (reparse-symbol indented_block_body) [75290 75388])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75405 75409])
                            ("record" variable nil (reparse-symbol function_parameters) [75411 75417])
                            ("owner" variable nil (reparse-symbol function_parameters) [75419 75424]))                          )
                        (reparse-symbol indented_block_body) [75393 75625])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75642 75646])
                            ("record" variable nil (reparse-symbol function_parameters) [75648 75654])
                            ("value" variable nil (reparse-symbol function_parameters) [75656 75661]))                          )
                        (reparse-symbol indented_block_body) [75630 75721]))                  
                :type "class")
                nil [75112 75721])
            ("openerp" include nil nil [75771 75803])
            ("Warning" include nil nil [75821 75862])
            ("AccessError" include nil nil [75821 75862])
            ("MissingError" include nil nil [75821 75862])
            ("BaseModel" include nil nil [75876 75907])
            ("MAGIC_COLUMNS" include nil nil [75876 75907])
            ("fields" include nil nil [75918 75931]))          
    :file "fields.py"
    :pointmax 75821
    :fsize 75931
    :lastmodtime '(22569 63192 533939 777000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sql_db.py"
    :file "sql_db.py"
    :fsize 24861
    :lastmodtime '(22188 8019 0 0)
    )
   (semanticdb-table "exceptions.py"
    :file "exceptions.py"
    :fsize 3157
    :lastmodtime '(21511 14494 0 0)
    )
   (semanticdb-table "http.py"
    :major-mode 'python-mode
    :tags 
        '( ("ast" include nil nil [166 176])
            ("collections" include nil nil [177 195])
            ("contextlib" include nil nil [196 213])
            ("datetime" include nil nil [214 229])
            ("errno" include nil nil [230 242])
            ("functools" include nil nil [243 259])
            ("getpass" include nil nil [260 274])
            ("inspect" include nil nil [275 289])
            ("logging" include nil nil [290 304])
            ("mimetypes" include nil nil [305 321])
            ("os" include nil nil [322 331])
            ("pprint" include nil nil [332 345])
            ("random" include nil nil [346 359])
            ("re" include nil nil [360 369])
            ("sys" include nil nil [370 380])
            ("tempfile" include nil nil [381 396])
            ("threading" include nil nil [397 413])
            ("time" include nil nil [414 425])
            ("traceback" include nil nil [426 442])
            ("urlparse" include nil nil [443 458])
            ("warnings" include nil nil [459 474])
            ("zlib" include nil nil [475 499])
            ("babel.core" include nil nil [501 518])
            ("psycopg2" include nil nil [519 534])
            ("simplejson" include nil nil [535 552])
            ("werkzeug.contrib.sessions" include nil nil [553 585])
            ("werkzeug.datastructures" include nil nil [586 616])
            ("werkzeug.exceptions" include nil nil [617 643])
            ("werkzeug.local" include nil nil [644 665])
            ("werkzeug.routing" include nil nil [666 689])
            ("werkzeug.wrappers" include nil nil [690 714])
            ("werkzeug.wsgi" include nil nil [715 735])
            ("werkzeug.wsgi" include nil nil [736 771])
            ("try" code nil nil [773 834])
            ("openerp" include nil nil [835 849])
            ("openerp" include nil nil [850 882])
            ("openerp.service.server" include nil nil [883 929])
            ("openerp.service" include nil nil [930 990])
            ("openerp.tools.func" include nil nil [991 1035])
            ("openerp.tools" include nil nil [1036 1066])
            ("_logger" variable nil nil [1068 1105])
            ("rpc_request" variable nil nil [1106 1164])
            ("rpc_response" variable nil nil [1165 1225])
            ("STATIC_CACHE" code nil nil [1286 1317])
            ("_request_stack" variable nil nil [1493 1537])
            ("request" variable nil nil [1539 1565])
            ("\"\"\"
    A global proxy that always redirect to the current request object.
\"\"\"" code nil nil [1566 1644])
            ("replace_request_password" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1675 1679]))              ) nil [1646 1928])
            ("NO_POSTMORTEM" variable nil nil [2091 2332])
            ("dispatch_rpc" function
               (:documentation " Handle a RPC call.

    This is pure Python code, the actual marshalling (from/to XML-RPC) is done
    in a upper layer.
    "
                :arguments 
                  ( ("service_name" variable nil (reparse-symbol function_parameters) [2350 2362])
                    ("method" variable nil (reparse-symbol function_parameters) [2364 2370])
                    ("params" variable nil (reparse-symbol function_parameters) [2372 2378]))                  )
                nil [2333 4778])
            ("local_redirect" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [4798 4802])
                ("query" variable nil (reparse-symbol function_parameters) [4804 4809])
                ("keep_hash" variable nil (reparse-symbol function_parameters) [4816 4825])
                ("forward_debug" variable nil (reparse-symbol function_parameters) [4833 4846])
                ("code" variable nil (reparse-symbol function_parameters) [4853 4857]))              ) nil [4779 5183])
            ("redirect_with_hash" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5207 5210])
                ("code" variable nil (reparse-symbol function_parameters) [5212 5216]))              ) nil [5184 5736])
            ("WebRequest" type
               (:documentation " Parent class for all Odoo Web request types, mostly deals with
    initialization and setup of the request object (the dispatching itself has
    to be handled by the subclasses)

    :param httprequest: a wrapped werkzeug Request object
    :type httprequest: :class:`werkzeug.wrappers.BaseRequest`

    .. attribute:: httprequest

        the original :class:`werkzeug.wrappers.Request` object provided to the
        request

    .. attribute:: params

        :class:`~collections.Mapping` of request parameters, not generally
        useful as they're provided directly to the handler method as keyword
        arguments
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6450 6480])
                            ("self" variable nil (reparse-symbol indented_block_body) [6489 6513])
                            ("self" variable nil (reparse-symbol indented_block_body) [6522 6560])
                            ("self" variable nil (reparse-symbol indented_block_body) [6569 6592])
                            ("self" variable nil (reparse-symbol indented_block_body) [6601 6616])
                            ("self" variable nil (reparse-symbol indented_block_body) [6625 6645])
                            ("self" variable nil (reparse-symbol indented_block_body) [6654 6684])
                            ("self" variable nil (reparse-symbol indented_block_body) [6693 6716])
                            ("self" variable nil (reparse-symbol indented_block_body) [6725 6740])
                            ("self" variable nil (reparse-symbol indented_block_body) [6837 6856])
                            ("if" code nil (reparse-symbol indented_block_body) [7000 7068])
                            ("if" code nil (reparse-symbol indented_block_body) [7076 7159]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6422 6426])
                            ("httprequest" variable nil (reparse-symbol function_parameters) [6428 6439]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6409 7159])
                    ("env" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7191 7195]))                          
                        :documentation "
        The :class:`~openerp.api.Environment` bound to current request.
        Raises a :class:`RuntimeError` if the current requests is not bound
        to a database.
        ")
                        (reparse-symbol indented_block_body) [7164 7556])
                    ("context" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7592 7596]))                          
                        :documentation "
        :class:`~collections.Mapping` of context values for the current
        request
        ")
                        (reparse-symbol indented_block_body) [7561 7753])
                    ("lang" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7786 7790]))                          
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7758 7874])
                    ("session" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7910 7914]))                          
                        :documentation "
        a :class:`OpenERPSession` holding the HTTP session data for the
        current http session
        ")
                        (reparse-symbol indented_block_body) [7879 8082])
                    ("cr" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8108 8112]))                          
                        :documentation "
        :class:`~openerp.sql_db.Cursor` initialized for the current method
        call.

        Accessing the cursor when the current request uses the ``none``
        authentication will raise an exception.
        ")
                        (reparse-symbol indented_block_body) [8087 8643])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8662 8666]))                          )
                        (reparse-symbol indented_block_body) [8648 8723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8741 8745])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [8747 8755])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [8757 8766])
                            ("traceback" variable nil (reparse-symbol function_parameters) [8768 8777]))                          )
                        (reparse-symbol indented_block_body) [8728 9064])
                    ("set_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9085 9089])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [9091 9099])
                            ("arguments" variable nil (reparse-symbol function_parameters) [9101 9110])
                            ("auth" variable nil (reparse-symbol function_parameters) [9112 9116]))                          )
                        (reparse-symbol indented_block_body) [9069 9381])
                    ("_handle_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9409 9413])
                            ("exception" variable nil (reparse-symbol function_parameters) [9415 9424]))                          
                        :documentation "Called within an except block to allow converting exceptions
           to abitrary responses. Anything returned (except None) will
           be used as response.")
                        (reparse-symbol indented_block_body) [9387 9911])
                    ("_call_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9935 9939])
                            ("args" variable nil (reparse-symbol function_parameters) [9941 9946])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9948 9956]))                          )
                        (reparse-symbol indented_block_body) [9916 11146])
                    ("debug" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11175 11179]))                          
                        :documentation " Indicates whether the current request is in \"debug\" mode
        ")
                        (reparse-symbol indented_block_body) [11151 11311])
                    ("registry_cr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11363 11367]))                          
                        :decorators 
                          ( ("contextlib.contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11316 11506])
                    ("session_id" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11545 11549]))                          
                        :documentation "
        opaque identifier for the :class:`OpenERPSession` instance of
        the current request

        .. deprecated:: 8.0

            Use the ``sid`` attribute on :attr:`.session`
        ")
                        (reparse-symbol indented_block_body) [11511 11794])
                    ("registry" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11826 11830]))                          
                        :documentation "
        The registry to the database linked to this request. Can be ``None``
        if the current request uses the ``none`` authentication.

        .. deprecated:: 8.0

            use :attr:`.env`
        ")
                        (reparse-symbol indented_block_body) [11799 12148])
                    ("db" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12174 12178]))                          
                        :documentation "
        The database linked to this request. Can be ``None``
        if the current request uses the ``none`` authentication.
        ")
                        (reparse-symbol indented_block_body) [12153 12395])
                    ("httpsession" function
                       (:parent "dummy"
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12435 12439]))                          
                        :documentation " HTTP session data

        .. deprecated:: 8.0

            Use :attr:`.session` instead.
        ")
                        (reparse-symbol indented_block_body) [12400 12584]))                  
                :type "class")
                nil [5737 12584])
            ("route" function
               (:documentation "
    Decorator marking the decorated method as being a handler for
    requests. The method must be part of a subclass of ``Controller``.

    :param route: string or array. The route part that will determine which
                  http requests will match the decorated method. Can be a
                  single string or an array of strings. See werkzeug's routing
                  documentation for the format of route expression (
                  http://werkzeug.pocoo.org/docs/routing/ ).
    :param type: The type of request, can be ``'http'`` or ``'json'``.
    :param auth: The type of authentication method, can on of the following:

                 * ``user``: The user must be authenticated and the current request
                   will perform using the rights of the user.
                 * ``public``: The user may or may not be authenticated. If she isn't,
                   the current request will perform using the shared Public user.
                 * ``none``: The method is always active, even if there is no
                   database. Mainly used by the framework and authentication
                   modules. There request code will not have any facilities to access
                   the database nor have any configuration indicating the current
                   database nor the current user.
    :param methods: A sequence of http methods this route applies to. If not
                    specified, all methods are allowed.
    :param cors: The Access-Control-Allow-Origin cors directive value.
    "
                :arguments 
                  ( ("route" variable nil (reparse-symbol function_parameters) [12595 12600])
                    ("kw" variable nil (reparse-symbol function_parameters) [12607 12611]))                  )
                nil [12585 15404])
            ("JsonRequest" type
               (:documentation " Request handler for `JSON-RPC 2
    <http://www.jsonrpc.org/specification>`_ over HTTP

    * ``method`` is ignored
    * ``params`` must be a JSON object (not an array) and is passed as keyword
      arguments to the handler method
    * the handler method's result is returned as JSON-RPC ``result`` and
      wrapped in the `JSON-RPC Response
      <http://www.jsonrpc.org/specification#response_object>`_

    Sucessful request::

      --> {\"jsonrpc\": \"2.0\",
           \"method\": \"call\",
           \"params\": {\"context\": {},
                      \"arg1\": \"val1\" },
           \"id\": null}

      <-- {\"jsonrpc\": \"2.0\",
           \"result\": { \"res1\": \"val1\" },
           \"id\": null}

    Request producing a error::

      --> {\"jsonrpc\": \"2.0\",
           \"method\": \"call\",
           \"params\": {\"context\": {},
                      \"arg1\": \"val1\" },
           \"id\": null}

      <-- {\"jsonrpc\": \"2.0\",
           \"error\": {\"code\": 1,
                     \"message\": \"End user error message.\",
                     \"data\": {\"code\": \"codestring\",
                              \"debug\": \"traceback\" } },
           \"id\": null}

    "
                :superclasses ("WebRequest")
                :members 
                  ( ("_request_type" variable nil (reparse-symbol indented_block_body) [16588 16610])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [16651 16691])
                            ("self" variable nil (reparse-symbol indented_block_body) [16701 16726])
                            ("args" variable nil (reparse-symbol indented_block_body) [16736 16764])
                            ("jsonp" variable nil (reparse-symbol indented_block_body) [16773 16798])
                            ("self" variable nil (reparse-symbol indented_block_body) [16807 16825])
                            ("request" variable nil (reparse-symbol indented_block_body) [16834 16848])
                            ("request_id" variable nil (reparse-symbol indented_block_body) [16857 16884])
                            ("if" code nil (reparse-symbol indented_block_body) [16902 17779])
                            ("try" code nil (reparse-symbol indented_block_body) [17850 18128])
                            ("self" variable nil (reparse-symbol indented_block_body) [18137 18191])
                            ("self" variable nil (reparse-symbol indented_block_body) [18200 18269]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16629 16633])
                            ("args" variable nil (reparse-symbol function_parameters) [16635 16640]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16616 18270])
                    ("_json_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18294 18298])
                            ("result" variable nil (reparse-symbol function_parameters) [18300 18306])
                            ("error" variable nil (reparse-symbol function_parameters) [18313 18318]))                          )
                        (reparse-symbol indented_block_body) [18275 19230])
                    ("_handle_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19257 19261])
                            ("exception" variable nil (reparse-symbol function_parameters) [19263 19272]))                          
                        :documentation "Called within an except block to allow converting exceptions
           to arbitrary responses. Anything returned (except None) will
           be used as response.")
                        (reparse-symbol indented_block_body) [19235 20282])
                    ("dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20300 20304]))                          )
                        (reparse-symbol indented_block_body) [20287 21967]))                  
                :type "class")
                nil [15405 21967])
            ("serialize_exception" function (:arguments 
              ( ("e" variable nil (reparse-symbol function_parameters) [21992 21993]))              ) nil [21968 22642])
            ("to_jsonable" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [22659 22660]))              ) nil [22643 23100])
            ("jsonrequest" function
               (:documentation " 
        .. deprecated:: 8.0
            Use the :func:`~openerp.http.route` decorator instead.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [23117 23118]))                  )
                nil [23101 23415])
            ("HttpRequest" type
               (:documentation " Handler for the ``http`` request type.

    matched routing parameters, query string parameters, form_ parameters
    and files are passed to the handler method as keyword arguments.

    In case of name conflict, routing parameters have priority.

    The handler method's result can be:

    * a falsy value, in which case the HTTP response will be an
      `HTTP 204`_ (No Content)
    * a werkzeug Response object, which is returned as-is
    * a ``str`` or ``unicode``, will be wrapped in a Response object and
      interpreted as HTML

    .. _form: http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2
    .. _HTTP 204: http://tools.ietf.org/html/rfc7231#section-6.3.5
    "
                :superclasses ("WebRequest")
                :members 
                  ( ("_request_type" variable nil (reparse-symbol indented_block_body) [24152 24174])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [24215 24255])
                            ("params" variable nil (reparse-symbol indented_block_body) [24264 24304])
                            ("params" code nil (reparse-symbol indented_block_body) [24313 24359])
                            ("params" code nil (reparse-symbol indented_block_body) [24368 24415])
                            ("params" code nil (reparse-symbol indented_block_body) [24424 24454])
                            ("self" variable nil (reparse-symbol indented_block_body) [24463 24483]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24193 24197])
                            ("args" variable nil (reparse-symbol function_parameters) [24199 24204]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24180 24484])
                    ("_handle_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24511 24515])
                            ("exception" variable nil (reparse-symbol function_parameters) [24517 24526]))                          
                        :documentation "Called within an except block to allow converting exceptions
           to abitrary responses. Anything returned (except None) will
           be used as response.")
                        (reparse-symbol indented_block_body) [24489 25159])
                    ("dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25177 25181]))                          )
                        (reparse-symbol indented_block_body) [25164 25680])
                    ("make_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25703 25707])
                            ("data" variable nil (reparse-symbol function_parameters) [25709 25713])
                            ("headers" variable nil (reparse-symbol function_parameters) [25715 25722])
                            ("cookies" variable nil (reparse-symbol function_parameters) [25729 25736]))                          
                        :documentation " Helper for non-HTML responses, or HTML responses with custom
        response headers or cookies.

        While handlers can just return the HTML markup of a page they want to
        send as a string if non-HTML data is returned they need to create a
        complete response object, or the returned data will not be correctly
        interpreted by the clients.

        :param basestring data: response body
        :param headers: HTTP headers to set on the response
        :type headers: ``[(name, value)]``
        :param collections.Mapping cookies: cookies to set on the client
        ")
                        (reparse-symbol indented_block_body) [25685 26539])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26555 26559])
                            ("template" variable nil (reparse-symbol function_parameters) [26561 26569])
                            ("qcontext" variable nil (reparse-symbol function_parameters) [26571 26579])
                            ("lazy" variable nil (reparse-symbol function_parameters) [26586 26590])
                            ("kw" variable nil (reparse-symbol function_parameters) [26597 26601]))                          
                        :documentation " Lazy render of a QWeb template.

        The actual rendering of the given template will occur at then end of
        the dispatching. Meanwhile, the template and/or qcontext can be
        altered or even replaced by a static response.

        :param basestring template: template to render
        :param dict qcontext: Rendering context to use
        :param bool lazy: whether the template rendering should be deferred
                          until the last possible moment
        :param kw: forwarded to werkzeug's Response object
        ")
                        (reparse-symbol indented_block_body) [26544 27322])
                    ("not_found" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27341 27345])
                            ("description" variable nil (reparse-symbol function_parameters) [27347 27358]))                          
                        :documentation " Shortcut for a `HTTP 404
        <http://tools.ietf.org/html/rfc7231#section-6.5.4>`_ (Not Found)
        response
        ")
                        (reparse-symbol indented_block_body) [27327 27562]))                  
                :type "class")
                nil [23416 27562])
            ("httprequest" function
               (:documentation " 
        .. deprecated:: 8.0

        Use the :func:`~openerp.http.route` decorator instead.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [27579 27580]))                  )
                nil [27563 27874])
            ("addons_module" variable nil nil [28031 28049])
            ("addons_manifest" variable nil nil [28050 28070])
            ("controllers_per_module" variable nil nil [28071 28125])
            ("ControllerType" type
               (:superclasses ("type")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [28206 28261])
                            ("for" code nil (reparse-symbol indented_block_body) [28331 29464])
                            ("name_class" variable nil (reparse-symbol indented_block_body) [29528 29588])
                            ("class_path" variable nil (reparse-symbol indented_block_body) [29597 29634])
                            ("if" code nil (reparse-symbol indented_block_body) [29643 29828])
                            ("if" code nil (reparse-symbol indented_block_body) [29912 29992])
                            ("controllers_per_module" code nil (reparse-symbol indented_block_body) [30000 30049]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [28172 28175])
                            ("name" variable nil (reparse-symbol function_parameters) [28177 28181])
                            ("bases" variable nil (reparse-symbol function_parameters) [28183 28188])
                            ("attrs" variable nil (reparse-symbol function_parameters) [28190 28195]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28159 30050]))                  
                :type "class")
                nil [28127 30050])
            ("Controller" type
               (:superclasses ("object")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [30081 30111]))                  
                :type "class")
                nil [30051 30112])
            ("EndPoint" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [30186 30206])
                            ("self" variable nil (reparse-symbol indented_block_body) [30215 30271])
                            ("self" variable nil (reparse-symbol indented_block_body) [30280 30302])
                            ("self" variable nil (reparse-symbol indented_block_body) [30311 30330]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30154 30158])
                            ("method" variable nil (reparse-symbol function_parameters) [30160 30166])
                            ("routing" variable nil (reparse-symbol function_parameters) [30168 30175]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30141 30331])
                    ("first_arg_is_req" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30371 30375]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [30336 30469])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30487 30491])
                            ("args" variable nil (reparse-symbol function_parameters) [30493 30498])
                            ("kw" variable nil (reparse-symbol function_parameters) [30500 30504]))                          )
                        (reparse-symbol indented_block_body) [30474 30547]))                  
                :type "class")
                nil [30113 30547])
            ("routing_map" function (:arguments 
              ( ("modules" variable nil (reparse-symbol function_parameters) [30564 30571])
                ("nodb_only" variable nil (reparse-symbol function_parameters) [30573 30582])
                ("converters" variable nil (reparse-symbol function_parameters) [30584 30594]))              ) nil [30548 33274])
            ("AuthenticationError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [33453 33457]))                  
                :type "class")
                nil [33411 33458])
            ("SessionExpiredException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [33505 33509]))                  
                :type "class")
                nil [33459 33510])
            ("Service" type
               (:documentation "
        .. deprecated:: 8.0
            Use :func:`dispatch_rpc` instead.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33679 33701])
                            ("self" variable nil (reparse-symbol indented_block_body) [33710 33742]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33641 33645])
                            ("session" variable nil (reparse-symbol function_parameters) [33647 33654])
                            ("service_name" variable nil (reparse-symbol function_parameters) [33656 33668]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33628 33743])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33764 33768])
                            ("method" variable nil (reparse-symbol function_parameters) [33770 33776]))                          )
                        (reparse-symbol indented_block_body) [33748 33933]))                  
                :type "class")
                nil [33511 33933])
            ("Model" type
               (:documentation "
        .. deprecated:: 8.0
            Use the registry and cursor in :data:`request` instead.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [34115 34137])
                            ("self" variable nil (reparse-symbol indented_block_body) [34146 34164])
                            ("self" variable nil (reparse-symbol indented_block_body) [34173 34214]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34084 34088])
                            ("session" variable nil (reparse-symbol function_parameters) [34090 34097])
                            ("model" variable nil (reparse-symbol function_parameters) [34099 34104]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34071 34215])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34236 34240])
                            ("method" variable nil (reparse-symbol function_parameters) [34242 34248]))                          )
                        (reparse-symbol indented_block_body) [34220 35420]))                  
                :type "class")
                nil [33934 35420])
            ("OpenERPSession" type
               (:superclasses ("werkzeug.contrib.sessions.Session")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [35527 35546])
                            ("self" variable nil (reparse-symbol indented_block_body) [35555 35576])
                            ("self" variable nil (reparse-symbol indented_block_body) [35585 35604])
                            ("super" code nil (reparse-symbol indented_block_body) [35613 35666])
                            ("self" variable nil (reparse-symbol indented_block_body) [35675 35693])
                            ("self" code nil (reparse-symbol indented_block_body) [35702 35724])
                            ("self" variable nil (reparse-symbol indented_block_body) [35733 35754]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35495 35499])
                            ("args" variable nil (reparse-symbol function_parameters) [35501 35506])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35508 35516]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35482 35755])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35776 35780])
                            ("attr" variable nil (reparse-symbol function_parameters) [35782 35786]))                          )
                        (reparse-symbol indented_block_body) [35760 35825])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35845 35849])
                            ("k" variable nil (reparse-symbol function_parameters) [35851 35852])
                            ("v" variable nil (reparse-symbol function_parameters) [35854 35855]))                          )
                        (reparse-symbol indented_block_body) [35829 36072])
                    ("authenticate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36094 36098])
                            ("db" variable nil (reparse-symbol function_parameters) [36100 36102])
                            ("login" variable nil (reparse-symbol function_parameters) [36104 36109])
                            ("password" variable nil (reparse-symbol function_parameters) [36116 36124])
                            ("uid" variable nil (reparse-symbol function_parameters) [36131 36134]))                          
                        :documentation "
        Authenticate the current user with the given db, login and
        password. If successful, store the authentication parameters in the
        current session and request.

        :param uid: If not None, that user id will be used instead the login
                    to authenticate the user.
        ")
                        (reparse-symbol indented_block_body) [36077 37120])
                    ("check_security" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37144 37148]))                          
                        :documentation "
        Check the current authentication parameters to know if those are still
        valid. This method should be called at each request. If the
        authentication fails, a :exc:`SessionExpiredException` is raised.
        ")
                        (reparse-symbol indented_block_body) [37125 37554])
                    ("logout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37570 37574])
                            ("keep_db" variable nil (reparse-symbol function_parameters) [37576 37583]))                          )
                        (reparse-symbol indented_block_body) [37559 37752])
                    ("_default_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37777 37781]))                          )
                        (reparse-symbol indented_block_body) [37757 37977])
                    ("get_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37998 38002]))                          
                        :documentation "
        Re-initializes the current user's session context (based on his
        preferences) by calling res.users.get_context() with the old context.

        :returns: the new context
        ")
                        (reparse-symbol indented_block_body) [37982 38502])
                    ("_fix_lang" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38521 38525])
                            ("context" variable nil (reparse-symbol function_parameters) [38527 38534]))                          
                        :documentation " OpenERP provides languages which may not make sense and/or may not
        be understood by the web client's libraries.

        Fix those here.

        :param dict context: context to fix
        ")
                        (reparse-symbol indented_block_body) [38507 39090])
                    ("\"\"\"
        Damn properties for retro-compatibility. All of that is deprecated,
        all of that.
    \"\"\"" code nil (reparse-symbol indented_block_body) [39132 39240])
                    ("_db" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39267 39271]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39245 39297])
                    ("_db" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39325 39329])
                            ("value" variable nil (reparse-symbol function_parameters) [39331 39336]))                          
                        :decorators 
                          ( ("_db.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39301 39363])
                    ("_uid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39390 39394]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39367 39421])
                    ("_uid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39451 39455])
                            ("value" variable nil (reparse-symbol function_parameters) [39457 39462]))                          
                        :decorators 
                          ( ("_uid.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39425 39490])
                    ("_login" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39519 39523]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39494 39552])
                    ("_login" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39586 39590])
                            ("value" variable nil (reparse-symbol function_parameters) [39592 39597]))                          
                        :decorators 
                          ( ("_login.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39556 39627])
                    ("_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39659 39663]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39631 39695])
                    ("_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39735 39739])
                            ("value" variable nil (reparse-symbol function_parameters) [39741 39746]))                          
                        :decorators 
                          ( ("_password.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39699 39779])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39793 39797])
                            ("service_name" variable nil (reparse-symbol function_parameters) [39799 39811])
                            ("method" variable nil (reparse-symbol function_parameters) [39813 39819])
                            ("args" variable nil (reparse-symbol function_parameters) [39821 39826]))                          
                        :documentation "
        .. deprecated:: 8.0
            Use :func:`dispatch_rpc` instead.
        ")
                        (reparse-symbol indented_block_body) [39784 39983])
                    ("proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39998 40002])
                            ("service" variable nil (reparse-symbol function_parameters) [40004 40011]))                          
                        :documentation "
        .. deprecated:: 8.0
            Use :func:`dispatch_rpc` instead.
        ")
                        (reparse-symbol indented_block_body) [39988 40150])
                    ("assert_valid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40172 40176])
                            ("force" variable nil (reparse-symbol function_parameters) [40178 40183]))                          
                        :documentation "
        .. deprecated:: 8.0
            Use :meth:`check_security` instead.

        Ensures this session is valid (logged into the openerp server)
        ")
                        (reparse-symbol indented_block_body) [40155 40638])
                    ("ensure_valid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40660 40664]))                          
                        :documentation "
        .. deprecated:: 8.0
            Use :meth:`check_security` instead.
        ")
                        (reparse-symbol indented_block_body) [40643 40907])
                    ("execute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40924 40928])
                            ("model" variable nil (reparse-symbol function_parameters) [40930 40935])
                            ("func" variable nil (reparse-symbol function_parameters) [40937 40941])
                            ("l" variable nil (reparse-symbol function_parameters) [40943 40945])
                            ("d" variable nil (reparse-symbol function_parameters) [40947 40950]))                          
                        :documentation "
        .. deprecated:: 8.0
            Use the registry and cursor in :data:`request` instead.
        ")
                        (reparse-symbol indented_block_body) [40912 41166])
                    ("exec_workflow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41189 41193])
                            ("model" variable nil (reparse-symbol function_parameters) [41195 41200])
                            ("id" variable nil (reparse-symbol function_parameters) [41202 41204])
                            ("signal" variable nil (reparse-symbol function_parameters) [41206 41212]))                          
                        :documentation "
        .. deprecated:: 8.0
            Use the registry and cursor in :data:`request` instead.
        ")
                        (reparse-symbol indented_block_body) [41171 41480])
                    ("model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41495 41499])
                            ("model" variable nil (reparse-symbol function_parameters) [41501 41506]))                          
                        :documentation "
        .. deprecated:: 8.0
            Use the registry and cursor in :data:`request` instead.

        Get an RPC proxy for the object ``model``, bound to this session.

        :param model: an OpenERP model name
        :type model: str
        :rtype: a model object
        ")
                        (reparse-symbol indented_block_body) [41485 41925])
                    ("save_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41946 41950])
                            ("action" variable nil (reparse-symbol function_parameters) [41952 41958]))                          
                        :documentation "
        This method store an action object in the session and returns an integer
        identifying that action. The method get_action() can be used to get
        back the action.

        :param the_action: The action to save in the session.
        :type the_action: anything
        :return: A key identifying the saved action.
        :rtype: integer
        ")
                        (reparse-symbol indented_block_body) [41930 42771])
                    ("get_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42791 42795])
                            ("key" variable nil (reparse-symbol function_parameters) [42797 42800]))                          
                        :documentation "
        Gets back a previously saved action. This method can return None if the action
        was saved since too much time (this case should be handled in a smart way).

        :param key: The key given by save_action()
        :type key: integer
        :return: The saved action or None.
        :rtype: anything
        ")
                        (reparse-symbol indented_block_body) [42776 43256]))                  
                :type "class")
                nil [35421 43256])
            ("session_gc" function (:arguments 
              ( ("session_store" variable nil (reparse-symbol function_parameters) [43272 43285]))              ) nil [43257 43669])
            ("mimetypes" code nil nil [43860 43912])
            ("mimetypes" code nil nil [43913 43972])
            ("mimetypes" code nil nil [43973 44025])
            ("Response" type
               (:documentation " Response object passed through controller route chain.

    In addition to the :class:`werkzeug.wrappers.Response` parameters, this
    class's constructor can take the following additional parameters
    for QWeb Lazy Rendering.

    :param basestring template: template to render
    :param dict qcontext: Rendering context to use
    :param int uid: User id to use for the ir.ui.view render call,
                    ``None`` to use the request's user (the default)

    these attributes are available as parameters on the Response object and
    can be altered at any time before rendering

    Also exposes all the attributes and methods of
    :class:`werkzeug.wrappers.Response`.
    "
                :superclasses ("werkzeug.wrappers.Response")
                :members 
                  ( ("default_mimetype" variable nil (reparse-symbol indented_block_body) [44778 44808])
                    ("__init__" function
                       (:suite 
                          ( ("template" variable nil (reparse-symbol indented_block_body) [44854 44889])
                            ("qcontext" variable nil (reparse-symbol indented_block_body) [44898 44933])
                            ("uid" variable nil (reparse-symbol indented_block_body) [44942 44967])
                            ("super" code nil (reparse-symbol indented_block_body) [44976 45019])
                            ("self" code nil (reparse-symbol indented_block_body) [45028 45069]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44826 44830])
                            ("args" variable nil (reparse-symbol function_parameters) [44832 44837])
                            ("kw" variable nil (reparse-symbol function_parameters) [44839 44843]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44813 45070])
                    ("set_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45091 45095])
                            ("template" variable nil (reparse-symbol function_parameters) [45097 45105])
                            ("qcontext" variable nil (reparse-symbol function_parameters) [45112 45120])
                            ("uid" variable nil (reparse-symbol function_parameters) [45127 45130]))                          )
                        (reparse-symbol indented_block_body) [45075 45778])
                    ("is_qweb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45809 45813]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [45783 45857])
                    ("render" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45873 45877]))                          
                        :documentation " Renders the Response's template, returns the result
        ")
                        (reparse-symbol indented_block_body) [45862 46196])
                    ("flatten" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46213 46217]))                          
                        :documentation " Forces the rendering of the response's template, sets the result
        as response body and unsets :attr:`.template`
        ")
                        (reparse-symbol indented_block_body) [46201 46436]))                  
                :type "class")
                nil [44027 46436])
            ("DisableCacheMiddleware" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [46512 46526]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46492 46496])
                            ("app" variable nil (reparse-symbol function_parameters) [46498 46501]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46479 46527])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46544 46548])
                            ("environ" variable nil (reparse-symbol function_parameters) [46550 46557])
                            ("start_response" variable nil (reparse-symbol function_parameters) [46559 46573]))                          )
                        (reparse-symbol indented_block_body) [46531 47226]))                  
                :type "class")
                nil [46437 47226])
            ("Root" type
               (:documentation "Root WSGI application for the OpenERP Web Client.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [47344 47364]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47329 47333]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47316 47365])
                    ("session_store" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47407 47411]))                          
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [47370 47651])
                    ("nodb_routing_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47696 47700]))                          
                        :decorators 
                          ( ("lazy_property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [47656 47826])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47844 47848])
                            ("environ" variable nil (reparse-symbol function_parameters) [47850 47857])
                            ("start_response" variable nil (reparse-symbol function_parameters) [47859 47873]))                          
                        :documentation " Handle a WSGI request
        ")
                        (reparse-symbol indented_block_body) [47831 48068])
                    ("load_addons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48089 48093]))                          
                        :documentation " Load all addons from addons path containing static files and
        controllers and configure them.  ")
                        (reparse-symbol indented_block_body) [48073 49663])
                    ("setup_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49686 49690])
                            ("httprequest" variable nil (reparse-symbol function_parameters) [49692 49703]))                          )
                        (reparse-symbol indented_block_body) [49668 50254])
                    ("setup_db" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50272 50276])
                            ("httprequest" variable nil (reparse-symbol function_parameters) [50278 50289]))                          )
                        (reparse-symbol indented_block_body) [50259 50741])
                    ("setup_lang" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50761 50765])
                            ("httprequest" variable nil (reparse-symbol function_parameters) [50767 50778]))                          )
                        (reparse-symbol indented_block_body) [50746 51033])
                    ("get_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51054 51058])
                            ("httprequest" variable nil (reparse-symbol function_parameters) [51060 51071]))                          )
                        (reparse-symbol indented_block_body) [51038 51376])
                    ("get_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51398 51402])
                            ("httprequest" variable nil (reparse-symbol function_parameters) [51404 51415])
                            ("result" variable nil (reparse-symbol function_parameters) [51417 51423])
                            ("explicit_session" variable nil (reparse-symbol function_parameters) [51425 51441]))                          )
                        (reparse-symbol indented_block_body) [51381 52964])
                    ("dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52982 52986])
                            ("environ" variable nil (reparse-symbol function_parameters) [52988 52995])
                            ("start_response" variable nil (reparse-symbol function_parameters) [52997 53011]))                          
                        :documentation "
        Performs the actual WSGI dispatching for the application.
        ")
                        (reparse-symbol indented_block_body) [52969 55129])
                    ("get_db_router" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55152 55156])
                            ("db" variable nil (reparse-symbol function_parameters) [55158 55160]))                          )
                        (reparse-symbol indented_block_body) [55134 55280]))                  
                :type "class")
                nil [47227 55280])
            ("db_list" function (:arguments 
              ( ("force" variable nil (reparse-symbol function_parameters) [55293 55298])
                ("httprequest" variable nil (reparse-symbol function_parameters) [55306 55317]))              ) nil [55281 55422])
            ("db_filter" function (:arguments 
              ( ("dbs" variable nil (reparse-symbol function_parameters) [55437 55440])
                ("httprequest" variable nil (reparse-symbol function_parameters) [55442 55453]))              ) nil [55423 55800])
            ("db_monodb" function
               (:documentation "
        Magic function to find the current database.

        Implementation details:

        * Magic
        * More magic

        Returns ``None`` if the magic is not magic enough.
    "
                :arguments 
                  ( ("httprequest" variable nil (reparse-symbol function_parameters) [55815 55826]))                  )
                nil [55801 56376])
            ("send_file" function
               (:documentation "This is a modified version of Flask's send_file()

    Sends the contents of a file to the client. This will use the
    most efficient method available and configured.  By default it will
    try to use the WSGI server's file_wrapper support.

    By default it will try to guess the mimetype for you, but you can
    also explicitly provide one.  For extra security you probably want
    to send certain files as attachment (HTML for instance).  The mimetype
    guessing requires a `filename` or an `attachment_filename` to be
    provided.

    Please never pass filenames to this function from user sources without
    checking them first.

    :param filepath_or_fp: the filename of the file to send.
                           Alternatively a file object might be provided
                           in which case `X-Sendfile` might not work and
                           fall back to the traditional method.  Make sure
                           that the file pointer is positioned at the start
                           of data to send before calling :func:`send_file`.
    :param mimetype: the mimetype of the file if provided, otherwise
                     auto detection happens.
    :param as_attachment: set to `True` if you want to send this file with
                          a ``Content-Disposition: attachment`` header.
    :param filename: the filename for the attachment if it differs from the file's filename or
                     if using file object without 'name' attribute (eg: E-tags with StringIO).
    :param mtime: last modification time to use for contitional response.
    :param add_etags: set to `False` to disable attaching of etags.
    :param conditional: set to `False` to disable conditional responses.

    :param cache_timeout: the timeout in seconds for the headers.
    "
                :arguments 
                  ( ("filepath_or_fp" variable nil (reparse-symbol function_parameters) [56391 56405])
                    ("mimetype" variable nil (reparse-symbol function_parameters) [56407 56415])
                    ("as_attachment" variable nil (reparse-symbol function_parameters) [56422 56435])
                    ("filename" variable nil (reparse-symbol function_parameters) [56443 56451])
                    ("mtime" variable nil (reparse-symbol function_parameters) [56458 56463])
                    ("add_etags" variable nil (reparse-symbol function_parameters) [56484 56493])
                    ("cache_timeout" variable nil (reparse-symbol function_parameters) [56500 56513])
                    ("conditional" variable nil (reparse-symbol function_parameters) [56528 56539]))                  )
                nil [56377 60515])
            ("CommonController" type
               (:superclasses ("Controller")
                :members 
                  ( ("" code nil (reparse-symbol indented_block_body) [60700 60738])
                    ("jsonrpc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60755 60759])
                            ("service" variable nil (reparse-symbol function_parameters) [60761 60768])
                            ("method" variable nil (reparse-symbol function_parameters) [60770 60776])
                            ("args" variable nil (reparse-symbol function_parameters) [60778 60782]))                          
                        :documentation " Method used by client APIs to contact OpenERP. ")
                        (reparse-symbol indented_block_body) [60743 60899])
                    ("" code nil (reparse-symbol indented_block_body) [60910 60955])
                    ("gen_session_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60979 60983]))                          )
                        (reparse-symbol indented_block_body) [60960 61058]))                  
                :type "class")
                nil [60653 61058])
            ("root" variable nil nil [61088 61101])
            ("openerp" code nil nil [61102 61157]))          
    :file "http.py"
    :pointmax 61179
    :fsize 61178
    :lastmodtime '(22424 53098 525743 920000)
    :unmatched-syntax '((INDENT_BLOCK 54680 . 54823) (NEWLINE 54679 . 54680) (COLON 54678 . 54679) (ELSE 54674 . 54678) (INDENT_BLOCK 54555 . 54654) (NEWLINE 54254 . 54255) (COLON 54253 . 54254) (TRY 54031 . 54034) (AS 54247 . 54249) (NAME 29307 . 29316) (IF 29332 . 29334) (ELSE 29355 . 29359) (NAME 28661 . 28680) (IF 28732 . 28734) (ELSE 28742 . 28746) (RETURN 12339 . 12345) (IF 12362 . 12364) (ELSE 12385 . 12389) (RETURN 12066 . 12072) (IF 12127 . 12129) (ELSE 12138 . 12142) (NAME 29307 . 29316) (IF 29332 . 29334) (ELSE 29355 . 29359) (NAME 28661 . 28680) (IF 28732 . 28734) (ELSE 28742 . 28746) (RETURN 12339 . 12345) (IF 12362 . 12364) (ELSE 12385 . 12389) (RETURN 12066 . 12072) (IF 12127 . 12129) (ELSE 12138 . 12142) (NAME 29307 . 29316) (IF 29332 . 29334) (ELSE 29355 . 29359) (NAME 28661 . 28680) (IF 28732 . 28734) (ELSE 28742 . 28746) (RETURN 12339 . 12345) (IF 12362 . 12364) (ELSE 12385 . 12389) (RETURN 12066 . 12072) (IF 12127 . 12129) (ELSE 12138 . 12142))
    )
   )
  :file "!home!skyline!Development!odoo!mera!odoo-8.0-20160428!openerp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
