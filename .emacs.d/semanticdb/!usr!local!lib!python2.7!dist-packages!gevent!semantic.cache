;; Object gevent/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "gevent/"
  :tables (list 
   (semanticdb-table "hub.py"
    :major-mode 'python-mode
    :tags 
        '( ("__future__" include nil nil [68 106])
            ("sys" include nil nil [107 117])
            ("os" include nil nil [118 127])
            ("traceback" include nil nil [128 144])
            ("greenlet" include nil nil [146 161])
            ("greenlet_version" variable nil nil [203 260])
            ("if" code nil nil [261 356])
            ("if" code nil nil [356 631])
            ("greenlet" include nil nil [631 686])
            ("__all__" variable nil nil [689 906])
            ("PYGTE279" variable nil nil [1026 1135])
            ("PY3" code nil nil [1137 1167])
            ("PYPY" variable nil nil [1168 1208])
            ("if" code nil nil [1210 1337])
            ("if" code nil nil [1338 1420])
            ("threadlocal" variable nil nil [1420 1447])
            ("_threadlocal" variable nil nil [1448 1476])
            ("_threadlocal" variable nil nil [1477 1500])
            ("get_ident" variable nil nil [1501 1529])
            ("MAIN_THREAD" variable nil nil [1530 1555])
            ("spawn_raw" function (:arguments 
              ( ("function" variable nil (reparse-symbol function_parameters) [1572 1580])
                ("args" variable nil (reparse-symbol function_parameters) [1582 1587])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1589 1597]))              ) nil [1558 1718])
            ("sleep" function
               (:documentation "Put the current greenlet to sleep for at least *seconds*.

    *seconds* may be specified as an integer, or a float if fractional seconds
    are desired.

    If *ref* is false, the greenlet running sleep() will not prevent gevent.wait()
    from exiting.
    "
                :arguments 
                  ( ("seconds" variable nil (reparse-symbol function_parameters) [1730 1737])
                    ("ref" variable nil (reparse-symbol function_parameters) [1741 1744]))                  )
                nil [1720 2230])
            ("idle" function (:arguments 
              ( ("priority" variable nil (reparse-symbol function_parameters) [2241 2249]))              ) nil [2232 2379])
            ("kill" function
               (:documentation "Kill greenlet asynchronously. The current greenlet is not unscheduled.

    Note, that :meth:`gevent.Greenlet.kill` method does the same and more. However,
    MAIN greenlet - the one that exists initially - does not have ``kill()`` method
    so you have to use this function.
    "
                :arguments 
                  ( ("greenlet" variable nil (reparse-symbol function_parameters) [2390 2398])
                    ("exception" variable nil (reparse-symbol function_parameters) [2400 2409]))                  )
                nil [2381 2807])
            ("signal" type
               (:superclasses ("object")
                :members 
                  ( ("greenlet_class" variable nil (reparse-symbol indented_block_body) [2836 2857])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2928 2948])
                            ("self" variable nil (reparse-symbol indented_block_body) [2957 3014])
                            ("self" code nil (reparse-symbol indented_block_body) [3023 3054])
                            ("self" variable nil (reparse-symbol indented_block_body) [3063 3085])
                            ("self" variable nil (reparse-symbol indented_block_body) [3094 3110])
                            ("self" variable nil (reparse-symbol indented_block_body) [3119 3139])
                            ("if" code nil (reparse-symbol indented_block_body) [3148 3263]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2876 2880])
                            ("signalnum" variable nil (reparse-symbol function_parameters) [2882 2891])
                            ("handler" variable nil (reparse-symbol function_parameters) [2893 2900])
                            ("args" variable nil (reparse-symbol function_parameters) [2902 2907])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2909 2917]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2863 3263])
                    ("_get_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3281 3285]))                          )
                        (reparse-symbol indented_block_body) [3268 3320])
                    ("_set_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3338 3342])
                            ("value" variable nil (reparse-symbol function_parameters) [3344 3349]))                          )
                        (reparse-symbol indented_block_body) [3325 3385])
                    ("ref" variable nil (reparse-symbol indented_block_body) [3390 3424])
                    ("del" code nil (reparse-symbol indented_block_body) [3429 3451])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3468 3472]))                          )
                        (reparse-symbol indented_block_body) [3457 3503])
                    ("_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3519 3523]))                          )
                        (reparse-symbol indented_block_body) [3508 3699])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3715 3719]))                          )
                        (reparse-symbol indented_block_body) [3704 3860]))                  
                :type "class")
                nil [2809 3860])
            ("reinit" function nil nil [3862 3947])
            ("get_hub_class" function (:documentation "Return the type of hub to use for the current thread.

    If there's no type of hub for the current thread yet, 'gevent.hub.Hub' is used.
    ") nil [3949 4326])
            ("get_hub" function
               (:documentation "Return the hub for the current thread.

    If hub does not exists in the current thread, the new one is created with call to :meth:`get_hub_class`.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [4340 4345])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4347 4355]))                  )
                nil [4328 4725])
            ("_get_hub" function (:documentation "Return the hub for the current thread.

    Return ``None`` if no hub has been created yet.
    ") nil [4727 4955])
            ("set_hub" function (:arguments 
              ( ("hub" variable nil (reparse-symbol function_parameters) [4969 4972]))              ) nil [4957 5002])
            ("_import" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [5016 5020]))              ) nil [5004 6083])
            ("config" function (:arguments 
              ( ("default" variable nil (reparse-symbol function_parameters) [6096 6103])
                ("envvar" variable nil (reparse-symbol function_parameters) [6105 6111]))              ) nil [6085 6253])
            ("resolver_config" function (:arguments 
              ( ("default" variable nil (reparse-symbol function_parameters) [6275 6282])
                ("envvar" variable nil (reparse-symbol function_parameters) [6284 6290]))              ) nil [6255 6380])
            ("_resolvers" variable nil nil [6382 6552])
            ("Hub" type
               (:documentation "A greenlet that runs the event loop.

    It is created automatically by :func:`get_hub`.
    "
                :superclasses ("greenlet")
                :members 
                  ( ("SYSTEM_ERROR" variable nil (reparse-symbol indented_block_body) [6686 6745])
                    ("NOT_ERROR" variable nil (reparse-symbol indented_block_body) [6750 6788])
                    ("loop_class" variable nil (reparse-symbol indented_block_body) [6793 6847])
                    ("resolver_class" variable nil (reparse-symbol indented_block_body) [6852 7015])
                    ("resolver_class" variable nil (reparse-symbol indented_block_body) [7020 7087])
                    ("threadpool_class" variable nil (reparse-symbol indented_block_body) [7092 7170])
                    ("backend" variable nil (reparse-symbol indented_block_body) [7175 7215])
                    ("format_context" variable nil (reparse-symbol indented_block_body) [7220 7253])
                    ("threadpool_size" variable nil (reparse-symbol indented_block_body) [7258 7278])
                    ("__init__" function
                       (:suite 
                          ( ("greenlet" code nil (reparse-symbol indented_block_body) [7337 7360])
                            ("if" code nil (reparse-symbol indented_block_body) [7369 7811])
                            ("self" variable nil (reparse-symbol indented_block_body) [7819 7840])
                            ("self" variable nil (reparse-symbol indented_block_body) [7849 7872])
                            ("self" variable nil (reparse-symbol indented_block_body) [7881 7931]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7297 7301])
                            ("loop" variable nil (reparse-symbol function_parameters) [7303 7307])
                            ("default" variable nil (reparse-symbol function_parameters) [7314 7321]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7284 7932])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7950 7954]))                          )
                        (reparse-symbol indented_block_body) [7937 8478])
                    ("handle_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8500 8504])
                            ("context" variable nil (reparse-symbol function_parameters) [8506 8513])
                            ("type" variable nil (reparse-symbol function_parameters) [8515 8519])
                            ("value" variable nil (reparse-symbol function_parameters) [8521 8526])
                            ("tb" variable nil (reparse-symbol function_parameters) [8528 8530]))                          )
                        (reparse-symbol indented_block_body) [8483 8758])
                    ("handle_system_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8787 8791])
                            ("type" variable nil (reparse-symbol function_parameters) [8793 8797])
                            ("value" variable nil (reparse-symbol function_parameters) [8799 8804]))                          )
                        (reparse-symbol indented_block_body) [8763 9392])
                    ("print_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9417 9421])
                            ("context" variable nil (reparse-symbol function_parameters) [9423 9430])
                            ("type" variable nil (reparse-symbol function_parameters) [9432 9436])
                            ("value" variable nil (reparse-symbol function_parameters) [9438 9443])
                            ("tb" variable nil (reparse-symbol function_parameters) [9445 9447]))                          )
                        (reparse-symbol indented_block_body) [9397 9891])
                    ("switch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9907 9911]))                          )
                        (reparse-symbol indented_block_body) [9896 10074])
                    ("switch_out" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10094 10098]))                          )
                        (reparse-symbol indented_block_body) [10079 10197])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10211 10215])
                            ("watcher" variable nil (reparse-symbol function_parameters) [10217 10224]))                          )
                        (reparse-symbol indented_block_body) [10202 10528])
                    ("cancel_wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10549 10553])
                            ("watcher" variable nil (reparse-symbol function_parameters) [10555 10562])
                            ("error" variable nil (reparse-symbol function_parameters) [10564 10569]))                          )
                        (reparse-symbol indented_block_body) [10533 10683])
                    ("_cancel_wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10705 10709])
                            ("watcher" variable nil (reparse-symbol function_parameters) [10711 10718])
                            ("error" variable nil (reparse-symbol function_parameters) [10720 10725]))                          )
                        (reparse-symbol indented_block_body) [10688 10972])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10985 10989]))                          )
                        (reparse-symbol indented_block_body) [10977 11362])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11675 11679])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11681 11688]))                          
                        :documentation "Wait for the event loop to finish. Exits only when there are
        no more spawned greenlets, started servers, active timeouts or watchers.

        If *timeout* is provided, wait no longer for the specified number of seconds.

        Returns True if exited because the loop finished execution.
        Returns False if exited because of timeout expired.
        ")
                        (reparse-symbol indented_block_body) [11666 12587])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12604 12608])
                            ("destroy_loop" variable nil (reparse-symbol function_parameters) [12610 12622]))                          )
                        (reparse-symbol indented_block_body) [12592 13125])
                    ("_get_resolver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13148 13152]))                          )
                        (reparse-symbol indented_block_body) [13130 13398])
                    ("_set_resolver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13421 13425])
                            ("value" variable nil (reparse-symbol function_parameters) [13427 13432]))                          )
                        (reparse-symbol indented_block_body) [13403 13466])
                    ("_del_resolver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13489 13493]))                          )
                        (reparse-symbol indented_block_body) [13471 13523])
                    ("resolver" variable nil (reparse-symbol indented_block_body) [13528 13592])
                    ("_get_threadpool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13618 13622]))                          )
                        (reparse-symbol indented_block_body) [13598 13904])
                    ("_set_threadpool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13929 13933])
                            ("value" variable nil (reparse-symbol function_parameters) [13935 13940]))                          )
                        (reparse-symbol indented_block_body) [13909 13976])
                    ("_del_threadpool" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14001 14005]))                          )
                        (reparse-symbol indented_block_body) [13981 14037])
                    ("threadpool" variable nil (reparse-symbol indented_block_body) [14042 14114]))                  
                :type "class")
                nil [6555 14115])
            ("LoopExit" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [14148 14152]))                  
                :type "class")
                nil [14117 14153])
            ("Waiter" type
               (:documentation "A low level communication utility for greenlets.

    Wrapper around greenlet's ``switch()`` and ``throw()`` calls that makes them somewhat safer:

    * switching will occur only if the waiting greenlet is executing :meth:`get` method currently;
    * any error raised in the greenlet is handled inside :meth:`switch` and :meth:`throw`
    * if :meth:`switch`/:meth:`throw` is called before the receiver calls :meth:`get`, then :class:`Waiter`
      will store the value/exception. The following :meth:`get` will return the value/raise the exception.

    The :meth:`switch` and :meth:`throw` methods must only be called from the :class:`Hub` greenlet.
    The :meth:`get` method must be called from a greenlet other than :class:`Hub`.

        >>> result = Waiter()
        >>> timer = get_hub().loop.timer(0.1)
        >>> timer.start(result.switch, 'hello from Waiter')
        >>> result.get() # blocks for 0.1 seconds
        'hello from Waiter'

    If switch is called before the greenlet gets a chance to call :meth:`get` then
    :class:`Waiter` stores the value.

        >>> result = Waiter()
        >>> timer = get_hub().loop.timer(0.1)
        >>> timer.start(result.switch, 'hi from Waiter')
        >>> sleep(0.2)
        >>> result.get() # returns immediatelly without blocking
        'hi from Waiter'

    .. warning::

        This a limited and dangerous way to communicate between greenlets. It can easily
        leave a greenlet unscheduled forever if used incorrectly. Consider using safer
        :class:`Event`/:class:`AsyncResult`/:class:`Queue` classes.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15781 15835])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15879 15969])
                            ("self" variable nil (reparse-symbol indented_block_body) [15977 15997])
                            ("self" variable nil (reparse-symbol indented_block_body) [16006 16023])
                            ("self" variable nil (reparse-symbol indented_block_body) [16032 16055]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15854 15858])
                            ("hub" variable nil (reparse-symbol function_parameters) [15860 15863]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15841 16056])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16071 16075]))                          )
                        (reparse-symbol indented_block_body) [16061 16165])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16182 16186]))                          )
                        (reparse-symbol indented_block_body) [16170 16557])
                    ("ready" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16572 16576]))                          
                        :documentation "Return true if and only if it holds a value or an exception")
                        (reparse-symbol indented_block_body) [16562 16697])
                    ("successful" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16717 16721]))                          
                        :documentation "Return true if and only if it is ready and holds a value")
                        (reparse-symbol indented_block_body) [16702 16834])
                    ("exc_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16866 16870]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16839 17057])
                    ("switch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17073 17077])
                            ("value" variable nil (reparse-symbol function_parameters) [17079 17084]))                          
                        :documentation "Switch to the greenlet if one's available. Otherwise store the value.")
                        (reparse-symbol indented_block_body) [17062 17588])
                    ("switch_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17609 17613])
                            ("args" variable nil (reparse-symbol function_parameters) [17615 17620]))                          )
                        (reparse-symbol indented_block_body) [17593 17656])
                    ("throw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17671 17675])
                            ("throw_args" variable nil (reparse-symbol function_parameters) [17677 17688]))                          
                        :documentation "Switch to the greenlet with the exception. If there's no greenlet, store the exception.")
                        (reparse-symbol indented_block_body) [17661 18182])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18195 18199]))                          
                        :documentation "If a value/an exception is stored, return/raise it. Otherwise until switch() or throw() is called.")
                        (reparse-symbol indented_block_body) [18187 18770])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18788 18792])
                            ("source" variable nil (reparse-symbol function_parameters) [18794 18800]))                          )
                        (reparse-symbol indented_block_body) [18775 18933]))                  
                :type "class")
                nil [14155 18933])
            ("iwait" function
               (:documentation "Yield objects as they are ready, until all are ready or timeout expired.

    *objects* must be iterable yielding instance implementing wait protocol (rawlink() and unlink()).
    "
                :arguments 
                  ( ("objects" variable nil (reparse-symbol function_parameters) [19122 19129])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19131 19138]))                  )
                nil [19112 20158])
            ("wait" function
               (:documentation "Wait for *objects* to become ready or for event loop to finish.

    If *objects* is provided, it should be an iterable containg objects implementing wait protocol (rawlink() and
    unlink() methods):

    - :class:`gevent.Greenlet` instance
    - :class:`gevent.event.Event` instance
    - :class:`gevent.lock.Semaphore` instance
    - :class:`gevent.subprocess.Popen` instance

    If *objects* is ``None`` (the default), ``wait()`` blocks until all event loops has nothing to do:

    - all greenlets have finished
    - all servers were stopped
    - all event loop watchers were stopped.

    If *count* is ``None`` (the default), wait for all of *object* to become ready.

    If *count* is a number, wait for *count* object to become ready. (For example, if count is ``1`` then the
    function exits when any object in the list is ready).

    If *timeout* is provided, it specifies the maximum number of seconds ``wait()`` will block.

    Returns the list of ready objects, in the order in which they were ready.
    "
                :arguments 
                  ( ("objects" variable nil (reparse-symbol function_parameters) [20169 20176])
                    ("timeout" variable nil (reparse-symbol function_parameters) [20183 20190])
                    ("count" variable nil (reparse-symbol function_parameters) [20197 20202]))                  )
                nil [20160 21564])
            ("linkproxy" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [21595 21626])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21675 21699])
                            ("self" variable nil (reparse-symbol indented_block_body) [21708 21722]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21645 21649])
                            ("callback" variable nil (reparse-symbol function_parameters) [21651 21659])
                            ("obj" variable nil (reparse-symbol function_parameters) [21661 21664]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21632 21723])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21741 21745])
                            ("args" variable nil (reparse-symbol function_parameters) [21747 21752]))                          )
                        (reparse-symbol indented_block_body) [21728 21886]))                  
                :type "class")
                nil [21566 21886])
            ("_NONE" type
               (:superclasses ("object")
                :members 
                  ( ("\"A special thingy you must never pass to any of gevent API\"" code nil (reparse-symbol indented_block_body) [21913 21972])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [21977 21991])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22010 22014]))                          )
                        (reparse-symbol indented_block_body) [21997 22042]))                  
                :type "class")
                nil [21888 22042])
            ("_NONE" variable nil nil [22043 22058]))          
    :file "hub.py"
    :pointmax 22059
    :fsize 22058
    :lastmodtime '(22174 31582 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "os.py"
    :file "os.py"
    :fsize 2737
    :lastmodtime '(22174 31582 0 0)
    )
   (semanticdb-table "greenlet.py"
    :file "greenlet.py"
    :fsize 15658
    :lastmodtime '(22174 31582 0 0)
    )
   )
  :file "!usr!local!lib!python2.7!dist-packages!gevent!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
